package co.id.sofcograha.base.master.usercompany.repositories;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;

import org.springframework.data.jpa.repository.support.SimpleJpaRepository;
import org.springframework.stereotype.Repository;

import co.id.sofcograha.base.master.company.entities.ECompany;
import co.id.sofcograha.base.master.user.entities.EUser;
import co.id.sofcograha.base.master.usercompany.entities.EUserCompany;
import co.id.sofcograha.base.utils.TimeUtil;
import co.id.sofcograha.base.utils.searchData.HqlSimpleSearchBuilder;
import co.id.sofcograha.base.utils.searchData.SearchParameter;
import co.id.sofcograha.base.utils.searchData.SearchResult;

@Repository
public class UserCompanyRepository extends SimpleJpaRepository<EUserCompany, String> {

	protected final EntityManager em;
	
	public UserCompanyRepository(EntityManager em) {
		super(EUserCompany.class, em);
		this.em = em;
	}

	public EUserCompany findByBK(EUser user, ECompany company) {
		
		String query = "SELECT e FROM EUserCompany e " + 
	                   "WHERE e.user = :user And " +
				             "e.company = :company";
		
		try {
			return em.createQuery(query, EUserCompany.class)
					.setParameter("user", user)
					.setParameter("company", company)
					.getSingleResult();
		} catch (NoResultException e) {
			return null;
		}
	}
	
	public EUserCompany findByUser(EUser user) {
		
		EUserCompany entity;
		
		String query = "SELECT e FROM EUserCompany e " + 
                       "WHERE e.user = :user";
		
		try {
			return em.createQuery(query, EUserCompany.class)
					.setParameter("user", user)
					.getSingleResult();
		} catch (NoResultException e) {
			entity = null;
		}
		
		return entity;
	}

	public EUserCompany findByUserAndCompany(EUser user, ECompany company) {
		return this.findByBK(user, company);
	}

	public List<EUserCompany> getActiveListUserCompanyByUser(EUser user) {
		List<EUserCompany> entitys;

		String query = "SELECT e FROM EUserCompany e " + 
                       "WHERE e.user = :user And " +
				             "e.company.active = true And " +
                             ":todayDate BETWEEN e.startDate AND e.endDate";

		try {
			return em.createQuery(query, EUserCompany.class)
					.setParameter("user", user)
					.setParameter("todayDate", TimeUtil.getSystemDateTime())
					.getResultList();
		} catch (NoResultException e) {
			entitys = new ArrayList<EUserCompany>();
		}
		
		return entitys;
	}
	
	public List<EUserCompany> getSuperUserByCompany(ECompany company, Boolean superUser) {
		
		List<EUserCompany> entities;

		String query = "SELECT e FROM EUserCompany e " + 
                       "WHERE e.company = :company And " +
			                 "e.superUser = :superUser";

	    try {
		    return em.createQuery(query, EUserCompany.class)
			   	     .setParameter("company", company)
				     .setParameter("superUser", superUser)
				     .getResultList();
	    } catch (NoResultException e) {
		    entities = new ArrayList<EUserCompany>();
	    }
	
	    return entities;
		
	}

	public SearchResult<EUserCompany> search(SearchParameter searchParameter) {
		HqlSimpleSearchBuilder<EUserCompany> search = new HqlSimpleSearchBuilder<>(EUserCompany.class, em);

		String userId = (String) searchParameter.getValueFromMappedParam("user.id");
		String companyId = (String) searchParameter.getValueFromMappedParam("company.id");
		Date startDate = (Date) searchParameter.getValueFromMappedParam("startDate");
		Date endDate = (Date) searchParameter.getValueFromMappedParam("endDate");
		Boolean superUser = (Boolean) searchParameter.getValueFromMappedParam("superUser");

		if (userId != null) {
			search.addWhere("AND user.id = :userId ");
			search.addParameter("userId", userId);
		}

		if (companyId != null) {
			search.addWhere("AND company.id = :companyId ");
			search.addParameter("companyId", companyId);
		}

		if (startDate != null) {
			search.addWhere("AND startDate = :startDate ");
			search.addParameter("startDate", startDate);
		}

		if (endDate != null) {
			search.addWhere("AND endDate = :endDate ");
			search.addParameter("endDate", endDate);
		}

		if (superUser != null) {
			search.addWhere("AND superUser = :superUser ");
			search.addParameter("superUser", superUser);
		}

		search.setSort(searchParameter.getSort());
		search.setPaging(searchParameter.getPagination());

		return search.getSearchResult();
	}
}