package co.id.sofcograha.domain.invoicing.commonMasters.setting.entities;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Version;

import co.id.sofcograha.base.authentication.CurrentUser;
import co.id.sofcograha.base.exceptions.DevException;
import co.id.sofcograha.base.master.company.entities.ECompany;

@Entity
@Access(AccessType.FIELD)
@Table(name = "am50")
public class ESetting implements Cloneable {

	@Id
	@Column(name = "id_am50")
	private String id;
	
    @Column(name = "floto")
    private String floto;
    
    @Column(name = "rstoto")
    private String rstoto;
    
    @Version
    @Column(name = "version")
    private Long version;
    
    @Column(name = "usrcrt")
    private String usrcrt;
    
    @Column(name = "tglcrt")
    private String tglcrt;
    
    @Column(name = "jamcrt")
    private String jamcrt;
    
    @Column(name = "usrupd")
    private String usrupd;
    
    @Column(name = "tglupd")
    private String tglupd;
    
    @Column(name = "jamupd")
    private String jamupd;
    
    @Column(name = "bahasa")
    private String bahasa;
    
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name="id_std_company", referencedColumnName="id", updatable = false, insertable = false)
    private ECompany eCompany;

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getFloto() {
		return floto;
	}

	public void setFloto(String floto) {
		this.floto = floto;
	}

	public String getRstoto() {
		return rstoto;
	}

	public void setRstoto(String rstoto) {
		this.rstoto = rstoto;
	}

	public Long getVersion() {
		return version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	public String getUsrcrt() {
		return usrcrt;
	}

	public void setUsrcrt(String usrcrt) {
		this.usrcrt = usrcrt;
	}

	public String getTglcrt() {
		return tglcrt;
	}

	public void setTglcrt(String tglcrt) {
		this.tglcrt = tglcrt;
	}

	public String getJamcrt() {
		return jamcrt;
	}

	public void setJamcrt(String jamcrt) {
		this.jamcrt = jamcrt;
	}

	public String getUsrupd() {
		return usrupd;
	}

	public void setUsrupd(String usrupd) {
		this.usrupd = usrupd;
	}

	public String getTglupd() {
		return tglupd;
	}

	public void setTglupd(String tglupd) {
		this.tglupd = tglupd;
	}

	public String getJamupd() {
		return jamupd;
	}

	public void setJamupd(String jamupd) {
		this.jamupd = jamupd;
	}

	public String getBahasa() {
		return bahasa;
	}

	public void setBahasa(String bahasa) {
		this.bahasa = bahasa;
	}

	public ECompany geteCompany() {
		return eCompany;
	}

	public void seteCompany(ECompany eCompany) {
		this.eCompany = eCompany;
	}

	public Object clone() {
		try {
			return super.clone();
		} catch (CloneNotSupportedException e) {
			throw new DevException("Clone not supported", e);
		}
	}

	@PrePersist
	private void prePersist() {

		Date currentDate = new Date();
	  
		this.id = UUID.randomUUID().toString();
    
		this.usrcrt = CurrentUser.getUsername();
		this.tglcrt = new SimpleDateFormat("yyyyMMdd").format(currentDate);
		this.jamcrt = new SimpleDateFormat("HHmmss").format(currentDate);
	
	}

	@PreUpdate
	private void preUpdate() {
		Date currentDate = new Date();
		
		this.usrupd = CurrentUser.getUsername();
		this.tglupd = new SimpleDateFormat("yyyyMMdd").format(currentDate);
		this.jamupd = new SimpleDateFormat("HHmmss").format(currentDate);
	}

}