package co.id.sofcograha.domain.invoicing.admin.upload.services;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import co.id.sofcograha.base.exceptions.BusinessException;
import co.id.sofcograha.base.extendables.BaseService;
import co.id.sofcograha.base.utils.VersionUtil;
import co.id.sofcograha.base.utils.searchData.SearchParameter;
import co.id.sofcograha.base.utils.searchData.SearchResult;
import co.id.sofcograha.domain.invoicing.admin.upload.entities.EAdminUploadAkumulasi;
import co.id.sofcograha.domain.invoicing.admin.upload.repositories.EAdminUploadAkumulasiRepository;

@Service("adminUploadAkumulasiService")
public class AdminUploadAkumulasiService extends BaseService {
	
	@Autowired private EAdminUploadAkumulasiRepository repo;
	
	//@Autowired private ActionAuthorizationService actionAuthorizationService;
	
	public EAdminUploadAkumulasi findByBk(String tahun, String bulan, String idMi015) {
		return repo.findByBK(tahun, bulan, idMi015);
	}
	
	public EAdminUploadAkumulasi findById(final String id) {
		return repo.getOne(id);
	}

	
	public List<EAdminUploadAkumulasi> findByTahunBulan(String tahun, String bulan) {
		return repo.findByTahunBulan(tahun, bulan);
	}
	
	public SearchResult<EAdminUploadAkumulasi> search(SearchParameter searchParameter) {
		return repo.search(searchParameter);
	}
    
	@Transactional
	public void deletePerTahunBulan(String tahun, String bulan) {
		repo.deletePerTahunBulan(tahun, bulan);
	}
	
	@Transactional
    public EAdminUploadAkumulasi add(EAdminUploadAkumulasi entity) {
		
		entity.setId(null);
		
		defineDefaultValuesOnAdd(entity);
		
		valRequiredValues(entity);
		throwBatchError();
		
		manageMinMaxValues(entity);
		throwBatchError();
		
		manageReferences(entity);
		throwBatchError();
		
		valUniquenessOnAdd(entity);
		throwBatchError();
		
		EAdminUploadAkumulasi addedEntity = repo.add(entity);
		
		throwBatchError();
		return addedEntity;	
		
    }
       
    //private void valOnAdd(final EAdminUploadAkumulasi valuta) {
    //}

	@Transactional
	public EAdminUploadAkumulasi edit(EAdminUploadAkumulasi entity) {
		
		valIdVersionRequired(entity.getId(), entity.getVersion());
		valVersion(entity.getId(), entity.getVersion(), entity.getClass().getSimpleName());
		throwBatchError();
		
		valRequiredValues(entity);
		throwBatchError();
		
		manageMinMaxValues(entity);
		throwBatchError();
		
		manageReferences(entity);
		throwBatchError();
		
		valUniquenessOnEdit(entity);
		throwBatchError();
		
		EAdminUploadAkumulasi toBeSaved = repo.getOne(entity.getId());
		//EAdminUploadAkumulasi oldEntity = (EAdminUploadAkumulasi) toBeSaved.clone();
		
		defineEditableValues(entity, toBeSaved);
		
		throwBatchError();
		return toBeSaved;
		
	}

	//private void valOnEdit(final EAdminUploadAkumulasi valuta) {
    //}

	@Transactional
	public void delete (String id, Long version) {
		
		valIdVersionRequired(id, version);
		valVersion(id, version, EAdminUploadAkumulasi.class.getSimpleName());
		throwBatchError();
		
		EAdminUploadAkumulasi toBeDeleted = repo.getOne(id);
		
		valDelete(toBeDeleted);
		throwBatchError();
		
		repo.delete(toBeDeleted.getId());
		
		throwBatchError();
	}
	
	//private void valOnDelete(EAdminUploadAkumulasi entity) {
    //}
	
	//private void valAuthAdd() {
	//  if(!actionAuthorizationService.valHakAdd()) {
	//    error("NoRightToAdd");
	//  }
	//}
	
	//private void valAuthEdit() {
    //  if(!actionAuthorizationService.valHakEdit()) {
    //    error("NoRightToChange");
    //  }
    //}
	
    //private void valAuthDelete() {
    //  if(!actionAuthorizationService.valHakDelete()) {
    //    error("NoRightToDelete");
    //  }
    //}

    protected void defineDefaultValuesOnAdd(EAdminUploadAkumulasi entity) {
		if (entity.getVersion() == null) entity.setVersion((long) 1);
	}
    
    protected void valRequiredValues(EAdminUploadAkumulasi entity) {
	}
    
    protected void manageMinMaxValues(EAdminUploadAkumulasi entity) {
	}
    
    protected void manageReferences(EAdminUploadAkumulasi entity) {
    }

    protected void valUniquenessOnAdd(EAdminUploadAkumulasi addedEntity) {
		EAdminUploadAkumulasi entityFromDb = repo.findByBK(addedEntity.getTahun(), addedEntity.getBulan(), addedEntity.getGrupAkumulasi().getId());
		if (entityFromDb != null) {
			throw new BusinessException("admin.upload.akumulasi.bk");
		}
	}
    
    private void valVersion(String id, Long version, String entityClassName) {
		valEntityExists(id, entityClassName);
		EAdminUploadAkumulasi dbEntity = repo.getOne(id);
		VersionUtil.check(version, dbEntity.getVersion());
	}
    
	private void valEntityExists(String id, String entityClassName) {
		if (repo.getOne(id) == null) {
			throw new BusinessException("data.not.found", entityClassName, id);
		}
	}
	
	protected void valUniquenessOnEdit(EAdminUploadAkumulasi editedEntity) {
		EAdminUploadAkumulasi entityFromDb = repo.findByBK(editedEntity.getTahun(), editedEntity.getBulan(), editedEntity.getGrupAkumulasi().getId());
		if (entityFromDb != null) {
			if (!editedEntity.getId().equals(entityFromDb.getId())) {
				throw new BusinessException("admin.upload.akumulasi.bk");
			}
		}
	}
	
	protected void defineEditableValues(EAdminUploadAkumulasi newValues, EAdminUploadAkumulasi toBeSaved) {
		
		if (toBeSaved != null) {
			toBeSaved.setTahun(newValues.getTahun());
			toBeSaved.setBulan(newValues.getBulan());
			toBeSaved.setJkbulini(newValues.getJkbulini());
			toBeSaved.setRevjkbullalu(newValues.getRevjkbullalu());
			toBeSaved.setSeljkbullalu(newValues.getSeljkbullalu());
			toBeSaved.setJnkbulini(newValues.getJnkbulini());
			toBeSaved.setRevjnkbullalu(newValues.getRevjnkbullalu());
			toBeSaved.setSeljnkbullalu(newValues.getSeljnkbullalu());
			toBeSaved.setGrupAkumulasi(newValues.getGrupAkumulasi());
		}
		else if (toBeSaved == null) {
			defineDefaultValuesOnAdd(newValues);
		}
		
	}
	
	protected void valDelete(EAdminUploadAkumulasi toBeDeleted) {	}
    
    
	public EAdminUploadAkumulasi get(String id) {
		return repo.getOne(id);
	}
}
