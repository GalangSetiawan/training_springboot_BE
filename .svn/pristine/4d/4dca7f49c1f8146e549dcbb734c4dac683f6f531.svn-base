package co.id.sofcograha.domain.invoicing.masters.customerProdukTarif.entities;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

import co.id.sofcograha.base.authentication.CurrentUser;
import co.id.sofcograha.base.exceptions.DevException;
import co.id.sofcograha.domain.invoicing.masters.customer.entities.ECustomerGajiId;
import co.id.sofcograha.domain.invoicing.masters.mappingCustomerProduk.entities.EMappingCustomerProduk;
import co.id.sofcograha.domain.invoicing.masters.produk.entities.EProduk;

@Entity
@Access(AccessType.FIELD)
@Table(name = "mi011", uniqueConstraints = @UniqueConstraint(columnNames = { "id_mi010", "id_mi001" }))
public class ECustomerProdukTarifHeader implements Cloneable {

	@Id
	@Column(name = "id_mi011")
	private String id;

	@Column(name = "tipe")
	private String tipe;

	@Column(name = "jumsiklus")
	private Integer jumsiklus;

	@Column(name = "satsiklus")
	private String satsiklus;

	@Column(name = "tglstart")
	private String tglstart;
	
	@Column(name = "tglstop")
	private String tglstop;
	
	@Column(name = "jthtemp")
	private Integer jthtemp;
	
	@Version
	@Column(name = "version")
	private Long version;

	@Column(name = "usrcrt")
	private String usrcrt;

	@Column(name = "tglcrt")
	private String tglcrt;

	@Column(name = "jamcrt")
	private String jamcrt;

	@Column(name = "usrupd")
	private String usrupd;

	@Column(name = "tglupd")
	private String tglupd;

	@Column(name = "jamupd")
	private String jamupd;

	@OneToOne
	@JoinColumn(name = "id_mi001")
	private EProduk produk;

	@OneToOne
	@JoinColumn(name = "id_mi010")
	private ECustomerGajiId customer;

	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "header")
	private List<ECustomerProdukTarifDetail> detail;

	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "header")
	private List<EMappingCustomerProduk> detailMapping;

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getTipe() {
		return tipe;
	}

	public void setTipe(String tipe) {
		this.tipe = tipe;
	}

	public Integer getJumsiklus() {
		return jumsiklus;
	}

	public void setJumsiklus(Integer jumsiklus) {
		this.jumsiklus = jumsiklus;
	}

	public String getSatsiklus() {
		return satsiklus;
	}

	public void setSatsiklus(String satsiklus) {
		this.satsiklus = satsiklus;
	}

	public String getTglstart() {
		return tglstart;
	}

	public void setTglstart(String tglstart) {
		this.tglstart = tglstart;
	}

	public String getTglstop() {
		return tglstop;
	}

	public void setTglstop(String tglstop) {
		this.tglstop = tglstop;
	}

	public Integer getJthtemp() {
		return jthtemp;
	}

	public void setJthtemp(Integer jthtemp) {
		this.jthtemp = jthtemp;
	}

	public Long getVersion() {
		return version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	public String getUsrcrt() {
		return usrcrt;
	}

	public void setUsrcrt(String usrcrt) {
		this.usrcrt = usrcrt;
	}

	public String getTglcrt() {
		return tglcrt;
	}

	public void setTglcrt(String tglcrt) {
		this.tglcrt = tglcrt;
	}

	public String getJamcrt() {
		return jamcrt;
	}

	public void setJamcrt(String jamcrt) {
		this.jamcrt = jamcrt;
	}

	public String getUsrupd() {
		return usrupd;
	}

	public void setUsrupd(String usrupd) {
		this.usrupd = usrupd;
	}

	public String getTglupd() {
		return tglupd;
	}

	public void setTglupd(String tglupd) {
		this.tglupd = tglupd;
	}

	public String getJamupd() {
		return jamupd;
	}

	public void setJamupd(String jamupd) {
		this.jamupd = jamupd;
	}

	public EProduk getProduk() {
		return produk;
	}

	public void setProduk(EProduk produk) {
		this.produk = produk;
	}

	public ECustomerGajiId getCustomer() {
		return customer;
	}

	public void setCustomer(ECustomerGajiId customer) {
		this.customer = customer;
	}

	public List<ECustomerProdukTarifDetail> getDetail() {
		return detail;
	}

	public void setDetail(List<ECustomerProdukTarifDetail> detail) {
		this.detail = detail;
	}

	public List<EMappingCustomerProduk> getDetailMapping() {
		return detailMapping;
	}

	public void setDetailMapping(List<EMappingCustomerProduk> detailMapping) {
		this.detailMapping = detailMapping;
	}

	public Object clone() {
		try {
			return super.clone();
		} catch (CloneNotSupportedException e) {
			throw new DevException("Clone not supported", e);
		}
	}

	@PrePersist
	private void prePersist() {

		Date currentDate = new Date();

		this.id = UUID.randomUUID().toString();

		this.usrcrt = CurrentUser.getUsername();
		this.tglcrt = new SimpleDateFormat("yyyyMMdd").format(currentDate);
		this.jamcrt = new SimpleDateFormat("HHmmss").format(currentDate);

	}

	@PreUpdate
	private void preUpdate() {
		Date currentDate = new Date();

		this.usrupd = CurrentUser.getUsername();
		this.tglupd = new SimpleDateFormat("yyyyMMdd").format(currentDate);
		this.jamupd = new SimpleDateFormat("HHmmss").format(currentDate);
	}
}