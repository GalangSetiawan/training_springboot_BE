package co.id.sofcograha.domain.invoicing.transaksi.tagihanTerjadwal.repositories;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;

import org.springframework.data.jpa.repository.support.SimpleJpaRepository;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import co.id.sofcograha.base.utils.QueryUtil;
import co.id.sofcograha.base.utils.searchData.HqlSimpleSearchBuilder;
import co.id.sofcograha.base.utils.searchData.SearchParameter;
import co.id.sofcograha.base.utils.searchData.SearchResult;
import co.id.sofcograha.domain.invoicing.admin.renewal.entities.EAdminRenewal;
import co.id.sofcograha.domain.invoicing.transaksi.tagihanTerjadwal.entities.ETagihanTerjadwalHeader;

@Repository
public class ETagihanTerjadwalHeaderRepository extends SimpleJpaRepository<ETagihanTerjadwalHeader, String> {

	protected final EntityManager em;

	public ETagihanTerjadwalHeaderRepository(EntityManager em) {
		super(ETagihanTerjadwalHeader.class, em);
		this.em = em;
	}
	
	public ETagihanTerjadwalHeader findByBK(String nomor) {
		
		String query = "SELECT e FROM ETagihanTerjadwalHeader e " + 
                       "WHERE e.nomor = :nomor";
		
		try {
			return em.createQuery(query, ETagihanTerjadwalHeader.class)
					 .setParameter("nomor", nomor)
					 .getSingleResult();
			
		} catch (NoResultException e) {
			return null;
		}
	}
	
	public ETagihanTerjadwalHeader getOne(String id) {

		String query = "SELECT e FROM ETagihanTerjadwalHeader e " + 
                       "WHERE e.id = :id";
	
		try {
			return em.createQuery(query, ETagihanTerjadwalHeader.class)
					.setParameter("id", id)
					.getSingleResult();
		
		} catch (NoResultException e) {
			return null;
		}
		
	}
	
	public List<ETagihanTerjadwalHeader> getTahunBulanFlag(String idMi010, String idMi001, String tahuntgh, String bulantgh, String flproi) {
		
		String query = "SELECT e FROM ETagihanTerjadwalHeader e " + 
					   "WHERE e.customer.id = :idMi010 And " +
			                 "e.produk.id = :idMi001 And " +
				             "e.tahuntgh = :tahuntgh And " +
				             "e.bulantgh = :bulantgh And " +
				             "e.flproi = :flproi " +
				       "ORDER BY e.nomor ";

		try {
			return em.createQuery(query, ETagihanTerjadwalHeader.class)
					.setParameter("idMi010", idMi010)
					.setParameter("idMi001", idMi001)
					.setParameter("tahuntgh", tahuntgh)
					.setParameter("bulantgh", bulantgh)
					.setParameter("flproi", flproi)
					.getResultList();
		} catch (NoResultException e) {
			return null;
		}
	}

	@Transactional
	public void emptyReferensiInvoice(String idTi001) {
		
		StringBuilder queryStringBuilder = new StringBuilder();
		
		queryStringBuilder.append("update ti050 "); 
		queryStringBuilder.append("set id_ti001 = null, flproi = 'T' "); 
		queryStringBuilder.append("where id_ti001 = :idTi001 "); 
		
		em.createNativeQuery(queryStringBuilder.toString())
		  .setParameter("idTi001", idTi001)
		  .executeUpdate();
		
	}
	
	public SearchResult<ETagihanTerjadwalHeader> search(SearchParameter searchParameter) {
		HqlSimpleSearchBuilder<ETagihanTerjadwalHeader> search = new HqlSimpleSearchBuilder<>(ETagihanTerjadwalHeader.class, em);
		
		String nomor = (String) searchParameter.getValueFromMappedParam("nomor");
		String keterangan = (String) searchParameter.getValueFromMappedParam("keterangan");
		String customer = (String) searchParameter.getValueFromMappedParam("customer");
		String produk = (String) searchParameter.getValueFromMappedParam("produk");
		String tahuntgh = (String) searchParameter.getValueFromMappedParam("tahuntgh");
		String bulantgh = (String) searchParameter.getValueFromMappedParam("bulantgh");
		String flproi = (String) searchParameter.getValueFromMappedParam("flproi");

		if (!QueryUtil.isAll(nomor)) {
            search.addWhere("AND LOWER(nomor) LIKE LOWER(:nomor) ");
            search.addParameter("nomor", QueryUtil.formatStringForLikeFilter(nomor));
        }

		if (!QueryUtil.isAll(keterangan)) {
            search.addWhere("AND LOWER(keterangan) LIKE LOWER(:keterangan) ");
            search.addParameter("keterangan", QueryUtil.formatStringForLikeFilter(keterangan));
        }

		if (!QueryUtil.isAll(flproi)) {
            search.addWhere("AND LOWER(flproi) LIKE LOWER(:flproi) ");
            search.addParameter("flproi", QueryUtil.formatStringForLikeFilter(flproi));
        }

		if (!QueryUtil.isAll(customer)) {
            search.addWhere("AND LOWER(customer.nama) LIKE LOWER(:customer) ");
            search.addParameter("customer", QueryUtil.formatStringForLikeFilter(customer));
        }

		if (!QueryUtil.isAll(produk)) {
            search.addWhere("AND LOWER(produk.nama) LIKE LOWER(:produk) ");
            search.addParameter("produk", QueryUtil.formatStringForLikeFilter(produk));
        }

		if (!QueryUtil.isAll(tahuntgh)) {
            search.addWhere("AND LOWER(tahuntgh) LIKE LOWER(:tahuntgh) ");
            search.addParameter("tahuntgh", QueryUtil.formatStringForLikeFilter(tahuntgh));
        }

		if (!QueryUtil.isAll(bulantgh)) {
            search.addWhere("AND LOWER(bulantgh) LIKE LOWER(:bulantgh) ");
            search.addParameter("bulantgh", QueryUtil.formatStringForLikeFilter(bulantgh));
        }

		search.setSort(searchParameter.getSort());
		search.setPaging(searchParameter.getPagination());

		return search.getSearchResult();
	}
	
	public ETagihanTerjadwalHeader add(ETagihanTerjadwalHeader entity) {
		//return save(entity);
		return saveAndFlush(entity);
	}

	public ETagihanTerjadwalHeader edit(ETagihanTerjadwalHeader entity) {
		return save(entity);
	}
}