package co.id.sofcograha.domain.invoicing.transaksi.hold.repositories;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.Query;

import org.springframework.data.jpa.repository.support.SimpleJpaRepository;
import org.springframework.stereotype.Repository;

import co.id.sofcograha.base.utils.QueryUtil;
import co.id.sofcograha.base.utils.searchData.HqlSimpleSearchBuilder;
import co.id.sofcograha.base.utils.searchData.SearchParameter;
import co.id.sofcograha.base.utils.searchData.SearchResult;
import co.id.sofcograha.domain.invoicing.admin.renewal.entities.EAdminRenewal;
import co.id.sofcograha.domain.invoicing.transaksi.hold.entities.ETrxHold;

@Repository
public class ETrxHoldRepository extends SimpleJpaRepository<ETrxHold, String> {

	protected final EntityManager em;

	public ETrxHoldRepository(EntityManager em) {
		super(ETrxHold.class, em);
		this.em = em;
	}
	
	public ETrxHold findByBK(String nomor) {
		
		String query = "SELECT e FROM ETrxHold e " + 
                       "WHERE e.nomor = :nomor";
		
		try {
			return em.createQuery(query, ETrxHold.class)
					 .setParameter("nomor", nomor)
					 .getSingleResult();
			
		} catch (NoResultException e) {
			return null;
		}
	}
	
	public ETrxHold getOne(String id) {

		String query = "SELECT e FROM ETrxHold e " + 
                       "WHERE e.id = :id";
	
		try {
			return em.createQuery(query, ETrxHold.class)
					.setParameter("id", id)
					.getSingleResult();
		
		} catch (NoResultException e) {
			return null;
		}
		
	}

    @SuppressWarnings("unchecked")
	public ETrxHold getTrxHoldTerakhir(String idMi010, String idMi001) {
    	
        Query query;
      
        StringBuilder queryStringBuilder = new StringBuilder();
        queryStringBuilder.append("select a.* " + 
        		                  "from ti030 a " + 
        		                  "where a.id_mi010 = :idMi010 and " + 
        		                  "      a.id_mi001 = :idMi001 and " + 
        		                  "      a.tgtrn = (select max(x.tgtrn) " + 
        		                  "                 from ti030 x " + 
        		                  "                 where x.id_mi010 = :idMi010 and " + 
        		                  "                       x.id_mi001 = :idMi001)"); 
        
        query = em.createNativeQuery(queryStringBuilder.toString(), ETrxHold.class);
        
        query.setParameter("idMi010", idMi010);
        query.setParameter("idMi001", idMi001);
        
        List<Object> list = query.getResultList();

        if (!list.isEmpty()) {
        	return (ETrxHold) list.get(0);
        } else {
        	return null;
        }
    }
	
	public SearchResult<ETrxHold> search(SearchParameter searchParameter) {
		HqlSimpleSearchBuilder<ETrxHold> search = new HqlSimpleSearchBuilder<>(ETrxHold.class, em);
		
		String nomor = (String) searchParameter.getValueFromMappedParam("nomor");
		String tghold = (String) searchParameter.getValueFromMappedParam("tghold");		
		String customer = (String) searchParameter.getValueFromMappedParam("customer");
		String produk = (String) searchParameter.getValueFromMappedParam("produk");

		if (!QueryUtil.isAll(nomor)) {
            search.addWhere("AND LOWER(nomor) LIKE LOWER(:nomor) ");
            search.addParameter("nomor", QueryUtil.formatStringForLikeFilter(nomor));
        }

		if (!QueryUtil.isAll(tghold)) {
            search.addWhere("AND LOWER(tghold) LIKE LOWER(:tghold) ");
            search.addParameter("tghold", QueryUtil.formatStringForLikeFilter(tghold));
        }

		if (!QueryUtil.isAll(customer)) {
            search.addWhere("AND LOWER(customer.nama) LIKE LOWER(:customer) ");
            search.addParameter("customer", QueryUtil.formatStringForLikeFilter(customer));
        }

		if (!QueryUtil.isAll(produk)) {
            search.addWhere("AND LOWER(produk.nama) LIKE LOWER(:produk) ");
            search.addParameter("produk", QueryUtil.formatStringForLikeFilter(produk));
        }

		search.setSort(searchParameter.getSort());
		search.setPaging(searchParameter.getPagination());

		return search.getSearchResult();
	}
	
	public ETrxHold add(ETrxHold entity) {
		return save(entity);
	}

	public ETrxHold edit(ETrxHold entity) {
		return save(entity);
	}
}