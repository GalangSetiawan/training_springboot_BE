package co.id.sofcograha.domain.invoicing.admin.renewal.repositories;

import java.math.BigDecimal;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.Query;

import org.springframework.data.jpa.repository.support.SimpleJpaRepository;
import org.springframework.stereotype.Repository;

import co.id.sofcograha.base.utils.searchData.HqlSimpleSearchBuilder;
import co.id.sofcograha.base.utils.searchData.SearchParameter;
import co.id.sofcograha.base.utils.searchData.SearchResult;
import co.id.sofcograha.domain.invoicing.admin.renewal.entities.EAdminRenewalDetTgh;
import co.id.sofcograha.domain.invoicing.admin.renewal.entities.ESumNilai;
import co.id.sofcograha.domain.invoicing.admin.renewal.pojos.SumNilai;

@Repository
public class EAdminRenewalDetTghRepository extends SimpleJpaRepository<EAdminRenewalDetTgh, String> {

	protected final EntityManager em;

	public EAdminRenewalDetTghRepository(EntityManager em) {
		super(EAdminRenewalDetTgh.class, em);
		this.em = em;
	}
	
	public EAdminRenewalDetTgh findByBK(String idAi003, Integer nourut) {
		
		String query = "SELECT e FROM EAdminRenewalDetTgh e " + 
                       "WHERE e.header.id = :idAi003 And " +
  	                         "e.nourut = :nourut";
		
		try {
			return em.createQuery(query, EAdminRenewalDetTgh.class)
					 .setParameter("idAi003", idAi003)
					 .setParameter("nourut", nourut)
					 .getSingleResult();
			
		} catch (NoResultException e) {
			return null;
		}
	}
	
	public List<EAdminRenewalDetTgh> findByHeaderId(String idAi003) {
		
		String query = "SELECT e FROM EAdminRenewalDetTgh e " + 
                       "WHERE e.header.id = :idAi003 " +
  	                   "ORDER BY e.nourut"; 
		
		try {
			return em.createQuery(query, EAdminRenewalDetTgh.class)
					 .setParameter("idAi003", idAi003)
					 .getResultList();
			
		} catch (NoResultException e) {
			return null;
		}
	}
	
	public List<EAdminRenewalDetTgh> findByCustomerProdukTahunBulan(String idMi010, String idMi001, String tahun, String bulan) {
		
		String query = "SELECT e FROM EAdminRenewalDetTgh e " + 
                       "WHERE e.header.customer.id = :idMi010 And " +
				             "e.header.produk.id = :idMi001 And " +
				             "e.header.tahun = :tahun And " +
				             "e.header.bulan = :bulan " +
  	                   "ORDER BY e.nourut"; 
		
		try {
			return em.createQuery(query, EAdminRenewalDetTgh.class)
					 .setParameter("idMi010", idMi010)
					 .setParameter("idMi001", idMi001)
					 .setParameter("tahun", tahun)
					 .setParameter("bulan", bulan)
					 .getResultList();
			
		} catch (NoResultException e) {
			return null;
		}
	}
	
    @SuppressWarnings("unchecked")
    public SumNilai getTotalNilaiByCustomerProdukTahunBulan(String idMi010, String idMi001, String tahun, String bulan) {
    	
        Query query;

        StringBuilder queryStringBuilder = new StringBuilder();
        queryStringBuilder.append("select 0 as jumkar, " + 
        		                  "       coalesce(sum(a.bruto),0) as bruto, coalesce(sum(a.nilpctdisc),0) as nilpctdisc, coalesce(sum(a.nildisc),0) as nildisc, " + 
        		                  "       coalesce(sum(a.netto),0) as netto " + 
        		                  "from ai320 a " + 
        		                  "left join ai003 b on b.id_ai003 = a.id_ai003 " + 
        		                  "where b.id_mi010 = :idMi010 and b.id_mi001 = :idMi001 and b.tahun = :tahun and b.bulan = :bulan");
        
        query = em.createNativeQuery(queryStringBuilder.toString());
        
        query.setParameter("idMi010", idMi010);
        query.setParameter("idMi001", idMi001);
        query.setParameter("tahun", tahun);
        query.setParameter("bulan", bulan);
        
        List<Object[]> list = query.getResultList();
        if (!list.isEmpty()) {
        	
        	SumNilai result = new SumNilai();
        	result.jumkar = (Integer) list.get(0)[0];
        	result.bruto = ((BigDecimal) list.get(0)[1]).doubleValue();
        	result.nilpctdisc = ((BigDecimal) list.get(0)[2]).doubleValue();
        	result.nildisc = ((BigDecimal) list.get(0)[3]).doubleValue();
        	result.netto = ((BigDecimal) list.get(0)[4]).doubleValue();

        	return result;
        } else {
        	return null;
        }
        
        /*
        StringBuilder queryStringBuilder = new StringBuilder();
        queryStringBuilder.append("select public.sys_guid() as id, 0 as jumkar, " + 
        		                  "       sum(a.bruto) as bruto, sum(a.nilpctdisc) as nilpctdisc, sum(a.nildisc) as nildisc, " + 
        		                  "       sum(a.netto) as netto " + 
        		                  "from ai320 a " + 
        		                  "left join ai003 b on b.id_ai003 = a.id_ai003 " + 
        		                  "where b.id_mi010 = :idMi010 and b.id_mi001 = :idMi001 and b.tahun = :tahun and b.bulan = :bulan");
        
        query = em.createNativeQuery(queryStringBuilder.toString(), ESumNilai.class);
        
        query.setParameter("idMi010", idMi010);
        query.setParameter("idMi001", idMi001);
        query.setParameter("tahun", tahun);
        query.setParameter("bulan", bulan);
        
        List<Object> list = query.getResultList();
        if (!list.isEmpty()) {
        	ESumNilai result = (ESumNilai) list.get(0);
        	if (result.getJumkar() == null) result.setJumkar(0);
        	if (result.getBruto() == null) result.setBruto(0.0);
        	if (result.getNilpctdisc() == null) result.setNilpctdisc(0.0);
        	if (result.getNildisc() == null) result.setNildisc(0.0);
        	if (result.getNetto() == null) result.setNetto(0.0);
        	return result;
        } else {
        	return null;
        }
        */
    }
	
	public EAdminRenewalDetTgh getOne(String id) {
		return super.findOne(id);
	}
	
	public SearchResult<EAdminRenewalDetTgh> search(SearchParameter searchParameter) {
		HqlSimpleSearchBuilder<EAdminRenewalDetTgh> search = new HqlSimpleSearchBuilder<>(EAdminRenewalDetTgh.class, em);

		search.setSort(searchParameter.getSort());
		search.setPaging(searchParameter.getPagination());

		return search.getSearchResult();
	}
	
	public EAdminRenewalDetTgh add(EAdminRenewalDetTgh entity) {
		//return save(entity);
		return saveAndFlush(entity);
	}

	public EAdminRenewalDetTgh edit(EAdminRenewalDetTgh entity) {
		return save(entity);
	}
}