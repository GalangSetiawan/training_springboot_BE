package co.id.sofcograha.domain.invoicing.transaksi.invoice.data.pojos;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.util.StringUtils;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import co.id.sofcograha.base.constants.BaseConstants;
import co.id.sofcograha.base.master.jenisTransaksi.entities.EJenisTransaksi;
import co.id.sofcograha.base.master.jenisTransaksi.pojos.JenisTransaksi;
import co.id.sofcograha.base.utils.TimeUtil;
import co.id.sofcograha.base.utils.searchData.SearchFieldMapping;
import co.id.sofcograha.domain.invoicing.masters.customer.entities.ECustomerGajiId;
import co.id.sofcograha.domain.invoicing.masters.customer.pojos.CustomerGajiId;
import co.id.sofcograha.domain.invoicing.masters.produk.entities.EProduk;
import co.id.sofcograha.domain.invoicing.masters.produk.pojos.Produk;
import co.id.sofcograha.domain.invoicing.transaksi.invoice.data.entities.EInvoiceHeader;

@JsonInclude(Include.ALWAYS)
public class InvoiceHeader {
	
	public String id;
    public String nomor;
    public Date tgtrn;
    public String nama;
    public String alamat;
    public String email;
    public String status;
	public Double bruto;
	public Double totdisc;
	public Double dpp;
	public Double ppn;
	public Double netto;
	public Double depused;
    public Boolean fltodep;
	public Double nildep;
    public Date tgjtemp;
    
	public Long version;  
    public String usrcrt;
    public Date tglcrt;
    public String jamcrt;
    public String usrupd;
    public Date tglupd;
    public String jamupd;
	
	public JenisTransaksi jenisTransaksi;
	public CustomerGajiId customer;
	public Produk produk;
	public List<InvoiceDetailLainLain> detailLainLain;
	public List<InvoiceDetailImplementasi> detailImplementasi;
	public List<InvoiceDetailTraining> detailTraining;
	public List<InvoiceDetailInitial> detailInitial;
	public List<InvoiceDetailHslPro> detailHasilProses;
	public List<InvoiceDetailAdj> detailAdjustment;

	public EInvoiceHeader toEntity() {
		
		EInvoiceHeader entity = new EInvoiceHeader();

		entity.setId(id);
		entity.setNomor(nomor);

		if (tgtrn != null) {
			entity.setTgtrn(TimeUtil.convertDateToYyyyMmDd(tgtrn)); 
		}
		
		entity.setNama(nama);
		entity.setAlamat(alamat);
		entity.setEmail(email);
		entity.setStatus(status);
		entity.setBruto(bruto);
		entity.setTotdisc(totdisc);
		entity.setDpp(dpp);
		entity.setPpn(ppn);
		entity.setNetto(netto);
		entity.setDepused(depused);
		entity.setFltodep(fltodep ? "Y" : "T");
		entity.setNildep(nildep);

		if (tgjtemp != null) {
			entity.setTgjtemp(TimeUtil.convertDateToYyyyMmDd(tgjtemp)); 
		}
		
		entity.setVersion(version);
        entity.setUsrcrt(usrcrt);
        
		if (tglcrt != null) {
			entity.setTglcrt(TimeUtil.convertDateToYyyyMmDd(tglcrt)); 
		}
        
        entity.setJamcrt(jamcrt);
        entity.setUsrupd(usrupd);
        
		if (tglupd != null) {
			entity.setTglupd(TimeUtil.convertDateToYyyyMmDd(tglupd)); 
		}
        
        entity.setJamupd(jamupd);
		
		if (customer != null && !StringUtils.isEmpty(customer.id)) {
			ECustomerGajiId entityRef = new ECustomerGajiId();
		
			entityRef.setId(customer.id);
			entityRef.setVersion(customer.version);
		
			entity.setCustomer(entityRef);
		
		} else {
			entity.setCustomer(null);
		}
        
		if (produk != null && !StringUtils.isEmpty(produk.id)) {
			EProduk entityRef = new EProduk();
		
			entityRef.setId(produk.id);
			entityRef.setVersion(produk.version);
		
			entity.setProduk(entityRef);
		
		} else {
			entity.setProduk(null);
		}
		
		if (jenisTransaksi != null && !StringUtils.isEmpty(jenisTransaksi.id)) {
			EJenisTransaksi eJenisTransaksi = new EJenisTransaksi();
			
			eJenisTransaksi.setId(jenisTransaksi.id);
			
			entity.setJenisTransaksi(eJenisTransaksi);
			
		} else {
			entity.setJenisTransaksi(null);
		}        
		return entity;
	}
	
	public static List<EInvoiceHeader> toEntities(List<InvoiceHeader> pojos) {
		if (pojos == null) return null;

		List<EInvoiceHeader> entities = new ArrayList<EInvoiceHeader>();
		for (InvoiceHeader pojo : pojos) {
			entities.add(pojo.toEntity());
		}

		return entities;
	}
	
	public static InvoiceHeader fromEntity (EInvoiceHeader entity) {
		return fromEntity(entity, BaseConstants.DEFAULT_QUERY_DEPTH, BaseConstants.DEFAULT_DETAIL_QUERY_DEPTH);
	}
	
	public static InvoiceHeader fromEntity (EInvoiceHeader entity, int depthLevel) {
		return fromEntity(entity, depthLevel, BaseConstants.DEFAULT_DETAIL_QUERY_DEPTH);
	}
	
	public static InvoiceHeader fromEntity(EInvoiceHeader entity, int depthLevel, int detailDepthLevel) {
		
		if (entity == null) return null;
		if (depthLevel < 0) depthLevel = BaseConstants.DEFAULT_QUERY_DEPTH;	
	    if (detailDepthLevel < 0) detailDepthLevel = BaseConstants.DEFAULT_DETAIL_QUERY_DEPTH;
		
		InvoiceHeader pojo = new InvoiceHeader();
		
		pojo.id = entity.getId();
		if (depthLevel > 0) {
			depthLevel--;

			pojo.nomor = entity.getNomor();

			if (entity.getTgtrn() != null && !entity.getTgtrn().trim().equals("")) {
				pojo.tgtrn = TimeUtil.getDate(entity.getTgtrn());				
			} else {
				pojo.tgtrn = null;
			}
			
			pojo.nama = entity.getNama();
			pojo.alamat = entity.getAlamat();
			pojo.email = entity.getEmail();
			pojo.status = entity.getStatus();
			pojo.bruto = entity.getBruto();
			pojo.totdisc = entity.getTotdisc();
			pojo.dpp = entity.getDpp();
			pojo.ppn = entity.getPpn();
			pojo.netto = entity.getNetto();
			pojo.depused = entity.getDepused();
			pojo.fltodep = entity.getFltodep() == null ? false : entity.getFltodep().trim().equals("Y") ? true : false;
			pojo.nildep = entity.getNildep();

			if (entity.getTgjtemp() != null && !entity.getTgjtemp().trim().equals("")) {
				pojo.tgjtemp = TimeUtil.getDate(entity.getTgjtemp());				
			} else {
				pojo.tgjtemp = null;
			}
			
			pojo.version = entity.getVersion();
	        pojo.usrcrt = entity.getUsrcrt();
	        
			if (entity.getTglcrt() != null && !entity.getTglcrt().trim().equals("")) {
				pojo.tglcrt = TimeUtil.getDate(entity.getTglcrt());				
			} else {
				pojo.tglcrt = null;
			}
	        
	        pojo.jamcrt = entity.getJamcrt();
	        pojo.usrupd = entity.getUsrupd();
	        
			if (entity.getTglupd() != null && !entity.getTglupd().trim().equals("")) {
				pojo.tglupd = TimeUtil.getDate(entity.getTglupd());				
			} else {
				pojo.tglupd = null;
			}
	        
	        pojo.jamupd = entity.getJamupd();
	      
			pojo.jenisTransaksi = JenisTransaksi.fromEntity(entity.getJenisTransaksi());
			pojo.customer = CustomerGajiId.fromEntity(entity.getCustomer());
			pojo.produk = Produk.fromEntity(entity.getProduk());
			
			if (detailDepthLevel > 0) {
				detailDepthLevel--;
				
				pojo.detailLainLain = InvoiceDetailLainLain.fromEntities(entity.getDetailLainLain(), depthLevel + 1, detailDepthLevel);
				pojo.detailImplementasi = InvoiceDetailImplementasi.fromEntities(entity.getDetailImplementasi(), depthLevel + 1, detailDepthLevel);
				pojo.detailTraining = InvoiceDetailTraining.fromEntities(entity.getDetailTraining(), depthLevel + 1, detailDepthLevel);
				pojo.detailInitial = InvoiceDetailInitial.fromEntities(entity.getDetailInitial(), depthLevel + 1, detailDepthLevel);
				pojo.detailHasilProses = InvoiceDetailHslPro.fromEntities(entity.getDetailHasilProses(), depthLevel + 1, detailDepthLevel);
				pojo.detailAdjustment = InvoiceDetailAdj.fromEntities(entity.getDetailAdjustment(), depthLevel + 1, detailDepthLevel);
			}
		}

		return pojo;
	}
	
	public static List<InvoiceHeader> fromEntities(List<EInvoiceHeader> entities){
		return fromEntities(entities, BaseConstants.DEFAULT_QUERY_DEPTH, BaseConstants.DEFAULT_DETAIL_QUERY_DEPTH);
	}
	
	public static List<InvoiceHeader> fromEntities(List<EInvoiceHeader> entities, int depthLevel, int detailDepthLevel){
		
		if (entities == null) return new ArrayList<>();
		if (depthLevel < 0) depthLevel = BaseConstants.DEFAULT_QUERY_DEPTH;
		if (detailDepthLevel < 0) detailDepthLevel = BaseConstants.DEFAULT_DETAIL_QUERY_DEPTH;
		
		List<InvoiceHeader> pojos = new ArrayList<>();
		
		for (EInvoiceHeader entity : entities) {
			pojos.add(InvoiceHeader.fromEntity(entity, depthLevel, detailDepthLevel));
		}
		return pojos;
	}

	public static List<SearchFieldMapping> getFieldMappings() {
		List<SearchFieldMapping> mappings = new ArrayList<>();
		
		mappings.add(new SearchFieldMapping("nomor", "nomor"));
		mappings.add(new SearchFieldMapping("nama", "nama"));
		mappings.add(new SearchFieldMapping("alamat", "alamat"));
		mappings.add(new SearchFieldMapping("email", "email"));
		mappings.add(new SearchFieldMapping("customer", "customer.nama"));
		mappings.add(new SearchFieldMapping("produk", "produk.nama"));
		mappings.add(new SearchFieldMapping("status", "status"));
		mappings.add(new SearchFieldMapping("fltodep", "fltodep"));
		mappings.add(new SearchFieldMapping("jentrn", "jentrn"));
		mappings.add(new SearchFieldMapping("tgtrn", "tgtrn", String.class).sortOnly());
		mappings.add(new SearchFieldMapping("dpp", "dpp", Double.class).sortOnly());
		mappings.add(new SearchFieldMapping("ppn", "ppn", Double.class).sortOnly());
//		mappings.add(new SearchFieldMapping("widgetId", "widget.id").searchOnly());
//		mappings.add(new SearchFieldMapping("userId", "user.id"));
//		mappings.add(new SearchFieldMapping("orderNumber", "orderNumber", Integer.class).sortOnly());
		
		return mappings;
	}
}	
