package co.id.sofcograha.domain.invoicing.proses.upload.services;

import java.io.IOException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.postgresql.util.Base64;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.stereotype.Service;

import com.lowagie.text.BadElementException;
import com.lowagie.text.Document;
import com.lowagie.text.Element;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.Image;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfCell;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;

import co.id.sofcograha.base.authentication.CurrentUser;
import co.id.sofcograha.base.constants.BaseConstants;
import co.id.sofcograha.base.extendables.BaseService;
import co.id.sofcograha.base.master.company.pojos.CompanyLogoPojo;
import co.id.sofcograha.base.master.company.services.CompanyLogoService;
import co.id.sofcograha.base.utils.Base64StringEncodedPojo;
import co.id.sofcograha.base.utils.PDFUtilService;
import co.id.sofcograha.base.utils.TimeUtil;
import co.id.sofcograha.base.utils.searchData.SearchParameter;
import co.id.sofcograha.base.utils.searchData.SearchResult;
import co.id.sofcograha.domain.invoicing.commonMasters.setting.pojos.Setting;
import co.id.sofcograha.domain.invoicing.commonMasters.setting.services.SettingService;
import co.id.sofcograha.domain.invoicing.masters.customerProdukTarif.pojos.CustomerProdukTarifDetail;
import co.id.sofcograha.domain.invoicing.masters.customerProdukTarif.pojos.CustomerProdukTarifHeader;
import co.id.sofcograha.domain.invoicing.masters.mappingCustomerProduk.pojos.MappingCustomerProduk;
import co.id.sofcograha.domain.invoicing.proses.upload.entities.EUploadData;
import co.id.sofcograha.domain.invoicing.proses.upload.entities.EUploadDataNotExistsRpt;
import co.id.sofcograha.domain.invoicing.proses.upload.pojos.UploadData;
import co.id.sofcograha.domain.invoicing.proses.upload.pojos.UploadDataNotExistsRpt;

@Service
public class UploadDataTidakLengkapPdfService extends BaseService {
	
	private float TITLE1_SIZE = 14;
	private float TITLE2_SIZE = 9;
	private float ALAMAT_SIZE = 12;
	private float CONTENT_SIZE = 8;
	private float NOTE_SIZE = 8;
	private Font TITLE1_FONT = FontFactory.getFont(FontFactory.HELVETICA_BOLD, TITLE1_SIZE);
	private Font TITLE_NORMAL = FontFactory.getFont(FontFactory.HELVETICA_BOLD, TITLE2_SIZE);
	private Font TITLE_ALAMAT = FontFactory.getFont(FontFactory.HELVETICA, ALAMAT_SIZE);
	private Font TITLE_ALAMAT_BOLD = FontFactory.getFont(FontFactory.HELVETICA_BOLD, ALAMAT_SIZE);
	private Font CONTENT = FontFactory.getFont(FontFactory.HELVETICA, CONTENT_SIZE);
	private Font CONTENT_BOLD = FontFactory.getFont(FontFactory.HELVETICA_BOLD, CONTENT_SIZE);
	private Font NOTE = FontFactory.getFont(FontFactory.HELVETICA, NOTE_SIZE);

	private float PAGE_WIDTH;

	private float headerTotalHeight;
	private float footerTotalHeight;

	@Autowired private SettingService settingService;	
	@Autowired private CompanyLogoService companyLogoService;
	
	// untuk mengambil logo sofco di folder resource
	@Autowired ResourceLoader resourceLoader;
	
	@Autowired private UploadDataService uploadDataService;
	
	private Document document;
	
	private float[] bodyColumWidth = new float[] { 9, 12, 34, 25, 23, 30, 12, 12 };

	private CompanyLogoPojo companyLogo;
	
	private Image logoPerusahaan;
	//private Image logoSofco;
	
	private DecimalFormat decimalFormatDouble;
	private DecimalFormat decimalFormatInteger;
	private String localeCode;

	List<UploadDataNotExistsRpt> data;
	private String subTitle = ""; 
	
	public Base64StringEncodedPojo pdfReport(Map<String, String> searchParameter) {

		// ambil setting untuk localization
		Setting setting = Setting.fromEntity(settingService.getData());
		localeCode = setting.bahasa;

		// ambil data company dan company logo
		companyLogo = CompanyLogoPojo.fromEntity(companyLogoService.findByCompanyId(CurrentUser.getCompanyId()));
		
		// ambil image company dan image sofco
		Resource resource = resourceLoader.getResource("classpath:logo/sofcograha_logo.png");

		logoPerusahaan = null;
		//logoSofco = null;
		try {
			//logoSofco = Image.getInstance(resource.getURL());
			//logoSofco.scaleAbsolute(130f, 50f);
			
			String base64Data = companyLogo.file.substring(companyLogo.file.indexOf(",") + 1);
			logoPerusahaan = Image.getInstance(Base64.decode(base64Data));
			//logoPerusahaan.scaleAbsolute(190f, 70f)	;
			logoPerusahaan.scaleAbsolute(95f, 35f);
		} catch (BadElementException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		// digunakan untuk memformat numeric
		Locale locale  = new Locale(localeCode, localeCode.toUpperCase());

		decimalFormatDouble = (DecimalFormat) NumberFormat.getNumberInstance(locale);
		decimalFormatDouble.setMinimumFractionDigits(2);
		decimalFormatDouble.setMaximumFractionDigits(2);

		decimalFormatInteger = (DecimalFormat) NumberFormat.getNumberInstance(locale);

		SearchParameter searchParam = SearchParameter.generate(searchParameter, UploadData.getFieldMappings());
		
		String tahunbulan = (String) searchParam.getValueFromMappedParam("tahunbulan");
		subTitle = tahunbulan.substring(0, 4) + " - " + tahunbulan.substring(4, 6);
		
		SearchResult<EUploadDataNotExistsRpt> searchResult = uploadDataService.searchDataValid(searchParam);
		
		data = UploadDataNotExistsRpt.fromEntities(searchResult.getResult(), BaseConstants.DEFAULT_QUERY_DEPTH);
		
		PDFUtilService pdfUtilService = new PDFUtilService(false);
		document = pdfUtilService.getDocument();
		//writer = pdfUtilService.getWriter();
		PAGE_WIDTH = document.getPageSize().getWidth() - document.leftMargin() - document.rightMargin();
		
		pdfUtilService.setDefaultPadding(0);
		setPageHeader(pdfUtilService.getHeaderTable(), pdfUtilService.getDefaultPadding());
		pdfUtilService.setCustomPagination(510f, 35f, "Hal.", " / ", CONTENT, 9f);

		setPageFooter(pdfUtilService.getFooterTable(), pdfUtilService.getDefaultPadding());
		
		document.open();

		//setHeaderTable();
		
		setBody();

		//float minimumAreaForHormatKami = 100f + document.bottomMargin() + document.topMargin();
		//if (writer.getVerticalPosition(true) <= minimumAreaForHormatKami) {
		//	document.newPage();
		//}

		document.close();

		return pdfUtilService.generatePdfReport();
	}

	public void setPageHeader(final PdfPTable headerTable, final float padding) {
		PdfPTable tableContainer = new PdfPTable(1);
		tableContainer.setTotalWidth(PAGE_WIDTH);
		tableContainer.setLockedWidth(true);

		setHeader(tableContainer);
		
		setHeaderTable(tableContainer);

		PdfPCell cell = new PdfPCell(tableContainer);
		cell.setBorder(PdfCell.NO_BORDER);
		headerTable.addCell(cell);

		headerTotalHeight = headerTable.getTotalHeight();
		document.setMargins(document.leftMargin(), document.rightMargin(),
				document.topMargin() + headerTotalHeight + padding, document.bottomMargin());
	}

	private void setHeader(final PdfPTable tableContainer) {

//		PdfPTable tableTemp = new PdfPTable(new float[] { 17f, 43f, 20f, 20f });
		PdfPTable tableTemp = new PdfPTable(new float[] { 50f, 50f });
		tableTemp.setTotalWidth(PAGE_WIDTH);
		tableTemp.setLockedWidth(true);

		PdfPCell cell = new PdfPCell();
		
		cell = new PdfPCell(logoPerusahaan);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setRowspan(2);
		cell.setBorder(PdfCell.NO_BORDER);
		tableTemp.addCell(cell);
		
		cell = new PdfPCell(new Phrase("DATA UPLOAD TIDAK BERHASIL MASUK", TITLE_NORMAL));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		//cell.setFixedHeight(45f);
		cell.setBorder(PdfCell.NO_BORDER);
		tableTemp.addCell(cell);

		cell = new PdfPCell(new Phrase(subTitle, TITLE_NORMAL));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		//cell.setFixedHeight(45f);
		cell.setBorder(PdfCell.NO_BORDER);
		tableTemp.addCell(cell);

		//cell = new PdfPCell(new Phrase(" ", TITLE1_FONT));
		//cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		//cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
//		cell.setBorder(PdfCell.NO_BORDER);
		//tableTemp.addCell(cell);

		// baris kosong
		//cell = new PdfPCell(new Phrase("", TITLE_NORMAL));
		//cell.setColspan(2);
//		cell.setBorder(PdfCell.NO_BORDER);
		//tableTemp.addCell(cell);

		cell = new PdfPCell(tableTemp);
		cell.setPadding(0);
		cell.setBorder(PdfCell.NO_BORDER);

		tableContainer.addCell(cell);
		
	}

	public void setPageFooter(final PdfPTable footerTable, final float padding) {
		PdfPTable tableContainer = new PdfPTable(1);
		tableContainer.setTotalWidth(PAGE_WIDTH);
		tableContainer.setLockedWidth(true);

		setFooter(tableContainer);

		PdfPCell cell = new PdfPCell(tableContainer);
		cell.setBorder(PdfCell.NO_BORDER);
		footerTable.addCell(cell);

		footerTotalHeight = footerTable.getTotalHeight();
		document.setMargins(document.leftMargin(), document.rightMargin(),
				document.topMargin(), document.bottomMargin() + footerTotalHeight + padding);
	}
	
	private void bodyLineFeed(PdfPCell cell, PdfPTable tableContainer) {
		cell = new PdfPCell(new Phrase("", CONTENT));
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		cell.setBorder(PdfCell.NO_BORDER);		
		tableContainer.addCell(cell);		
	}
	
	private void setHeaderTable(final PdfPTable tableContainer) {
		
//		PdfPTable tableContainer = new PdfPTable(5);
//		tableContainer.setTotalWidth(PAGE_WIDTH);
//		tableContainer.setLockedWidth(true);

		PdfPTable tableTemp = new PdfPTable(bodyColumWidth);
		tableTemp.setTotalWidth(PAGE_WIDTH);
		tableTemp.setLockedWidth(true);
		PdfPCell cell = new PdfPCell();

		cell = new PdfPCell(new Phrase(" ", CONTENT_BOLD));
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBorder(PdfCell.NO_BORDER);
		cell.setColspan(8);
		tableTemp.addCell(cell);

		cell = new PdfPCell(new Phrase("No", CONTENT_BOLD));
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBorder(PdfCell.TOP | PdfCell.BOTTOM);
		tableTemp.addCell(cell);
		
		cell = new PdfPCell(new Phrase("Kode PT", CONTENT_BOLD));
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBorder(PdfCell.TOP | PdfCell.BOTTOM);
		tableTemp.addCell(cell);
		
		cell = new PdfPCell(new Phrase("Nama PT", CONTENT_BOLD));
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBorder(PdfCell.TOP | PdfCell.BOTTOM);
		tableTemp.addCell(cell);
		
		cell = new PdfPCell(new Phrase("NPWP", CONTENT_BOLD));
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBorder(PdfCell.TOP | PdfCell.BOTTOM);
		tableTemp.addCell(cell);
		
		cell = new PdfPCell(new Phrase("Kode Kel. Payroll", CONTENT_BOLD));
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBorder(PdfCell.TOP | PdfCell.BOTTOM);
		tableTemp.addCell(cell);
		
		cell = new PdfPCell(new Phrase("Nama Kel. Payroll", CONTENT_BOLD));
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBorder(PdfCell.TOP | PdfCell.BOTTOM);
		tableTemp.addCell(cell);
		
		cell = new PdfPCell(new Phrase("Mapping", CONTENT_BOLD));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBorder(PdfCell.TOP | PdfCell.BOTTOM);
		tableTemp.addCell(cell);
		
		cell = new PdfPCell(new Phrase("Saldo Live", CONTENT_BOLD));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBorder(PdfCell.TOP | PdfCell.BOTTOM);
		tableTemp.addCell(cell);
		
		cell = new PdfPCell(tableTemp);
		cell.setPadding(0);
		cell.setBorder(PdfCell.NO_BORDER);

		tableContainer.addCell(cell);
	}
	
	private void setBody() {

		PdfPTable tableContainer = new PdfPTable(bodyColumWidth);
		tableContainer.setTotalWidth(PAGE_WIDTH);
		tableContainer.setLockedWidth(true);
		PdfPCell cell = new PdfPCell();

		bodyLineFeed(cell, tableContainer);
		
		int nourut = 1;
		if (data.size() > 0) {
			for (UploadDataNotExistsRpt pojo : data) {

				String strNourut = decimalFormatInteger.format(nourut) + ". ";
				cell = new PdfPCell(new Phrase(strNourut, CONTENT));
				cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell.setVerticalAlignment(Element.ALIGN_CENTER);
				cell.setBorder(PdfCell.NO_BORDER);
				tableContainer.addCell(cell);
				
				cell = new PdfPCell(new Phrase(pojo.kodept, CONTENT));
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell.setVerticalAlignment(Element.ALIGN_CENTER);
				cell.setBorder(PdfCell.NO_BORDER);
				tableContainer.addCell(cell);
								
				cell = new PdfPCell(new Phrase(pojo.namapt, CONTENT));
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell.setVerticalAlignment(Element.ALIGN_CENTER);
				cell.setBorder(PdfCell.NO_BORDER);
				tableContainer.addCell(cell);
								
				cell = new PdfPCell(new Phrase(pojo.npwp, CONTENT));
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell.setVerticalAlignment(Element.ALIGN_CENTER);
				cell.setBorder(PdfCell.NO_BORDER);
				tableContainer.addCell(cell);
								
				cell = new PdfPCell(new Phrase(pojo.kodekp, CONTENT));
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell.setVerticalAlignment(Element.ALIGN_CENTER);
				cell.setBorder(PdfCell.NO_BORDER);
				tableContainer.addCell(cell);
								
				cell = new PdfPCell(new Phrase(pojo.namakp, CONTENT));
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell.setVerticalAlignment(Element.ALIGN_CENTER);
				cell.setBorder(PdfCell.NO_BORDER);
				tableContainer.addCell(cell);
								
				String flmst = " ";
				if (pojo.flmst) {
					flmst = "X";
				}
				cell = new PdfPCell(new Phrase(flmst, CONTENT));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setVerticalAlignment(Element.ALIGN_CENTER);
				cell.setBorder(PdfCell.NO_BORDER);
				tableContainer.addCell(cell);
								
				String fllive = " ";
				if (pojo.fllive) {
					fllive = "X";
				}
				cell = new PdfPCell(new Phrase(fllive, CONTENT));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setVerticalAlignment(Element.ALIGN_CENTER);
				cell.setBorder(PdfCell.NO_BORDER);
				tableContainer.addCell(cell);
								
				nourut = nourut + 1;
			}
		}
		
		cell = new PdfPCell(new Phrase("", CONTENT));
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		cell.setBorder(PdfCell.BOTTOM);		
		tableContainer.addCell(cell);		
		
		document.add(tableContainer);
	}

	private void setFooter(final PdfPTable tableBodyContainer) {
		
		PdfPTable tableContainer = new PdfPTable(5);
		tableContainer.setTotalWidth(PAGE_WIDTH);
		tableContainer.setLockedWidth(true);

		tableContainer = new PdfPTable(new float[] { 3, 10, 12, 14 });
		tableContainer.setTotalWidth(PAGE_WIDTH);
		tableContainer.setLockedWidth(true);
		PdfPCell cell = new PdfPCell();

		cell = new PdfPCell(new Phrase("Dicetak oleh : " + CurrentUser.getUsername() + ", " + TimeUtil.convertDateToString(TimeUtil.getSystemDateTime(), BaseConstants.DATE_FORMAT_DISPLAY_LONG), CONTENT));
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(4);
		cell.setBorder(PdfCell.NO_BORDER);		
		tableContainer.addCell(cell);
		
//		cell = new PdfPCell(new Phrase(TimeUtil.convertDateToString(TimeUtil.getSystemDateTime(), BaseConstants.DATE_FORMAT_DISPLAY_LONG), CONTENT));
//		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
//		cell.setColspan(4);
//		cell.setBorder(PdfCell.NO_BORDER);		
//		tableContainer.addCell(cell);
		
	    tableBodyContainer.addCell(cell);
	}
	
}
