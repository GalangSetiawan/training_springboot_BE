package co.id.sofcograha.domain.invoicing.report.invoice.repositories;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.persistence.EntityManager;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import co.id.sofcograha.base.utils.ProcedureExecutorUtil;
import co.id.sofcograha.domain.invoicing.report.invoice.entities.ERptRekapCustomerPerTahun;

@Repository
public class RekapInvoiceRepository {

	@Autowired EntityManager em;
	
	@Autowired private ProcedureExecutorUtil procedureExecutorUtil;
	
	protected List<Object> spParameters;

	public RekapInvoiceRepository() {
	}

	/* yang berada dalam remark ini belum digunakan, karena belum didapat cara bagaimana supaya
	 * tabel hasil rekap via sp bisa diakses secara lazy load dari front end
	 * secara, bila isi tabel temp tidak dihapus, lalu kapan hapusnya ?
	public String prosesRekapCustomerPerTahun(String tahun, String idMi001) {

		String IdProses = UUID.randomUUID().toString();
		
		this.spParameters = new ArrayList<>();
		this.spParameters.add(IdProses);
		this.spParameters.add(tahun);
		this.spParameters.add(idMi001);
		
		em.flush();
		procedureExecutorUtil.executeProcedure(this.spParameters, "public.spRekapCustomerPerTahun", em);
		
		return IdProses;
		
	}
	
	public SearchResult<ERptRekapCustomerPerTahun> getRekapCustomerPerTahun(SearchParameter searchParameter, String pProsesId) {
		
		StringBuilder queryStringBuilder = new StringBuilder();
		
		queryStringBuilder.append("Select public.sys_guid() id, nama, tglive, tgstop, status, ");
		queryStringBuilder.append("       siklus, tipe, jnstgh, diskon, bulan_renewal, ");
		queryStringBuilder.append("       last_jumkar, default_nilai, januari, pebruari, maret, ");
		queryStringBuilder.append("       april, mei, juni, juli, agustus, ");
		queryStringBuilder.append("       september, oktober, november, desember ");
		queryStringBuilder.append("From rekap_customer_tahun_tmp ");
        queryStringBuilder.append("Where process_id = :pProsesId ");
		    
        NativeSearchBuilder<ERptRekapCustomerPerTahun> search = new NativeSearchBuilder<>(ERptRekapCustomerPerTahun.class, em);
        search.addParameter("pProsesId", pProsesId);

        search.setQueryString(queryStringBuilder);
        search.setPagination(searchParameter.getPagination());
        search.setSort(searchParameter.getSort());

        return search.getSearchResult();
	}
    */
	
	@Transactional
	public List<ERptRekapCustomerPerTahun> prosesRekapCustomerPerTahun(String tahun, String idMi001) {

		String IdProses = UUID.randomUUID().toString();
		
		this.spParameters = new ArrayList<>();
		this.spParameters.add(IdProses);
		this.spParameters.add(tahun);
		this.spParameters.add(idMi001);
		
		System.out.println(IdProses + " " + tahun + " " + idMi001);
		
		em.flush();
	    List<Object[]> results = procedureExecutorUtil.executeProcedure(this.spParameters, "public.spRekapCustomerPerTahun", em);
	    
	    List<ERptRekapCustomerPerTahun> resultList = new ArrayList<ERptRekapCustomerPerTahun>();
	    for (Object[] obj: results) {
	    	ERptRekapCustomerPerTahun entity = new ERptRekapCustomerPerTahun();
	    	entity.setId(obj[0].toString());
	    	entity.setNama(obj[1].toString());
	    	if (obj[2] != null) {
		    	entity.setTglive(obj[2].toString());	    		
	    	} else {
		    	entity.setTglive(null);	    		
	    	}
	    	if (obj[3] != null) {
		    	entity.setTgstop(obj[3].toString());	    		
	    	} else {
		    	entity.setTgstop(null);	    		
	    	}
	    	entity.setStatus(obj[4].toString().trim());
	    	entity.setSiklus(obj[5].toString());
	    	entity.setTipe(obj[6].toString());
	    	entity.setJnstgh(obj[7].toString());
	    	entity.setDiskon(obj[8].toString());
	    	if (obj[9] != null) {
		    	entity.setBulanRenewal(obj[9].toString());	    		
	    	} else {
		    	entity.setBulanRenewal(null);	    		
	    	}
	    	Double lastJumkar = Double.parseDouble(obj[10].toString());
	    	entity.setLastJumkar(lastJumkar.intValue());
	    	entity.setDefaultNilai(Double.parseDouble(obj[11].toString()));
	    	entity.setJanuari(Double.parseDouble(obj[12].toString()));
	    	entity.setPebruari(Double.parseDouble(obj[13].toString()));
	    	entity.setMaret(Double.parseDouble(obj[14].toString()));
	    	entity.setApril(Double.parseDouble(obj[15].toString()));
	    	entity.setMei(Double.parseDouble(obj[16].toString()));
	    	entity.setJuni(Double.parseDouble(obj[17].toString()));
	    	entity.setJuli(Double.parseDouble(obj[18].toString()));
	    	entity.setAgustus(Double.parseDouble(obj[19].toString()));
	    	entity.setSeptember(Double.parseDouble(obj[20].toString()));
	    	entity.setOktober(Double.parseDouble(obj[21].toString()));
	    	entity.setNovember(Double.parseDouble(obj[22].toString()));
	    	entity.setDesember(Double.parseDouble(obj[23].toString()));
	    	resultList.add(entity);
	    }

	    return resultList;
		
	}
}