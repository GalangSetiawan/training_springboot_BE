package co.id.sofcograha.domain.invoicing.transaksi.live.controllers;

import java.text.ParseException;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonProcessingException;

import co.id.sofcograha.base.authorization.annotation.NoAuth;
import co.id.sofcograha.base.constants.BaseConstants;
import co.id.sofcograha.base.utils.ApiResponse;
import co.id.sofcograha.base.utils.searchData.SearchParameter;
import co.id.sofcograha.base.utils.searchData.SearchResult;
import co.id.sofcograha.domain.invoicing.transaksi.live.entities.ETrxLive;
import co.id.sofcograha.domain.invoicing.transaksi.live.pojos.TrxLive;
import co.id.sofcograha.domain.invoicing.transaksi.live.services.TrxLiveCompleteService;

@RestController
@RequestMapping("/api/trx-live")
public class TrxLiveController {
	
	public static final Logger logger = LoggerFactory.getLogger(TrxLiveController.class);
	
	//@Autowired private TrxLiveService trxLiveService;
	@Autowired private TrxLiveCompleteService trxLiveCompleteService;
	
	@NoAuth
	@GetMapping(value = "/search")
	public ApiResponse search(@RequestParam Map<String, String> searchParameter) {
		
		SearchResult<ETrxLive> searchResult = trxLiveCompleteService.search(SearchParameter.generate(searchParameter, 
				TrxLive.getFieldMappings()));
		
		return ApiResponse.dataWithPaging("items", 
				TrxLive.fromEntities(searchResult.getResult()), 
				searchResult.getPaging());
	}
	
	@NoAuth
	@GetMapping
	public ApiResponse get(@RequestParam String nomor) throws JsonProcessingException, ParseException {
		TrxLive data = trxLiveCompleteService.findByBk(nomor);
	    
	    return ApiResponse.data("item", data);
	}
	
	//@AuthAdd("TRX_PP")
	@NoAuth
	@PostMapping
	public ApiResponse add(@RequestBody TrxLive pojo) {

		
		ETrxLive header = trxLiveCompleteService.add(pojo, BaseConstants.JENIS_TRX_LIVE);
		
		return ApiResponse.data("item", TrxLive.fromEntity(header));
	}
	
	//@AuthEdit("TRX_PP")
	@NoAuth
	@PutMapping
	public ApiResponse edit(@RequestBody TrxLive pojo) {
		
		ETrxLive header = trxLiveCompleteService.edit(pojo);
		
		return ApiResponse.data("item", TrxLive.fromEntity(header));
	}

	//@AuthDelete("TRX_PP")
	@NoAuth
	@DeleteMapping
	public ApiResponse delete(@RequestParam String id, @RequestParam(required = false) Long version) {
		
		trxLiveCompleteService.delete(id, version);
		
		return ApiResponse.ok();
	}
	
//	@NoAuth
//    @GetMapping("/pdf")
//    public ApiResponse createAndSendPdf(@RequestParam String nomor) throws ParseException {
//		
//	    Base64StringEncodedPojo result = invoiceManualExportPdfService.pdfReport(nomor);
//	    
//	    return ApiResponse.data("item", result);		
//    }
}