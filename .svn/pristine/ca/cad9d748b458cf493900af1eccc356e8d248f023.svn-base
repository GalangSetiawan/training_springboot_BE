package co.id.sofcograha.domain.invoicing.admin.renewal.entities;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

import co.id.sofcograha.base.authentication.CurrentUser;
import co.id.sofcograha.base.exceptions.DevException;

@Entity
@Access(AccessType.FIELD)
@Table(name = "ai320", uniqueConstraints = @UniqueConstraint(columnNames = { "id_ai003", "nourut" }))
public class EAdminRenewalDetTgh implements Cloneable {
	
	@Id
	@Column(name = "id_ai320")
	private String id;
	
	@Column(name = "nourut")
	private Integer nourut;

	@Column(name = "pengali")
	private Integer pengali;

	@Column(name = "totjumkar")
	private Integer totjumkar;

	@Column(name = "harga")
	private Double harga;
	
	@Column(name = "keterangan")
	private String keterangan;

	@Column(name = "bruto")
	private Double bruto;

	@Column(name = "pctdisc")
	private Double pctdisc;
	
	@Column(name = "nilpctdisc")
	private Double nilpctdisc;
	
	@Column(name = "nildisc")
	private Double nildisc;
	
	@Column(name = "netto")
	private Double netto;

	@Column(name = "jumsiklus")
	private Integer jumsiklus;
	
	@Column(name = "satsiklus")
	private String satsiklus;
	
	@Column(name = "nouskm")
	private Integer nouskm;

	@Column(name = "jumkar")
	private Integer jumkar;
	
	@Column(name = "jumnkar")
	private Integer jumnkar;
	
	@Version
	@Column(name = "version")
	private Long version;
  
	@Column(name = "usrcrt")
	private String usrcrt;
  
	@Column(name = "tglcrt")
	private String tglcrt;

	@Column(name = "jamcrt")
	private String jamcrt;
  
	@Column(name = "usrupd")
	private String usrupd;
  
	@Column(name = "tglupd")
	private String tglupd;

	@Column(name = "jamupd")
	private String jamupd;
  
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_ai003")
	private EAdminRenewal header;  

	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "detailTagih")
	private List<EAdminRenewalDetTghSubDetSkemaTarif> subDetailSkemaTarif;
	
	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "detailTagih")
	private List<EAdminRenewalDetTghSubDetDiskon> subDetailDiskon;
	
	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public Integer getNourut() {
		return nourut;
	}

	public void setNourut(Integer nourut) {
		this.nourut = nourut;
	}

	public Integer getPengali() {
		return pengali;
	}

	public void setPengali(Integer pengali) {
		this.pengali = pengali;
	}

	public Integer getTotjumkar() {
		return totjumkar;
	}

	public void setTotjumkar(Integer totjumkar) {
		this.totjumkar = totjumkar;
	}

	public Double getHarga() {
		return harga;
	}

	public void setHarga(Double harga) {
		this.harga = harga;
	}

	public String getKeterangan() {
		return keterangan;
	}

	public void setKeterangan(String keterangan) {
		this.keterangan = keterangan;
	}

	public Double getBruto() {
		return bruto;
	}

	public void setBruto(Double bruto) {
		this.bruto = bruto;
	}

	public Double getPctdisc() {
		return pctdisc;
	}

	public void setPctdisc(Double pctdisc) {
		this.pctdisc = pctdisc;
	}

	public Double getNilpctdisc() {
		return nilpctdisc;
	}

	public void setNilpctdisc(Double nilpctdisc) {
		this.nilpctdisc = nilpctdisc;
	}

	public Double getNildisc() {
		return nildisc;
	}

	public void setNildisc(Double nildisc) {
		this.nildisc = nildisc;
	}

	public Double getNetto() {
		return netto;
	}

	public void setNetto(Double netto) {
		this.netto = netto;
	}

	public Integer getJumsiklus() {
		return jumsiklus;
	}

	public void setJumsiklus(Integer jumsiklus) {
		this.jumsiklus = jumsiklus;
	}

	public String getSatsiklus() {
		return satsiklus;
	}

	public void setSatsiklus(String satsiklus) {
		this.satsiklus = satsiklus;
	}

	public Integer getNouskm() {
		return nouskm;
	}

	public void setNouskm(Integer nouskm) {
		this.nouskm = nouskm;
	}

	public Integer getJumkar() {
		return jumkar;
	}

	public void setJumkar(Integer jumkar) {
		this.jumkar = jumkar;
	}

	public Integer getJumnkar() {
		return jumnkar;
	}

	public void setJumnkar(Integer jumnkar) {
		this.jumnkar = jumnkar;
	}

	public Long getVersion() {
		return version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	public String getUsrcrt() {
		return usrcrt;
	}

	public void setUsrcrt(String usrcrt) {
		this.usrcrt = usrcrt;
	}

	public String getTglcrt() {
		return tglcrt;
	}

	public void setTglcrt(String tglcrt) {
		this.tglcrt = tglcrt;
	}

	public String getJamcrt() {
		return jamcrt;
	}

	public void setJamcrt(String jamcrt) {
		this.jamcrt = jamcrt;
	}

	public String getUsrupd() {
		return usrupd;
	}

	public void setUsrupd(String usrupd) {
		this.usrupd = usrupd;
	}

	public String getTglupd() {
		return tglupd;
	}

	public void setTglupd(String tglupd) {
		this.tglupd = tglupd;
	}

	public String getJamupd() {
		return jamupd;
	}

	public void setJamupd(String jamupd) {
		this.jamupd = jamupd;
	}

	public EAdminRenewal getHeader() {
		return header;
	}

	public void setHeader(EAdminRenewal header) {
		this.header = header;
	}

	public List<EAdminRenewalDetTghSubDetSkemaTarif> getSubDetailSkemaTarif() {
		return subDetailSkemaTarif;
	}

	public void setSubDetailSkemaTarif(List<EAdminRenewalDetTghSubDetSkemaTarif> subDetailSkemaTarif) {
		this.subDetailSkemaTarif = subDetailSkemaTarif;
	}

	public List<EAdminRenewalDetTghSubDetDiskon> getSubDetailDiskon() {
		return subDetailDiskon;
	}

	public void setSubDetailDiskon(List<EAdminRenewalDetTghSubDetDiskon> subDetailDiskon) {
		this.subDetailDiskon = subDetailDiskon;
	}

	public Object clone() {
		try {
			return super.clone();
		} catch (CloneNotSupportedException e) {
			throw new DevException("Clone not supported", e);
		}
	}

	@PrePersist
	private void prePersist() {

		Date currentDate = new Date();
	  
		this.id = UUID.randomUUID().toString();
    
		this.usrcrt = CurrentUser.getUsername();
		this.tglcrt = new SimpleDateFormat("yyyyMMdd").format(currentDate);
		this.jamcrt = new SimpleDateFormat("HHmmss").format(currentDate);
	
	}

	@PreUpdate
	private void preUpdate() {
		Date currentDate = new Date();
		
		this.usrupd = CurrentUser.getUsername();
		this.tglupd = new SimpleDateFormat("yyyyMMdd").format(currentDate);
		this.jamupd = new SimpleDateFormat("HHmmss").format(currentDate);
	}
}