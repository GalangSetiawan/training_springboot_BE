package co.id.sofcograha.base.queue.queuenotification.entities;

import java.util.Date;
import java.util.UUID;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.PrePersist;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import co.id.sofcograha.base.authentication.CurrentUser;
import co.id.sofcograha.base.constants.enums.NotificationType;
import co.id.sofcograha.base.exceptions.DevException;
import co.id.sofcograha.base.master.company.entities.ECompany;
import co.id.sofcograha.base.master.user.entities.EUser;

@Entity
@Access(AccessType.FIELD)
@Table(schema="public", name="std_notification")
@JsonIgnoreProperties(ignoreUnknown=true)
public class ESysNotification implements Cloneable {

	@Id
	@Column(name = "id")
	private String id;
	
	@Version
	@Column(name = "version")
	private Long version;

	@OneToOne
	@JoinColumn(name = "std_user_id")
	private EUser user;

	@OneToOne
	@JoinColumn(name = "std_company_id")
	private ECompany company;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "issue_date")
	private Date issueDate;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "end_issue_date")
	private Date endIssueDate;

	@Column(name = "read_flag")
	private Boolean readFlag;

	@Column(name = "pin_flag")
	private Boolean pinFlag;

	@Column(name = "notification_type")
	@Enumerated(EnumType.STRING)
	private NotificationType notificationType;

	@Column(name = "notification_msg")
	private String notificationMsg;

	@Column(name = "param1")
	private String param1;
	
	@Column(name = "param2")
	private String param2;
	
	@Column(name = "active")
	private Boolean active;

	@Column(name = "user_create")
	private String userCreate;

	@Column(name = "creation_time")
	private Date creationTime;

	@Column(name = "user_modify")
	private String userModify;

	@Column(name = "modification_time")
	private Date modificationTime;

	public EUser getUser() {
		return user;
	}

	public void setUser(EUser user) {
		this.user = user;
	}

	public ECompany getCompany() {
		return company;
	}

	public void setCompany(ECompany company) {
		this.company = company;
	}
	
	public Date getIssueDate() {
		return issueDate;
	}

	public void setIssueDate(Date issueDate) {
		this.issueDate = issueDate;
	}

	public Date getEndIssueDate() {
		return endIssueDate;
	}

	public void setEndIssueDate(Date endIssueDate) {
		this.endIssueDate = endIssueDate;
	}

	public Boolean getReadFlag() {
		return readFlag;
	}

	public void setReadFlag(Boolean readFlag) {
		this.readFlag = readFlag;
	}

	public Boolean getPinFlag() {
		return pinFlag;
	}

	public void setPinFlag(Boolean pinFlag) {
		this.pinFlag = pinFlag;
	}

	public NotificationType getNotificationType() {
		return notificationType;
	}

	public void setNotificationType(NotificationType notificationType) {
		this.notificationType = notificationType;
	}

	public String getNotificationMsg() {
		return notificationMsg;
	}

	public void setNotificationMsg(String notificationMsg) {
		this.notificationMsg = notificationMsg;
	}
	
	public String getParam1() {
		return param1;
	}
	
	public void setParam1(String param1) {
		this.param1 = param1;
	}

	public String getParam2() {
		return param2;
	}
	
	public void setParam2(String param2) {
		this.param2 = param2;
	}
	
	public Boolean getActive() {
		return active;
	}

	public void setActive(Boolean active) {
		this.active = active;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public Long getVersion() {
		return version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	public String getUserCreate() {
		return userCreate;
	}

	public void setUserCreate(String userCreate) {
		this.userCreate = userCreate;
	}

	public Date getCreationTime() {
		return creationTime;
	}

	public void setCreationTime(Date creationTime) {
		this.creationTime = creationTime;
	}

	public String getUserModify() {
		return userModify;
	}

	public void setUserModify(String userModify) {
		this.userModify = userModify;
	}

	public Date getModificationTime() {
		return modificationTime;
	}

	public void setModificationTime(Date modificationTime) {
		this.modificationTime = modificationTime;
	}

	public Object clone() {
		try {
			return super.clone();
		} catch (CloneNotSupportedException e) {
			throw new DevException("Clone not supported", e);
		}
	}
	
	@PrePersist
	private void prePersist() {
		Date currentDateTime = new Date();
		
		this.id = UUID.randomUUID().toString();
		this.userCreate = CurrentUser.getUsername();
		this.creationTime = currentDateTime;
		this.userModify = CurrentUser.getUsername();
		this.modificationTime = currentDateTime;
	}
}