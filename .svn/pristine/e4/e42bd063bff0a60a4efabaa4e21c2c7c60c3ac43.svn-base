package co.id.sofcograha.domain.invoicing.admin.upload.repositories;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.Query;

import org.springframework.data.jpa.repository.support.SimpleJpaRepository;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import co.id.sofcograha.base.utils.searchData.HqlSimpleSearchBuilder;
import co.id.sofcograha.base.utils.searchData.SearchParameter;
import co.id.sofcograha.base.utils.searchData.SearchResult;
import co.id.sofcograha.domain.invoicing.admin.upload.entities.EAdminUploadDetail;
import co.id.sofcograha.domain.invoicing.admin.upload.entities.ESumDetailUpload;

@Repository
public class EAdminUploadDetailRepository extends SimpleJpaRepository<EAdminUploadDetail, String> {

	protected final EntityManager em;

	public EAdminUploadDetailRepository(EntityManager em) {
		super(EAdminUploadDetail.class, em);
		this.em = em;
	}
	
	public EAdminUploadDetail findByBK(String idAi001) {
		
		String query = "SELECT e FROM EAdminUploadDetail e " + 
                       "WHERE e.header.id = :idAi001";
		
		try {
			return em.createQuery(query, EAdminUploadDetail.class)
					 .setParameter("idAi001", idAi001)
					 .getSingleResult();
			
		} catch (NoResultException e) {
			return null;
		}
	}
	
	public List<EAdminUploadDetail> findByCustomerProdukTahunBulan(String idMi010, String idMi001, String tahun, String bulan) {
		
		String query = "SELECT e FROM EAdminUploadDetail e " + 
                       "WHERE e.header.mappingCustomerProduk.header.customer.id = :idMi010 And " +
				             "e.header.mappingCustomerProduk.header.produk.id = :idMi001 And " +
				             "e.header.tahun = :tahun And " +
				             "e.header.bulan = :bulan"; 
		
		try {
			return em.createQuery(query, EAdminUploadDetail.class)
					 .setParameter("idMi010", idMi010)
					 .setParameter("idMi001", idMi001)
					 .setParameter("tahun", tahun)
					 .setParameter("bulan", bulan)
					 .getResultList();
			
		} catch (NoResultException e) {
			return null;
		}
	}
		
    @SuppressWarnings("unchecked")
    public ESumDetailUpload getTotalJumlahKaryByCustomerProdukTahunBulan(String idMi010, String idMi001, String tahun, String bulan) {
    	
        Query query;
      
        StringBuilder queryStringBuilder = new StringBuilder();
        queryStringBuilder.append("select public.sys_guid() as id, " + 
        		                  "       sum(a.jkbulini) as jkbulini, sum(a.revjkbullalu) as revjkbullalu, sum(a.seljkbullalu) as seljkbullalu,\n" + 
        		                  "       sum(a.jnkbulini) as jnkbulini, sum(a.revjnkbullalu) as revjnkbullalu, sum(a.seljnkbullalu) as seljnkbullalu \n" + 
        		                  "from ai002 a " + 
        		                  "left join ai001 b on b.id_ai001 = a.id_ai001 " + 
        		                  "left join mi013 c on c.id_mi013 = b.id_mi013 " + 
        		                  "left join mi011 d on d.id_mi011 = c.id_mi011 " + 
        		                  "where d.id_mi010 = :idMi010 and d.id_mi001 = :idMi001 and b.tahun = :tahun and b.bulan = :bulan");
        
        query = em.createNativeQuery(queryStringBuilder.toString(), ESumDetailUpload.class);
        
        query.setParameter("idMi010", idMi010);
        query.setParameter("idMi001", idMi001);
        query.setParameter("tahun", tahun);
        query.setParameter("bulan", bulan);
        
        List<Object> list = query.getResultList();
        if (!list.isEmpty()) {
        	ESumDetailUpload result = (ESumDetailUpload) list.get(0);
        	if (result.getJkbulini() == null && result.getRevjkbullalu() == null && result.getSeljkbullalu() == null &&
        		result.getJnkbulini() == null && result.getRevjnkbullalu() == null && result.getSeljnkbullalu() == null) {
        		
        		return null;
        	} else {
        		return result;
        	}
        } else {
        	return null;
        }
    }
	
    /*
    public List<ERptDetailArusKas> getDetailArusKasByPeriodAndCode(String tglawl, String tglakh, String idAm58) {
    	
        Query query;
      
        StringBuilder queryStringBuilder = new StringBuilder();
        queryStringBuilder.append("Select public.sys_guid() as id, a.tgjrnl, a.nojrnl, a.kettrn, b.debet, b.kredit " + 
        		                  "From WT01 a " + 
        		                  "Left Join WT02 b on b.id_wt01 = a.id_wt01 " + 
        		                  "Where a.tgjrnl between :tglawl and :tglakh and b.id_am58 = :idAm58");
        
        query = em.createNativeQuery(queryStringBuilder.toString(), ERptDetailArusKas.class);
        
        query.setParameter("tglawl", tglawl);
        query.setParameter("tglakh", tglakh);
        query.setParameter("idAm58", idAm58);
        
        return query.getResultList();
    }
    */
    
	public EAdminUploadDetail getOne(String id) {
		return super.findOne(id);
	}
	
	public SearchResult<EAdminUploadDetail> search(SearchParameter searchParameter) {
		HqlSimpleSearchBuilder<EAdminUploadDetail> search = new HqlSimpleSearchBuilder<>(EAdminUploadDetail.class, em);

		search.setSort(searchParameter.getSort());
		search.setPaging(searchParameter.getPagination());

		return search.getSearchResult();
	}
	
	public EAdminUploadDetail add(EAdminUploadDetail entity) {
		return save(entity);
	}

	public EAdminUploadDetail edit(EAdminUploadDetail entity) {
		return save(entity);
	}
	
	@Transactional
	public void deleteDetailPerTahunBulan(String tahun, String bulan) {
		
		StringBuilder queryStringBuilder = new StringBuilder();
		
		queryStringBuilder.append("delete from ai002 "); 
		queryStringBuilder.append("where id_ai002 in (select x.id_ai002 from ai002 x "); 
		queryStringBuilder.append("                   left join ai001 y on y.id_ai001 = x.id_ai001 "); 
		queryStringBuilder.append("                   where y.tahun = :tahun and y.bulan = :bulan)"); 
		
		em.createNativeQuery(queryStringBuilder.toString())
		  .setParameter("tahun", tahun)
		  .setParameter("bulan", bulan)
		  .executeUpdate();
		
	}
	
	@Transactional
	public void deleteDetailPerIdHeader(String idAi001) {
		
		StringBuilder queryStringBuilder = new StringBuilder();
		
		queryStringBuilder.append("delete from ai002 "); 
		queryStringBuilder.append("where id_ai001 = :idAi001 "); 
		
		em.createNativeQuery(queryStringBuilder.toString())
		  .setParameter("idAi001", idAi001)
		  .executeUpdate();
		
	}
	
}