package co.id.sofcograha.domain.invoicing.transaksi.tagihanTerjadwal.entities;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

import co.id.sofcograha.base.authentication.CurrentUser;
import co.id.sofcograha.base.exceptions.DevException;
import co.id.sofcograha.domain.invoicing.masters.implementasi.entities.EImplementasi;

@Entity
@Access(AccessType.FIELD)
@Table(name = "ti051", uniqueConstraints = @UniqueConstraint(columnNames = { "id_ti050", "nourut" }))
public class ETagihanTerjadwalDetailImplementasi implements Cloneable {
	
	@Id
	@Column(name = "id_ti051")
	private String id;
	
	@Column(name = "nourut")
	private Integer nourut;

	@Column(name = "keterangan")
	private String keterangan;

	@Column(name = "harga")
	private Double harga;

	@Column(name = "jumlah")
	private Integer jumlah;

	@Column(name = "bruto")
	private Double bruto;
	
	@Column(name = "pctdisc")
	private Double pctdisc;
	
	@Column(name = "nilpctdisc")
	private Double nilpctdisc;
	
	@Column(name = "nildisc")
	private Double nildisc;
	
	@Column(name = "netto")
	private Double netto;
	
	@Version
	@Column(name = "version")
	private Long version;
  
	@Column(name = "usrcrt")
	private String usrcrt;
  
	@Column(name = "tglcrt")
	private String tglcrt;

	@Column(name = "jamcrt")
	private String jamcrt;
  
	@Column(name = "usrupd")
	private String usrupd;
  
	@Column(name = "tglupd")
	private String tglupd;

	@Column(name = "jamupd")
	private String jamupd;
  
	@OneToOne
	@JoinColumn(name = "id_mi007")
	private EImplementasi implementasi;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_ti050")
	private ETagihanTerjadwalHeader header;  

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public Integer getNourut() {
		return nourut;
	}

	public void setNourut(Integer nourut) {
		this.nourut = nourut;
	}

	public String getKeterangan() {
		return keterangan;
	}

	public void setKeterangan(String keterangan) {
		this.keterangan = keterangan;
	}

	public Double getHarga() {
		return harga;
	}

	public void setHarga(Double harga) {
		this.harga = harga;
	}

	public Integer getJumlah() {
		return jumlah;
	}

	public void setJumlah(Integer jumlah) {
		this.jumlah = jumlah;
	}

	public Double getBruto() {
		return bruto;
	}

	public void setBruto(Double bruto) {
		this.bruto = bruto;
	}

	public Double getPctdisc() {
		return pctdisc;
	}

	public void setPctdisc(Double pctdisc) {
		this.pctdisc = pctdisc;
	}

	public Double getNilpctdisc() {
		return nilpctdisc;
	}

	public void setNilpctdisc(Double nilpctdisc) {
		this.nilpctdisc = nilpctdisc;
	}

	public Double getNildisc() {
		return nildisc;
	}

	public void setNildisc(Double nildisc) {
		this.nildisc = nildisc;
	}

	public Double getNetto() {
		return netto;
	}

	public void setNetto(Double netto) {
		this.netto = netto;
	}

	public Long getVersion() {
		return version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	public String getUsrcrt() {
		return usrcrt;
	}

	public void setUsrcrt(String usrcrt) {
		this.usrcrt = usrcrt;
	}

	public String getTglcrt() {
		return tglcrt;
	}

	public void setTglcrt(String tglcrt) {
		this.tglcrt = tglcrt;
	}

	public String getJamcrt() {
		return jamcrt;
	}

	public void setJamcrt(String jamcrt) {
		this.jamcrt = jamcrt;
	}

	public String getUsrupd() {
		return usrupd;
	}

	public void setUsrupd(String usrupd) {
		this.usrupd = usrupd;
	}

	public String getTglupd() {
		return tglupd;
	}

	public void setTglupd(String tglupd) {
		this.tglupd = tglupd;
	}

	public String getJamupd() {
		return jamupd;
	}

	public void setJamupd(String jamupd) {
		this.jamupd = jamupd;
	}

	public EImplementasi getImplementasi() {
		return implementasi;
	}

	public void setImplementasi(EImplementasi implementasi) {
		this.implementasi = implementasi;
	}

	public ETagihanTerjadwalHeader getHeader() {
		return header;
	}

	public void setHeader(ETagihanTerjadwalHeader header) {
		this.header = header;
	}

	public Object clone() {
		try {
			return super.clone();
		} catch (CloneNotSupportedException e) {
			throw new DevException("Clone not supported", e);
		}
	}

	@PrePersist
	private void prePersist() {

		Date currentDate = new Date();
	  
		this.id = UUID.randomUUID().toString();
    
		this.usrcrt = CurrentUser.getUsername();
		this.tglcrt = new SimpleDateFormat("yyyyMMdd").format(currentDate);
		this.jamcrt = new SimpleDateFormat("HHmmss").format(currentDate);
	
	}

	@PreUpdate
	private void preUpdate() {
		Date currentDate = new Date();
		
		this.usrupd = CurrentUser.getUsername();
		this.tglupd = new SimpleDateFormat("yyyyMMdd").format(currentDate);
		this.jamupd = new SimpleDateFormat("HHmmss").format(currentDate);
	}
}