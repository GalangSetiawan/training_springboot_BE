package co.id.sofcograha.base.master.customer.pojos;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import co.id.sofcograha.base.constants.BaseConstants;
import co.id.sofcograha.base.master.customer.entities.ECustomer;
import co.id.sofcograha.base.utils.searchData.SearchFieldMapping;

//import id.co.sofcograha.gajiidapi.base.constants.BaseConstants;
//import id.co.sofcograha.gajiidapi.base.extendables.BasePojo;
//import id.co.sofcograha.gajiidapi.base.mst.customer.entities.Customer;
//import id.co.sofcograha.gajiidapi.base.search.SearchFieldMapping;

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(Include.ALWAYS)
public class CustomerPojo {
	
	private static final long serialVersionUID = -7726070230959101435L;
	public static final String SINGLE = "customer";
	public static final String MULTI = "customers";
	
	public String id;
	public Long version;
	public String name;
	public Boolean active;
	
	public ECustomer toEntity() {
		
		ECustomer entity = new ECustomer();
		
		entity.setId(id);
		entity.setVersion(version);
		entity.setName(name);
		entity.setActive(active);
		
		return entity;
	}
	
	public static CustomerPojo fromEntity(ECustomer entity) {
		return fromEntity(entity, BaseConstants.DEFAULT_QUERY_DEPTH);
	}

	public static CustomerPojo fromEntity(ECustomer entity, int depthLevel) {
		if (entity == null) return null;
		if (depthLevel < 0) depthLevel = BaseConstants.DEFAULT_QUERY_DEPTH;
		
		CustomerPojo pojo = new CustomerPojo();
		
		pojo.id = entity.getId();
		if (depthLevel > 0) {
			depthLevel--;

			pojo.version = entity.getVersion();
			pojo.name = entity.getName();
			pojo.active = entity.getActive();
		}
		return pojo;
	}
	
	public static List<CustomerPojo> fromEntities(List<ECustomer> entities) {
		return fromEntities(entities, BaseConstants.DEFAULT_QUERY_DEPTH);
	}

	public static List<CustomerPojo> fromEntities(List<ECustomer> entities, int depthLevel) {
		if (entities == null) return new ArrayList<CustomerPojo>();
		if (depthLevel < 0) depthLevel = BaseConstants.DEFAULT_QUERY_DEPTH;
		
		List<CustomerPojo> pojos = new ArrayList<CustomerPojo>();
		for(ECustomer entity: entities) {
			pojos.add(CustomerPojo.fromEntity(entity));
		}
		return pojos;
	}

	public static List<SearchFieldMapping> getFieldMappings() {
		List<SearchFieldMapping> mappings = new ArrayList<>();
		
		mappings.add(new SearchFieldMapping("name", "name"));
		mappings.add(new SearchFieldMapping("active", "active", Boolean.class));
		
		return mappings;
	}
}