package co.id.sofcograha.base.utils;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

public class TokenUtil {

  public static final String KEY_TOKEN = "token";
  public static final String KEY_USERNAME = "username";
  public static final String KEY_COMPANY_CODE = "tenantId";
  private static final long EXPIRATIONTIME = 86_400_000L; // 1 Day
  private static final byte[] SECRET = (getRandomHexString(8) + "ProjectX-api-SECRETkey" + getRandomHexString(8)).getBytes();

  public static Map<String, String> parseToken(String token) throws ExpiredJwtException, UnsupportedJwtException,
      MalformedJwtException, SignatureException, IllegalArgumentException {
    if (token == null)
      return null;

    Map<String, String> authInfo = getUserNameAndTenantIdFromToken(token);
    authInfo.put(KEY_TOKEN, token);
    return authInfo;
  }

  public static String generateTokenFromUsernameAndCompanyCode(String username, String tenantId) {
    Date expireTime = new Date(System.currentTimeMillis() + EXPIRATIONTIME);

    return Jwts.builder().setHeaderParam(KEY_COMPANY_CODE, tenantId).setSubject(username).setExpiration(expireTime)
        .signWith(SignatureAlgorithm.HS512, SECRET).compact();
  }

  public static String getRequestFrom(String token) throws ExpiredJwtException, UnsupportedJwtException,
      MalformedJwtException, SignatureException, IllegalArgumentException {
    String requestFrom = Jwts.parser().setSigningKey(SECRET).parseClaimsJws(token).getBody().getAudience();

    return requestFrom != null ? requestFrom : null;
  }

  private static Map<String, String> getUserNameAndTenantIdFromToken(String token) throws ExpiredJwtException,
      UnsupportedJwtException, MalformedJwtException, SignatureException, IllegalArgumentException {
    Jws<Claims> parseClaimsJws = Jwts.parser().setSigningKey(SECRET).parseClaimsJws(token);

    Map<String, String> result = new HashMap<String, String>();
    result.put(KEY_USERNAME, parseClaimsJws.getBody().getSubject());
    result.put(KEY_COMPANY_CODE, (String) parseClaimsJws.getHeader().get(KEY_COMPANY_CODE));

    return result;
  }

  private static String getRandomHexString(int numChars) {
    Random r = new Random();
    StringBuffer sb = new StringBuffer();
    while (sb.length() < numChars) {
      sb.append(Integer.toHexString(r.nextInt()));
    }

    return sb.toString().substring(0, numChars);
  }
}
