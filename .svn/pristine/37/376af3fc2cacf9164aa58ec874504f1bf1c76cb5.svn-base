package co.id.sofcograha.base.utils;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Base64;

import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.PageSize;
import com.lowagie.text.Phrase;
import com.lowagie.text.Rectangle;
import com.lowagie.text.RectangleReadOnly;
import com.lowagie.text.pdf.BaseFont;
import com.lowagie.text.pdf.PdfCell;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfPageEventHelper;
import com.lowagie.text.pdf.PdfTemplate;
import com.lowagie.text.pdf.PdfWriter;

import co.id.sofcograha.base.exceptions.BusinessException;

public class PDFUtilService extends PdfPageEventHelper {
  
  private float SMALL_STANDART_FONT_SIZE = 8;
  private Font SMALL_STANDART_FONT = FontFactory.getFont(FontFactory.HELVETICA, SMALL_STANDART_FONT_SIZE);
  private PdfTemplate template;
  private BaseFont templateBaseFont;
  private Document document;
  private ByteArrayOutputStream baos;
  private PdfWriter writer;
  private boolean isWithPagination;
  
  private PdfPTable headerTable;
  private PdfPTable footerTable;
  private float DEFAULT_PADDING = 20;
  
  // custom pagination
  private boolean isCustomPagination = false;
  private String prefixPageString = "";
  private String sufixPageString = "";
  private float coorX = 0f;
  private float coorY = 0f;
  private float offsetPageNum = 0f;
  private Font paginationFont = FontFactory.getFont(FontFactory.HELVETICA, SMALL_STANDART_FONT_SIZE);
  
  // common
  private Font baseFont = FontFactory.getFont(FontFactory.HELVETICA, SMALL_STANDART_FONT_SIZE);
  
  public PDFUtilService() {
    document = new Document(PageSize.A4, 25, 25, 25, 25);
    baos = new ByteArrayOutputStream();
    writer = PdfWriter.getInstance(document, baos);
    writer.setPageEvent(this);
    isWithPagination = true;
    initHeaderFooter();
  }
  
  public PDFUtilService(final boolean pIsWithPagination) {
    document = new Document(PageSize.A4, 25, 25, 25, 25);
    baos = new ByteArrayOutputStream();
    writer = PdfWriter.getInstance(document, baos);
    writer.setPageEvent(this);
    isWithPagination = pIsWithPagination;
    initHeaderFooter();
  }
  
  public PDFUtilService(final float x, final float y, final boolean pIsWithPagination ) {
    document = new Document(new RectangleReadOnly(x,y), 25, 25, 25, 25);
    baos = new ByteArrayOutputStream();
    writer = PdfWriter.getInstance(document, baos);
    writer.setPageEvent(this);
    isWithPagination = pIsWithPagination;
    initHeaderFooter();
  }
  
  public PDFUtilService(final boolean isLandScape, final float left, final float right, final float top, final float bottom, final boolean pIsWithPagination) {
    document = new Document(isLandScape ? PageSize.A4.rotate() : PageSize.A4, left, right, top, bottom);
    baos = new ByteArrayOutputStream();
    writer = PdfWriter.getInstance(document, baos);
    writer.setPageEvent(this);
    isWithPagination = pIsWithPagination;
    initHeaderFooter();
  }
  
  public Base64StringEncodedPojo generatePdfReport() {
    try {
      return new Base64StringEncodedPojo("data:application/pdf;base64,", Base64.getEncoder().encodeToString(baos.toByteArray()));
    } catch (final Exception e) {
      throw new BusinessException(e.getMessage());
    } finally {
      try {
        baos.close();
      } catch (IOException e) {
        throw new BusinessException(e.getMessage());
      }
    }
  }
  
  public void initHeaderFooter() {
    headerTable = new PdfPTable(1);
    headerTable.setTotalWidth(document.getPageSize().getWidth() - document.leftMargin() - document.rightMargin());
    headerTable.setLockedWidth(true);
    
    footerTable = new PdfPTable(1);
    footerTable.setTotalWidth(document.getPageSize().getWidth() - document.leftMargin() - document.rightMargin());
    footerTable.setLockedWidth(true);
  }
  
  public void onOpenDocument(final PdfWriter writer, final Document document) {
    try {
      templateBaseFont = BaseFont.createFont("Helvetica", BaseFont.WINANSI, false);
    } catch (final DocumentException e) {
      throw new BusinessException(e.getMessage());
    } catch (final IOException e) {
      throw new BusinessException(e.getMessage());
    }
    template = writer.getDirectContent().createTemplate(100, 100);
  }
  
  
  public void onEndPage(final PdfWriter writer, final Document document) {
    addPageHeader();
    addPageFooter();
    if (isWithPagination) {
      try {
        final PdfPTable footer = new PdfPTable(3);
        footer.getDefaultCell().setBorder(Rectangle.TOP);
      
        PdfPCell cell = new PdfPCell();
        cell.setColspan(3);
        cell.setFixedHeight(5);
        cell.setBorder(0);
        footer.addCell(cell);
        
        footer.addCell(new Phrase("", SMALL_STANDART_FONT));
        footer.addCell(new Phrase("", SMALL_STANDART_FONT));
        
        cell = new PdfPCell(new Phrase("Page: " + document.getPageNumber() + " of ", SMALL_STANDART_FONT));
        cell.setPaddingTop(4);;
        cell.setPaddingRight(20);
        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell.setBorder(Rectangle.TOP);
        footer.addCell(cell);
        
        footer.setTotalWidth(document.getPageSize().getWidth() - document.leftMargin() - document.rightMargin());
        final PdfContentByte cb = writer.getDirectContentUnder();
        if (footerTable == null) {
          footer.writeSelectedRows(0, -1, document.leftMargin(), document.bottomMargin(), writer.getDirectContent());  
          cb.addTemplate(template, document.getPageSize().getWidth() - document.rightMargin() - 19, document.bottomMargin() - 17);   
        } else {
          footer.writeSelectedRows(0, -1, document.leftMargin(), document.bottomMargin() - footerTable.getTotalHeight() - DEFAULT_PADDING, writer.getDirectContent());
          cb.addTemplate(template, document.getPageSize().getWidth() - document.rightMargin() - 19, document.bottomMargin() - footerTable.getTotalHeight() - DEFAULT_PADDING - 17);   
        }
      } catch (final Exception e) {
        throw new BusinessException(e.getMessage());
      }
    }
    if (isCustomPagination) {
      addPagination(document);
    }
  }
  
  public void addPageHeader() {
    if (headerTable != null) {
      headerTable.writeSelectedRows(0, -1, document.left(), document.top() + headerTable.getTotalHeight() + DEFAULT_PADDING, writer.getDirectContent());
    }
  }
  
  public void addPageFooter() {
    if (footerTable != null) {
      footerTable.writeSelectedRows(0, -1, document.left(), document.bottom() - footerTable.getFooterHeight(), writer.getDirectContent());
    }
  }

  public void addPagination(final Document document) {
    try {
      final PdfPTable footer = new PdfPTable(1);
      String strPage= prefixPageString + " "+ document.getPageNumber() + " " + sufixPageString + " ";
      PdfPCell cell = new PdfPCell(new Phrase(strPage, paginationFont));
      cell.setBorder(PdfCell.NO_BORDER);
      cell.setPadding(0);
      cell.setPaddingRight(5);
      cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      footer.addCell(cell);
      footer.setTotalWidth(((float)strPage.length()*4) + 5f);
      
      final PdfContentByte cb = writer.getDirectContentUnder();
      footer.writeSelectedRows(0, -1, coorX, coorY, writer.getDirectContent());  
      cb.addTemplate(template, coorX + ((float)strPage.length() * 4) + 5f, coorY - offsetPageNum);
      
    } catch (final Exception e) {
      throw new BusinessException(e.getMessage());
    }
  }
  
  public void onCloseDocument(final PdfWriter writer, final Document document) {
    template.beginText();
    template.setFontAndSize(baseFont.getBaseFont(), baseFont.getSize());
    if (isWithPagination) {
      template.setFontAndSize(templateBaseFont, SMALL_STANDART_FONT_SIZE);  
    }
    if (isCustomPagination) {
      template.setFontAndSize(paginationFont.getBaseFont(), paginationFont.getSize());
    }
    template.setTextMatrix(0, 0);
    template.showText(Integer.toString(writer.getPageNumber() - 1));
    template.endText();
    template.sanityCheck();
  }
  
  public Document getDocument() {
    return document;
  }

  public void setDocument(Document document) {
    this.document = document;
  }

  public PdfWriter getWriter() {
    return writer;
  }

  public void setWriter(PdfWriter writer) {
    this.writer = writer;
  }
  
  public PdfPTable getHeaderTable() {
    return headerTable;
  }
  
  public PdfPTable getFooterTable() {
    return footerTable;
  }
  
  public float getDefaultPadding() {
    return DEFAULT_PADDING;
  }
  
  public void setDefaultPadding(float a) {
    this.DEFAULT_PADDING = a;
  }
  
  public void setCustomPagination(final float x, final float y, final String prefixPage, final String suffixPage,
      final Font pageFont, final float offSet) {
    this.isCustomPagination = true;
    this.coorX = x;
    this.coorY = y;
    this.prefixPageString = prefixPage;
    this.sufixPageString = suffixPage;
    this.paginationFont = pageFont;
    this.offsetPageNum = offSet;
  }
  
}

