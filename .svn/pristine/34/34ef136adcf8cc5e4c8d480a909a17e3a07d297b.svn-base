package co.id.sofcograha.domain.invoicing.masters.diskonkhusus.entities;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

import co.id.sofcograha.base.authentication.CurrentUser;
import co.id.sofcograha.base.exceptions.DevException;

@Entity
@Access(AccessType.FIELD)
@Table(name = "mi008", uniqueConstraints = @UniqueConstraint(columnNames = { "nama" }))
public class EDiskonKhususHeader implements Cloneable {

	@Id
	@Column(name = "id_mi008")
	private String id;

	@Column(name = "nama")
	private String nama;

	@Column(name = "keterangan")
	private String keterangan;

	@Column(name = "pctdisc")
	private Double pctdisc;

	@Column(name = "nildisc")
	private Double nildisc;

	@Column(name = "tglstart")
	private String tglstart;
	
	@Column(name = "tglstop")
	private String tglstop;
	
	@Column(name = "jumdur")
	private Integer jumdur;

	@Column(name = "satdur")
    private String satdur;
	
	@Column(name = "flakt")
	private String flakt;

	@Version
	@Column(name = "version")
	private Long version;

	@Column(name = "usrcrt")
	private String usrcrt;

	@Column(name = "tglcrt")
	private String tglcrt;

	@Column(name = "jamcrt")
	private String jamcrt;

	@Column(name = "usrupd")
	private String usrupd;

	@Column(name = "tglupd")
	private String tglupd;

	@Column(name = "jamupd")
	private String jamupd;

	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "header")
	private List<EDiskonKhususDetail> detail;

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getNama() {
		return nama;
	}

	public void setNama(String nama) {
		this.nama = nama;
	}

	public String getKeterangan() {
		return keterangan;
	}

	public void setKeterangan(String keterangan) {
		this.keterangan = keterangan;
	}

	public Double getPctdisc() {
		return pctdisc;
	}

	public void setPctdisc(Double pctdisc) {
		this.pctdisc = pctdisc;
	}

	public Double getNildisc() {
		return nildisc;
	}

	public void setNildisc(Double nildisc) {
		this.nildisc = nildisc;
	}

	public String getTglstart() {
		return tglstart;
	}

	public void setTglstart(String tglstart) {
		this.tglstart = tglstart;
	}

	public String getTglstop() {
		return tglstop;
	}

	public void setTglstop(String tglstop) {
		this.tglstop = tglstop;
	}

	public Integer getJumdur() {
		return jumdur;
	}

	public void setJumdur(Integer jumdur) {
		this.jumdur = jumdur;
	}

	public String getSatdur() {
		return satdur;
	}

	public void setSatdur(String satdur) {
		this.satdur = satdur;
	}

	public String getFlakt() {
		return flakt;
	}

	public void setFlakt(String flakt) {
		this.flakt = flakt;
	}

	public Long getVersion() {
		return version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	public String getUsrcrt() {
		return usrcrt;
	}

	public void setUsrcrt(String usrcrt) {
		this.usrcrt = usrcrt;
	}

	public String getTglcrt() {
		return tglcrt;
	}

	public void setTglcrt(String tglcrt) {
		this.tglcrt = tglcrt;
	}

	public String getJamcrt() {
		return jamcrt;
	}

	public void setJamcrt(String jamcrt) {
		this.jamcrt = jamcrt;
	}

	public String getUsrupd() {
		return usrupd;
	}

	public void setUsrupd(String usrupd) {
		this.usrupd = usrupd;
	}

	public String getTglupd() {
		return tglupd;
	}

	public void setTglupd(String tglupd) {
		this.tglupd = tglupd;
	}

	public String getJamupd() {
		return jamupd;
	}

	public void setJamupd(String jamupd) {
		this.jamupd = jamupd;
	}

	public List<EDiskonKhususDetail> getDetail() {
		return detail;
	}

	public void setDetail(List<EDiskonKhususDetail> detail) {
		this.detail = detail;
	}

	public Object clone() {
		try {
			return super.clone();
		} catch (CloneNotSupportedException e) {
			throw new DevException("Clone not supported", e);
		}
	}

	@PrePersist
	private void prePersist() {

		Date currentDate = new Date();

		this.id = UUID.randomUUID().toString();

		this.usrcrt = CurrentUser.getUsername();
		this.tglcrt = new SimpleDateFormat("yyyyMMdd").format(currentDate);
		this.jamcrt = new SimpleDateFormat("HHmmss").format(currentDate);

	}

	@PreUpdate
	private void preUpdate() {
		Date currentDate = new Date();

		this.usrupd = CurrentUser.getUsername();
		this.tglupd = new SimpleDateFormat("yyyyMMdd").format(currentDate);
		this.jamupd = new SimpleDateFormat("HHmmss").format(currentDate);
	}
}