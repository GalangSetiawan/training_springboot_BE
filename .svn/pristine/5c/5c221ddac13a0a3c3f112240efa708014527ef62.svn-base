package co.id.sofcograha.domain.invoicing.proses.upload.services;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import co.id.sofcograha.base.authentication.CurrentUser;
import co.id.sofcograha.base.constants.BaseConstants;
import co.id.sofcograha.base.extendables.BaseService;
import co.id.sofcograha.base.master.company.pojos.CompanyPojo;
import co.id.sofcograha.base.master.company.services.CompanyService;
import co.id.sofcograha.base.master.user.pojos.UserInfo;
import co.id.sofcograha.base.master.user.services.UserService;
import co.id.sofcograha.base.queue.notification.NotificationMainService;
import co.id.sofcograha.base.utils.ApiResponse;
import co.id.sofcograha.base.utils.TimeUtil;
import co.id.sofcograha.base.utils.searchData.SearchParameter;
import co.id.sofcograha.base.utils.searchData.SearchResult;
import co.id.sofcograha.domain.invoicing.admin.bulanan.entities.EAdminBulanan;
import co.id.sofcograha.domain.invoicing.admin.bulanan.services.AdminBulananService;
import co.id.sofcograha.domain.invoicing.admin.upload.entities.EAdminUploadDetail;
import co.id.sofcograha.domain.invoicing.admin.upload.entities.EAdminUploadHeader;
import co.id.sofcograha.domain.invoicing.admin.upload.services.AdminUploadDetailService;
import co.id.sofcograha.domain.invoicing.admin.upload.services.AdminUploadHeaderService;
import co.id.sofcograha.domain.invoicing.masters.mappingCustomerProduk.entities.EMappingCustomerProduk;
import co.id.sofcograha.domain.invoicing.masters.mappingCustomerProduk.services.MappingCustomerProdukService;
import co.id.sofcograha.domain.invoicing.proses.upload.entities.EUploadData;
import co.id.sofcograha.domain.invoicing.proses.upload.entities.EUploadDataRpt;
import co.id.sofcograha.domain.invoicing.proses.upload.pojos.UploadData;
import co.id.sofcograha.domain.invoicing.proses.upload.pojos.UploadModel;
import co.id.sofcograha.domain.invoicing.proses.upload.pojos.UserPassword;
import co.id.sofcograha.domain.invoicing.proses.upload.repositories.UploadRptRepository;
import co.id.sofcograha.domain.invoicing.saldo.live.entities.ESaldoLive;
import co.id.sofcograha.domain.invoicing.saldo.live.services.SaldoLiveService;

@Service
public class CompositeUploadService extends BaseService {
  
	@Autowired private Environment env;
	@Autowired private AdminBulananService adminBulananService;
	@Autowired private AdminUploadDetailService adminUploadDetailService;
	@Autowired private AdminUploadHeaderService adminUploadHeaderService;
	@Autowired private MappingCustomerProdukService mappingCustomerProdukService;
	@Autowired private SaldoLiveService saldoLiveService;
	@Autowired private UploadDataService uploadDataService;
	
	@Autowired private UploadRptRepository uploadRptRepository;
	
	@Autowired private NotificationMainService notificationMainService;
	@Autowired private CompanyService companyService;
	@Autowired private UserService userService;
	
	public SearchResult<EUploadDataRpt> searchUploadData(SearchParameter searchParameter) {
//		uploadRptRepository.getDetailArusKasByPeriodAndCode("2021", "07", "%");
//		return null;
		return uploadRptRepository.search(searchParameter);
	}
	
	@Transactional
	public void getDataFromGajiId(String tahun, String bulan) {

		String userGajiId      = env.getProperty("gaji-id-user");
		String pwdGajiId       = env.getProperty("gaji-id-pwd");
		String gajiIdTokenAddr = env.getProperty("gaji-id-token-address");
		String gajiIdUploAddr  = env.getProperty("gaji-id-upload-address");
		String hcToken         = env.getProperty("gaji-id-token");
	  
		// validasi tahun bulan belum proses invoice
		// 23 Juli 2021, tidak bisa menggunakan admin bulanan (ai007) sebagai acuan
		//               karena ini artinya data harus lengkap semuaaa dulu baru bisa upload
		//               artinya, satu saja pt yang macet, maka keseluruhan proses invoicing (bahkan penagihan = macet)
		//               ini yang hendak dihindari, jadi meski satu pt macet, pt yg lain tetap dapat upload
		//               'main' nya nanti di ai001.flproi dan ai003.flproi (kalo yg di proses invoice)
		//               di method hapusDataLama dan simpanDataUpload kalo yg di upload ini
		//valBelumProsesInvoice(tahun, bulan);
		//throwBatchError();
			
		// get external token (return value : token)
		String token = "";
		if (userGajiId != null && !userGajiId.trim().equals("")) {
			token = getExternalApiToken(gajiIdTokenAddr, userGajiId, pwdGajiId);
			throwBatchError();			
		} else {
			token = hcToken;
		}
			
		// get data from external api (return value : list pojo UploadModel)
		UploadModel[] uploadModelList = getDataFromExternalApi(gajiIdUploAddr, token, tahun, bulan);
		throwBatchError();
			
		//for (UploadModel uploadModel : uploadModelList) {
		//	System.out.println(uploadModel.tahunBulan + " " + uploadModel.kodePerusahaan);
		//}

		// proses simpan data yang didapat ke ai001 dan ai002
		simpanDataUpload(tahun, bulan, uploadModelList);
			
		// update admin bulanan (bila customer live vs data upload lengkap, flag = Y)
		updateAdminBulanan(tahun, bulan);
			
		// generate bulan berikutnya untuk diupload di admin bulanan (ai007)
		generateNextAdminBulanan(tahun, bulan);
	}
	
	private void valBelumProsesInvoice(String tahun, String bulan) {
		
		EAdminBulanan entity = adminBulananService.findByBk(tahun, bulan);
		
		if (entity != null && entity.getFlproi().equals(BaseConstants.YA)) {
			batchError("upload.sudah.proses.invoice", tahun, bulan);
		}
	}
	
	private String getExternalApiToken(String uri, String user, String pwd) {

		String result = "";
		// get token
		try {

			HttpHeaders headers = new HttpHeaders();
			headers.set("Content-Type", "application/json");

			UserPassword userPassword = new UserPassword();
			userPassword.username = user;
			userPassword.password = pwd;
			
			String userPasswordAsJson;
			userPasswordAsJson = new ObjectMapper().writeValueAsString(userPassword);
			
			HttpEntity<String> entity = new HttpEntity<String>(userPasswordAsJson, headers);

			RestTemplate restTemplate = new RestTemplate();
			ResponseEntity<ApiResponse> resp = restTemplate.postForEntity(uri, entity, ApiResponse.class);
	
			ApiResponse hasil = resp.getBody();
				
			//System.out.println(hasil.getStatus());
			//System.out.println(hasil.getData().get("token"));
		
			result = (String) hasil.getData().get("token");
		} catch (JsonProcessingException e) {
			e.printStackTrace();
			batchError("upload.ambil.token.external.api.failed");
		} catch (HttpClientErrorException e) {
			// Bad Request, salah satunya karena pengambilan token ke api external gagal
			e.printStackTrace();
			batchError("upload.ambil.token.external.api.failed");
		}
		
		return result;

	}
	
	private UploadModel[] getDataFromExternalApi(String uri, String token, String tahun, String bulan) {
		
		UploadModel[] result = null;
				
		try {
			// get data dengan menggunakan token
			HttpHeaders headers2 = new HttpHeaders();
			headers2.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
			headers2.set("Content-Type", "application/json");
			headers2.set("X-Auth-Token", token);
		
			HttpEntity<String> entity2 = new HttpEntity<String>(headers2);
		
			UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(uri)
				// Add query parameter
				.queryParam("tahunBulan", tahun+bulan);
				//.queryParam("tahun", tahun)
				//.queryParam("bulan", bulan);

			RestTemplate restTemplate2 = new RestTemplate();
			ResponseEntity<ApiResponse> responseEntity = restTemplate2.exchange(builder.toUriString(), HttpMethod.GET, entity2, ApiResponse.class);
        
			ApiResponse hasil2 = responseEntity.getBody();

			ObjectMapper objectMapper = new ObjectMapper();
			String json;
			json = objectMapper.writeValueAsString(hasil2.getData().get("result"));
        
			//System.out.println(json);
    	
			result = new ObjectMapper().readValue(json, UploadModel[].class);
        
			//for (UploadModel produk : result) {
			//	System.out.println(produk.kodePerusahaan);
			//}
		} catch (IOException e) {
			e.printStackTrace();
			batchError("upload.ambil.data.external.api.failed");
		} catch (HttpClientErrorException e) {
			// Bad Request
			e.printStackTrace();
			batchError("upload.ambil.token.external.api.failed");
		}
		
		return result;
	}
	
	/*
	@Transactional
	private void hapusDataLama(String tahun, String bulan) {
		
		// 23 Juli 2021, tidak bisa hapus keseluruhan data, tapi hanya hapus data yang terambil tapi yang belum proses invoice
		//               jadi ini harus ada di dalam loop simpan data Upload
		if (adminUploadHeaderService.isTahunBulanExists(tahun, bulan)) {
			System.out.println("Tahun Bulan ditemukan");
			adminUploadDetailService.deleteDetailPerTahunBulan(tahun, bulan);			
		}
	}
	*/
	
	@Transactional
	private void simpanDataUpload(String tahun, String bulan, UploadModel[] uploadModelList) {

		// hapus data upload di tahun bulan ini 
		List<EAdminUploadHeader> eAdminUploadHeaderList = adminUploadHeaderService.findByTahunBulan(tahun, bulan);
		for (EAdminUploadHeader item : eAdminUploadHeaderList) {
			if (!item.getFlproi().equals(BaseConstants.YA)) {
				adminUploadHeaderService.delete(item.getId(), item.getVersion());
			}
		}

		int count = 1;
		int size = uploadModelList.length;
		for (UploadModel data : uploadModelList) {
			String kodept  = data.kodePerusahaan;
			String npwp    = data.npwpPerusahaan;
			String kodekp  = data.kodeKelompokPayroll;
			String thnData = data.tahunBulan.substring(0, 4);
			String blnData = data.tahunBulan.substring(4, 6);
			
			// tulis ke raw data upload (ui001)
			UploadData uploadData = uploadDataService.findByBk(data.tahunBulan, data.kodePerusahaan, data.npwpPerusahaan, data.kodeKelompokPayroll);
			if (uploadData != null) {
				uploadDataService.delete(uploadData.id, uploadData.version);				
			}
			EUploadData eUploadData = new EUploadData();
			eUploadData.setTahunbulan(data.tahunBulan);
			eUploadData.setKodept(data.kodePerusahaan);
			eUploadData.setNamapt(data.namaPerusahaan);
			eUploadData.setNpwp(data.npwpPerusahaan);
			eUploadData.setNamanpwp(data.namaNpwpPerusahaan);
			eUploadData.setKodekp(data.kodeKelompokPayroll);
			eUploadData.setNamakp(data.namaKelompokPayroll);
			eUploadData.setJkbulini(data.jumlahPegawaiBulanIni);
			eUploadData.setRevjkbullalu(data.revisiJumlahPegawaiBulanLalu);
			eUploadData.setSeljkbullalu(data.penambahanJumlahPegawaiBulanLalu);
			eUploadData.setJnkbulini(data.jumlahNonPegawai);
			eUploadData.setRevjnkbullalu(data.revisiJumlahNonPegawaiBulanLalu);
			eUploadData.setSeljnkbullalu(data.penambahanJumlahNonPegawaiBulanLalu);
			eUploadData.setFlexist(BaseConstants.TIDAK);
			eUploadData = uploadDataService.add(eUploadData);
			
			if (kodept.equals("014")) {
				System.out.println("Gamon");
			}
			// tulis ke admin upload data (ai001 dan ai002)
			//EMappingCustomerProduk eMappingCustomerProduk = mappingCustomerProdukService.getByPTNpwpKp(kodept, npwp, kodekp);

			// pencarian ke mapping ngga bisa langsung by kodept, npwp, kodekp
			
			// cari dulu bdsk kode pt ke mapping
			List<EMappingCustomerProduk> eMappingCustomerProdukList = mappingCustomerProdukService.getByPT(kodept);

			// cari bdsk kode pt dengan di distinct dengan npwp dan kodept
			List<EMappingCustomerProduk> eMappingCustomerProdukListDistinct = mappingCustomerProdukService.getByPT(kodept);
			
			EMappingCustomerProduk eMappingCustomerProduk = null;
			
			// pastikan bahwa list mapping yang didapat tidak sama persis
			// jadi tidak boleh terjadi data yang didapat seperti ini :
			// kodept      npwp       kodekp
			// 146         <kosong>   <kosong>
			// 146         <kosong>   <kosong>
			// karena ini artinya kode pt 146 tersebut digunakan oleh 2 customer dengan definisi mapping yang sama persis
			// ini tidak boleh karena tentu invoice nya akan bingung to, jumlah kary ini sebenarnya berapa to
			boolean isMappingValid = true;
			if (eMappingCustomerProdukList.size() != eMappingCustomerProdukListDistinct.size()) {
				isMappingValid = false;
			}
			
			if (isMappingValid) {
				
				for (EMappingCustomerProduk item : eMappingCustomerProdukList) {
					
					boolean passed = false;
					if (item.getNpwp() == null || item.getNpwp().equals("")) {
						// artinya isi npwp di data upload boleh apapun, lanjutkan periksa dengan kodekp						
						passed = true;
					} else {
						if (item.getNpwp().equals(npwp)) {							
							passed = true;
						} else {
							passed = false;
						}
					}

					if (passed) {
						if (item.getKodekp() == null || item.getKodekp().equals("")) {
							// artinya isi kodekp di data upload boleh apapun juga								
							passed = true;
						} else {
							if (item.getKodekp().equals(kodekp)) {
								passed = true;
							} else {
								passed = false;
							}
						}							
					}			
					
					if (passed) {
						eMappingCustomerProduk = item;
					} else {
						eMappingCustomerProduk = null;
					}
				}
			}
			
			if (eMappingCustomerProduk != null) {
				
				EAdminUploadHeader eAdminUploadHeader = adminUploadHeaderService.findByBk(eMappingCustomerProduk.getId(), tahun, bulan);

				boolean isValid = true;
				if (eAdminUploadHeader == null) {
					// belum pernah upload, tambah data header
					
					eAdminUploadHeader = new EAdminUploadHeader();
					
					eAdminUploadHeader.setMappingCustomerProduk(eMappingCustomerProduk);
					eAdminUploadHeader.setTahun(thnData);
					eAdminUploadHeader.setBulan(blnData);
					eAdminUploadHeader.setFluplo(BaseConstants.YA);					
					eAdminUploadHeader.setFlproi(BaseConstants.TIDAK);
					
					eAdminUploadHeader = adminUploadHeaderService.add(eAdminUploadHeader);
				} else {
					
					if (eAdminUploadHeader.getFlproi().equals(BaseConstants.YA)) {
						// Telah dibuatkan invoice (flproi = Y), proses tidak dilanjutkan
						isValid = false;
					}
//					} else {
//						
//						// hapus detail upload (ai002) yang sudah ada
//						adminUploadDetailService.deleteDetailPerIdHeader(eAdminUploadHeader.getId());			
//						
//						eAdminUploadHeader.setFluplo(BaseConstants.YA);						
//						//eAdminUploadHeader = adminUploadHeaderService.edit(eAdminUploadHeader);						
//					}
				}

				if (isValid) {
					
					EAdminUploadDetail eAdminUploadDetail = adminUploadDetailService.findByBk(eAdminUploadHeader.getId());

					if (eAdminUploadDetail == null) {
						// tambah data detail
						
						eAdminUploadDetail = new EAdminUploadDetail();
						eAdminUploadDetail.setHeader(eAdminUploadHeader);
						eAdminUploadDetail.setFversi(null);
						eAdminUploadDetail.setJkbulini(data.jumlahPegawaiBulanIni);
						eAdminUploadDetail.setRevjkbullalu(data.revisiJumlahPegawaiBulanLalu);
						eAdminUploadDetail.setSeljkbullalu(data.penambahanJumlahPegawaiBulanLalu);
						eAdminUploadDetail.setJnkbulini(data.jumlahNonPegawai);
						eAdminUploadDetail.setRevjnkbullalu(data.revisiJumlahNonPegawaiBulanLalu);
						eAdminUploadDetail.setSeljnkbullalu(data.penambahanJumlahNonPegawaiBulanLalu);
						
						adminUploadDetailService.add(eAdminUploadDetail);					
					} else {

						eAdminUploadDetail.setJkbulini(eAdminUploadDetail.getJkbulini() + data.jumlahPegawaiBulanIni);
						eAdminUploadDetail.setRevjkbullalu(eAdminUploadDetail.getRevjkbullalu() + data.revisiJumlahPegawaiBulanLalu);
						eAdminUploadDetail.setSeljkbullalu(eAdminUploadDetail.getSeljkbullalu() + data.penambahanJumlahPegawaiBulanLalu);
						eAdminUploadDetail.setJnkbulini(eAdminUploadDetail.getJnkbulini() + data.jumlahNonPegawai);
						eAdminUploadDetail.setRevjnkbullalu(eAdminUploadDetail.getRevjnkbullalu() + data.revisiJumlahNonPegawaiBulanLalu);
						eAdminUploadDetail.setSeljnkbullalu(eAdminUploadDetail.getSeljnkbullalu() + data.penambahanJumlahNonPegawaiBulanLalu);
						
					}
					
					// save detail upload
//					EAdminUploadDetail eAdminUploadDetail = new EAdminUploadDetail();
//					eAdminUploadDetail.setHeader(eAdminUploadHeader);
//					eAdminUploadDetail.setFversi(null);
//					eAdminUploadDetail.setJkbulini(data.jumlahPegawaiBulanIni);
//					eAdminUploadDetail.setRevjkbullalu(data.revisiJumlahPegawaiBulanLalu);
//					eAdminUploadDetail.setSeljkbullalu(data.penambahanJumlahPegawaiBulanLalu);
//					eAdminUploadDetail.setJnkbulini(data.jumlahNonPegawai);
//					eAdminUploadDetail.setRevjnkbullalu(data.revisiJumlahNonPegawaiBulanLalu);
//					eAdminUploadDetail.setSeljnkbullalu(data.penambahanJumlahNonPegawaiBulanLalu);
//					
//					adminUploadDetailService.add(eAdminUploadDetail);					
				}
				
				eUploadData.setFlexist(BaseConstants.YA);

			}
			
			int prosen = (count * 98) / size;
			
			System.out.println(">>> " + prosen);
			notificationMainService.sendCounterNotification(CompanyPojo.fromEntity(companyService.get(CurrentUser.getCompanyId())).code,
					UserInfo.fromEntity(userService.get(CurrentUser.getUserId())).loginName, prosen);
			
			count = count + 1;
			
		}
	}

	@Transactional
	private void updateAdminBulanan(String tahun, String bulan) {
		List<ESaldoLive> saldoLive = saldoLiveService.getCustomerLiveDataBelumUpload(tahun, bulan);
		
		String fluplo = BaseConstants.TIDAK;
		if (saldoLive == null) {
			fluplo = BaseConstants.YA;
		}
		
		EAdminBulanan eAdminBulanan = adminBulananService.findByBk(tahun, bulan);
		if (eAdminBulanan == null) {
			eAdminBulanan = new EAdminBulanan();
			eAdminBulanan.setTahun(tahun);
			eAdminBulanan.setBulan(bulan);
			eAdminBulanan.setFluplo(fluplo);
			eAdminBulanan.setFlproi(BaseConstants.TIDAK);
			
			adminBulananService.add(eAdminBulanan);
		} else {
			eAdminBulanan.setFluplo(fluplo);
			//adminBulananService.edit(eAdminBulanan);
		}
		
		notificationMainService.sendCounterNotification(CompanyPojo.fromEntity(companyService.get(CurrentUser.getCompanyId())).code,
				UserInfo.fromEntity(userService.get(CurrentUser.getUserId())).loginName, 99);		
	}
	
	@Transactional
	private void generateNextAdminBulanan(String tahun, String bulan) {
		
		String newTahunBulan = TimeUtil.getNextMonth(tahun + bulan);
		String newTahun = newTahunBulan.substring(0, 4);
		String newBulan = newTahunBulan.substring(4, 6);
		
		EAdminBulanan eAdminBulanan = adminBulananService.findByBk(newTahun, newBulan);
		if (eAdminBulanan == null) {
			
			eAdminBulanan = new EAdminBulanan();
			eAdminBulanan.setTahun(newTahun);
			eAdminBulanan.setBulan(newBulan);
			eAdminBulanan.setFluplo(BaseConstants.TIDAK);
			eAdminBulanan.setFlproi(BaseConstants.TIDAK);
			
			adminBulananService.add(eAdminBulanan);
		}
		
		notificationMainService.sendCounterNotification(CompanyPojo.fromEntity(companyService.get(CurrentUser.getCompanyId())).code,
				UserInfo.fromEntity(userService.get(CurrentUser.getUserId())).loginName, 100);				
	}
}

