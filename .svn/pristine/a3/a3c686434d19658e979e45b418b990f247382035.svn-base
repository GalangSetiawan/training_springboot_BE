package co.id.sofcograha.base.queue.processstatus.entities;

import java.util.Date;
import java.util.UUID;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.PrePersist;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import co.id.sofcograha.base.authentication.CurrentUser;
import co.id.sofcograha.base.exceptions.DevException;
import co.id.sofcograha.base.queue.common.QueueConstants;

@Entity
@Access(AccessType.FIELD)
@Table(name="std_status_proses_detail", uniqueConstraints = @UniqueConstraint(columnNames = { "std_status_proses_id", "nomor_item", "process_status_type" }))
@JsonIgnoreProperties(ignoreUnknown=true)
public class EProcessStatusDetail implements Cloneable {

	@Id
	@Column(name = "id")
	private String id;
	
	@Version
	@Column(name = "version")
	private Long version;

	@ManyToOne
	@JoinColumn(name = "std_status_proses_id")
	public EProcessStatus processStatus;

	@Column(name = "nomor_item")
	private Integer nomorItem;

	@Column(name = "process_status_type")
	@Enumerated(EnumType.STRING)
	private QueueConstants.ProcessStatusType processStatusType;

	@Column(name = "msg_key")
	private String msgKey;

	@Column(name = "msg_param")
	private String msgParam;

	@Column(name = "user_create")
	private String userCreate;

	@Column(name = "creation_time")
	private Date creationTime;

	@Column(name = "user_modify")
	private String userModify;

	@Column(name = "modification_time")
	private Date modificationTime;

	public EProcessStatus getProcessStatus() {
		return processStatus;
	}

	public void setProcessStatus(EProcessStatus processStatus) {
		this.processStatus = processStatus;
	}

	public Integer getNomorItem() {
		return nomorItem;
	}

	public void setNomorItem(Integer nomorItem) {
		this.nomorItem = nomorItem;
	}

	public QueueConstants.ProcessStatusType getProcessStatusType() {
		return processStatusType;
	}

	public void setProcessStatusType(QueueConstants.ProcessStatusType processStatusType) {
		this.processStatusType = processStatusType;
	}

	public String getMsgKey() {
		return msgKey;
	}

	public void setMsgKey(String msgKey) {
		this.msgKey = msgKey;
	}

	public String getMsgParam() {
		return msgParam;
	}

	public void setMsgParam(String msgParam) {
		this.msgParam = msgParam;
	}

	public EProcessStatus root() {
		return this.processStatus;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public Long getVersion() {
		return version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	public String getUserCreate() {
		return userCreate;
	}

	public void setUserCreate(String userCreate) {
		this.userCreate = userCreate;
	}

	public Date getCreationTime() {
		return creationTime;
	}

	public void setCreationTime(Date creationTime) {
		this.creationTime = creationTime;
	}

	public String getUserModify() {
		return userModify;
	}

	public void setUserModify(String userModify) {
		this.userModify = userModify;
	}

	public Date getModificationTime() {
		return modificationTime;
	}

	public void setModificationTime(Date modificationTime) {
		this.modificationTime = modificationTime;
	}
	
	public Object clone() {
		try {
			return super.clone();
		} catch (CloneNotSupportedException e) {
			throw new DevException("Clone not supported", e);
		}
	}
	
	@PrePersist
	private void prePersist() {
		Date currentDateTime = new Date();
		
		this.id = UUID.randomUUID().toString();
		this.userCreate = CurrentUser.getUsername();
		this.creationTime = currentDateTime;
		this.userModify = CurrentUser.getUsername();
		this.modificationTime = currentDateTime;
	}
}