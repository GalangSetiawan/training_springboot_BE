package co.id.sofcograha.domain.invoicing.transaksi.tagihanTerjadwal.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import co.id.sofcograha.base.constants.BaseConstants;
import co.id.sofcograha.base.exceptions.BusinessException;
import co.id.sofcograha.base.extendables.BaseService;
import co.id.sofcograha.base.utils.VersionUtil;
import co.id.sofcograha.base.utils.searchData.SearchParameter;
import co.id.sofcograha.base.utils.searchData.SearchResult;
import co.id.sofcograha.domain.invoicing.masters.training.entities.ETraining;
import co.id.sofcograha.domain.invoicing.masters.training.services.TrainingService;
import co.id.sofcograha.domain.invoicing.transaksi.tagihanTerjadwal.entities.ETagihanTerjadwalDetailTraining;
import co.id.sofcograha.domain.invoicing.transaksi.tagihanTerjadwal.pojos.TagihanTerjadwalDetailTraining;
import co.id.sofcograha.domain.invoicing.transaksi.tagihanTerjadwal.repositories.ETagihanTerjadwalDetailTrainingRepository;

@Service("tagihanTerjadwalDetailTrainingService")
public class TagihanTerjadwalDetailTrainingService extends BaseService {
	
	@Autowired private ETagihanTerjadwalDetailTrainingRepository repo;
	
	@Autowired private TrainingService trainingService;
	// sementara belum dipakai
	//@Autowired private ActionAuthorizationService actionAuthorizationService; 
	
	public TagihanTerjadwalDetailTraining findByBk(String idTi050, Integer nourut) {
		return TagihanTerjadwalDetailTraining.fromEntity(repo.findByBK(idTi050, nourut));
	}

	public SearchResult<ETagihanTerjadwalDetailTraining> search(SearchParameter searchParameter) {
		return repo.search(searchParameter);
	}
	
	@Transactional
	public ETagihanTerjadwalDetailTraining add(ETagihanTerjadwalDetailTraining entity) {
		
		entity.setId(null);
		
		defineDefaultValuesOnAdd(entity);
		
		valRequiredValues(entity);
		// tidak memanggil throwBatchError(), karena simpan transaksi jurnal menganut simpan keseluruhan dan menampilkan error
		// di grid tidak error yang muncul satu per satu.
		//throwBatchError();
		
		manageMinMaxValues(entity);
		//throwBatchError();
		
		manageReferences(entity);
		//throwBatchError();

		valUniquenessOnAdd(entity);
		//throwBatchError();
		
		if (!isAnyBatchErrors()) {
			preAdd(entity);
			ETagihanTerjadwalDetailTraining addedEntity = repo.add(entity);
			postAdd(addedEntity);
			
			return addedEntity;	
		}
			
		//throwBatchError();
		return entity;	

	}
	
	@Transactional
	public ETagihanTerjadwalDetailTraining edit(ETagihanTerjadwalDetailTraining entity) {
		
		valIdVersionRequired(entity.getId(), entity.getVersion());
		valVersion(entity.getId(), entity.getVersion(), entity.getClass().getSimpleName());
		throwBatchError();
		
		valRequiredValues(entity);
		throwBatchError();
		
		manageMinMaxValues(entity);
		throwBatchError();
		
		manageReferences(entity);
		throwBatchError();
		
		valUniquenessOnEdit(entity);
		throwBatchError();
				
		ETagihanTerjadwalDetailTraining toBeSaved = repo.getOne(entity.getId());
		ETagihanTerjadwalDetailTraining oldEntity = (ETagihanTerjadwalDetailTraining) toBeSaved.clone();
		
		defineEditableValues(entity, toBeSaved);
    
		preEdit(toBeSaved, oldEntity);
		toBeSaved = repo.edit(toBeSaved);
		postEdit(toBeSaved, oldEntity);

		throwBatchError();
		return toBeSaved;	
		
	}

	@Transactional
	public void delete (String id, Long version) {
		
		valIdVersionRequired(id, version);
		valVersion(id, version, ETagihanTerjadwalDetailTraining.class.getSimpleName());
		// tidak memanggil throwBatchError(), karena simpan transaksi jurnal menganut simpan keseluruhan dan menampilkan error
		// di grid tidak error yang muncul satu per satu.
		//throwBatchError();
		
		ETagihanTerjadwalDetailTraining toBeDeleted = repo.getOne(id);
		
		valDelete(toBeDeleted);
		//throwBatchError();
		
		preDelete(toBeDeleted);
		repo.delete(toBeDeleted.getId());
		postDelete(toBeDeleted);
		
		//throwBatchError();
		
	}
	
	// terkait manipulasi data
	private void valVersion(String id, Long version, String entityClassName) {
		valEntityExists(id, entityClassName);
		ETagihanTerjadwalDetailTraining dbEntity = repo.getOne(id);
		VersionUtil.check(version, dbEntity.getVersion());
	}
	
	private void valEntityExists(String id, String entityClassName) {
		if (repo.getOne(id) == null) {
			throw new BusinessException("data.not.found", entityClassName, id);
		}
	}
	
	protected void defineDefaultValuesOnAdd(ETagihanTerjadwalDetailTraining entity) {
		if (entity.getVersion() == null) entity.setVersion((long) 1);
	}
	
	protected void defineEditableValues(ETagihanTerjadwalDetailTraining newValues, ETagihanTerjadwalDetailTraining toBeSaved) {

		if (toBeSaved != null) {			
			toBeSaved.setNourut(newValues.getNourut());
			toBeSaved.setHarga(newValues.getHarga());
			toBeSaved.setJumlah(newValues.getJumlah());
			toBeSaved.setBruto(newValues.getBruto());
			toBeSaved.setPctdisc(newValues.getPctdisc());
			toBeSaved.setNilpctdisc(newValues.getNilpctdisc());
			toBeSaved.setNildisc(newValues.getNildisc());
			toBeSaved.setNetto(newValues.getNetto());
			toBeSaved.setTraining(newValues.getTraining());
		}
		else if (toBeSaved == null) {
			defineDefaultValuesOnAdd(newValues);
		}
		
	}
	
	protected void valRequiredValues(ETagihanTerjadwalDetailTraining entity) {
		valRequiredInteger(entity.getNourut(), "tagihanterjadwal.detail.training.nourut.required");
		valRequiredString(entity.getKeterangan(), "tagihanterjadwal.detail.training.keterangan.required");
		valRequiredInteger(entity.getJumlah(), "tagihanterjadwal.detail.training.jumlah.required");
		valRequiredDouble(entity.getHarga(), "tagihanterjadwal.detail.training.harga.required");
		valRequiredDouble(entity.getBruto(), "tagihanterjadwal.detail.training.bruto.required");
		valRequiredDouble(entity.getPctdisc(), "tagihanterjadwal.detail.training.pctdisc.required");
		valRequiredDouble(entity.getNilpctdisc(), "tagihanterjadwal.detail.training.nilpctdisc.required");
		valRequiredDouble(entity.getNildisc(), "tagihanterjadwal.detail.training.nildisc.required");
		valRequiredDouble(entity.getNetto(), "tagihanterjadwal.detail.training.netto.required");
	}
	
	protected void manageMinMaxValues(ETagihanTerjadwalDetailTraining entity) {
		valMinInteger(entity.getNourut(), 0, "tagihanterjadwal.detail.training.nourut.min.length");
		valMaxInteger(entity.getNourut(), 999, "tagihanterjadwal.detail.training.nourut.max.length");
		valMaxString(entity.getKeterangan(), 200, "tagihanterjadwal.detail.training.keterangan.max.length");
		valMinInteger(entity.getJumlah(), 0, "tagihanterjadwal.detail.training.jumlah.min.length");
		valMaxInteger(entity.getJumlah(), 99999, "tagihanterjadwal.detail.training.jumlah.max.length");
		valMinDouble(entity.getHarga(), 0D, "tagihanterjadwal.detail.training.harga.min.length");
		valMaxDouble(entity.getHarga(), 999999999D, "tagihanterjadwal.detail.training.harga.max.length");
		valMinDouble(entity.getPctdisc(), 0D, "tagihanterjadwal.detail.training.pctdisc.min.length");
		valMaxDouble(entity.getPctdisc(), 9999D, "tagihanterjadwal.detail.training.pctdisc.max.length");
		valMinDouble(entity.getNilpctdisc(), 0D, "tagihanterjadwal.detail.training.nilpctdisc.min.length");
		valMaxDouble(entity.getNilpctdisc(), 999999999D, "tagihanterjadwal.detail.training.nilpctdisc.max.length");
		valMinDouble(entity.getNildisc(), 0D, "tagihanterjadwal.detail.training.nildisc.min.length");
		valMaxDouble(entity.getNildisc(), 999999999D, "tagihanterjadwal.detail.training.nildisc.max.length");
		valMinDouble(entity.getNetto(), 0D, "tagihanterjadwal.detail.training.netto.min.length");
		valMaxDouble(entity.getNetto(), 999999999D, "tagihanterjadwal.detail.training.netto.max.length");
	}

	protected void manageReferences(ETagihanTerjadwalDetailTraining entity) {
		if (entity.getTraining() != null) {
			ETraining eFromDb = trainingService.get(entity.getTraining().getId());
			if (eFromDb != null) {
				if (eFromDb.getFlakt().equals(BaseConstants.YA)) {
					entity.setTraining(eFromDb);
				} else {
					batchError("training.not.active");
				}
			} else {
				batchError("training.not.found");
			}			
		}
	}

	protected void valDelete(ETagihanTerjadwalDetailTraining toBeDeleted) {	}
	
	protected void valUniquenessOnAdd(ETagihanTerjadwalDetailTraining addedEntity) {
		ETagihanTerjadwalDetailTraining entityFromDb = repo.findByBK(addedEntity.getHeader().getId(), addedEntity.getNourut());
		if (entityFromDb != null) {
			throw new BusinessException("tagihanterjadwal.detail.training.bk", addedEntity.getNourut());
		}
	}

	protected void valUniquenessOnEdit(ETagihanTerjadwalDetailTraining editedEntity) {
		ETagihanTerjadwalDetailTraining entityFromDb = repo.findByBK(editedEntity.getHeader().getId(), editedEntity.getNourut());
		if (entityFromDb != null) {
			if (!editedEntity.getId().equals(entityFromDb.getId())) {
				throw new BusinessException("tagihanterjadwal.detail.training.bk", editedEntity.getNourut());
			}
		}
	}

	protected void preAdd(ETagihanTerjadwalDetailTraining entity) {
		// salah satu contoh penggunaannya (di gaji.id) :
		// - set nomor urut item berdasar total data + 1 (TrxInputKaryawanAttachFileService,
		//   TrxInputKaryawanDetailPelatihanService)
		// - menambahkan thumbnail bagi foto di TrxInputKaryawanPhotoService, EmployeePhotoService
		// NB: terus terang bingung membedakan method ini dengan method defineDefaultValuesOnAdd
	}
	
	protected void postAdd(ETagihanTerjadwalDetailTraining entity) {
		// salah satu contoh penggunaannya (di gaji.id) :
		// - menandai transaksi ini sebagai transaksi yang terkonfirmasi
		// - mengeksekusi notifikasi (pada SysNotificationService)
		// - edit file admin untuk menandai slip gaji di release
		// - manambah saldo surat ketidakhadiran yang belum konfirmasi
		// - update absensi, edit jadwal kerja, jalankan sp utk proses verfikasi absensi (TrxOverrideJadwalKerjaDetailService)
		// boleh dibilang ini bisa digunakan untuk update saldo-saldo/sejarah/admin/konfirmasi
	}
	
	protected void preEdit(ETagihanTerjadwalDetailTraining toBeSaved, ETagihanTerjadwalDetailTraining oldEntity) {
		// penjelasan untuk penggunaan mirip dengan preAdd
	}
	
	protected void postEdit(ETagihanTerjadwalDetailTraining toBeSaved, ETagihanTerjadwalDetailTraining oldEntity) {
		// penjelasan untuk penggunaan mirip dengan postAdd
	}
	
	protected void preDelete(ETagihanTerjadwalDetailTraining entity) {
		// penjelasan untuk penggunaan mirip dengan preEdit
	}
	
	protected void postDelete(ETagihanTerjadwalDetailTraining entity) {
		// penjelasan untuk penggunaan mirip dengan postAdd
	}
	// ----
	
	/* mungkin berguna nanti waktu sudah diputuskan bagaimana mekanisme teknis otorisasinya	
	private void valAuthAdd() {
		if(!actionAuthorizationService.valHakAdd()) {
			error("NoRightToAdd");
		}
	}
   
	private void valAuthEdit() {
		if(!actionAuthorizationService.valHakEdit()) {
			error("NoRightToChange");
		}
	}
   
	private void valAuthDelete() {
		if(!actionAuthorizationService.valHakDelete()) {
			error("NoRightToDelete");
		}
	}
	*/
}
