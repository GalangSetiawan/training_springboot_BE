package co.id.sofcograha.base.queue.common;

import java.util.List;

import javax.jms.ConnectionFactory;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jms.annotation.EnableJms;
import org.springframework.jms.annotation.JmsListenerConfigurer;
import org.springframework.jms.config.DefaultJmsListenerContainerFactory;
import org.springframework.jms.config.JmsListenerEndpointRegistrar;
import org.springframework.jms.config.SimpleJmsListenerEndpoint;
import org.springframework.util.ErrorHandler;

import co.id.sofcograha.base.master.company.services.CompanyService;
import co.id.sofcograha.base.master.user.services.UserService;
import co.id.sofcograha.base.queue.queuenotification.services.SysNotificationService;

@EnableJms
@Configuration
public class JMSConfiguration implements JmsListenerConfigurer {

	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Autowired
	private ConnectionFactory connectionFactory;
	
	@Autowired
	private QueueUtilService queueUtilService;
	
	@Autowired
	private ApplicationContext applicationContext;
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private CompanyService companyService;
	
	@Autowired
	private SysNotificationService sysNotificationService;
	
	@Bean
    public DefaultJmsListenerContainerFactory jmsListenerContainerFactory() {
        DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();
        factory.setConnectionFactory(connectionFactory);
        factory.setErrorHandler(new JMSErrorHandler());
//        factory.setDestinationResolver(destinationResolver());
//        factory.setSessionTransacted(true);
        factory.setConcurrency("1");
        return factory;
    }
	
	@Override
	public void configureJmsListeners(JmsListenerEndpointRegistrar registrar) {
		List<String> listActiveQueueDestination = queueUtilService.getListActiveQueueDestination();
		for (String queueDestination : listActiveQueueDestination) {
			SimpleJmsListenerEndpoint endpoint = new SimpleJmsListenerEndpoint();
			endpoint.setId(queueDestination + "_ID");
			endpoint.setDestination(queueDestination);
			endpoint.setMessageListener(new QueueDefaultConsumer(queueUtilService, sysNotificationService, userService, companyService, applicationContext));
			
			registrar.registerEndpoint(endpoint);
		}
	}
	
	public class JMSErrorHandler implements ErrorHandler {

		@Override
		public void handleError(Throwable t) {
			logger.error("Queue ERROR", t);
		}
		
	}
	
}
