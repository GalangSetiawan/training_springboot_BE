package co.id.sofcograha.domain.invoicing.proses.hitung.services;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import co.id.sofcograha.base.extendables.BaseService;
import co.id.sofcograha.domain.invoicing.admin.diskon.entities.EAdminDiskon;
import co.id.sofcograha.domain.invoicing.admin.diskon.services.AdminDiskonService;
import co.id.sofcograha.domain.invoicing.admin.renewal.pojos.AdminRenewalDetTghSubDetSkemaTarif;
import co.id.sofcograha.domain.invoicing.masters.customerProdukTarif.pojos.CustomerProdukTarifComplete;
import co.id.sofcograha.domain.invoicing.masters.customerProdukTarif.pojos.CustomerProdukTarifDetail;
import co.id.sofcograha.domain.invoicing.masters.customerProdukTarif.services.CustomerProdukTarifCompleteService;
import co.id.sofcograha.domain.invoicing.masters.customerProdukTarif.services.CustomerProdukTarifDetailService;
import co.id.sofcograha.domain.invoicing.masters.diskonkhusus.pojos.DiskonKhususHeader;
import co.id.sofcograha.domain.invoicing.masters.diskonkhusus.services.DiskonKhususHeaderService;
import co.id.sofcograha.domain.invoicing.masters.grupdiskon.pojos.GrupDiskonDetail;
import co.id.sofcograha.domain.invoicing.masters.grupdiskon.services.GrupDiskonDetailService;
import co.id.sofcograha.domain.invoicing.masters.skemaharga.pojos.SkemaHargaDetail;
import co.id.sofcograha.domain.invoicing.masters.skemaharga.services.SkemaHargaDetailService;
import co.id.sofcograha.domain.invoicing.proses.hitung.pojos.HitungTarifModel;
import co.id.sofcograha.domain.invoicing.transaksi.invoice.data.pojos.InvoiceSubDetailPerhitunganDiskon;
import co.id.sofcograha.domain.invoicing.transaksi.invoice.data.pojos.InvoiceSubDetailPerhitunganSkemaTarif;

@Service
public class HitungService extends BaseService {
  
	@Autowired private CustomerProdukTarifCompleteService customerProdukTarifCompleteService;
	@Autowired private CustomerProdukTarifDetailService customerProdukTarifDetailService;
	@Autowired private SkemaHargaDetailService skemaHargaDetailService;
	@Autowired private GrupDiskonDetailService grupDiskonDetailService;
	@Autowired private DiskonKhususHeaderService diskonKhususHeaderService;
	@Autowired private AdminDiskonService adminDiskonService;
	
	public HitungTarifModel hitungTarifInitialPerCustomerProduk(String idMi010, String idMi001, Integer jumkar, String tanggal, Integer unitPengali) {
		
		HitungTarifModel result = new HitungTarifModel();
		result.jumkar = jumkar;
		result.harga = 0.0;
	
		CustomerProdukTarifComplete tarif = customerProdukTarifCompleteService.findByBk(idMi010, idMi001);
		
		// SKEMA HARGA
		// prioritas pertama ambil untuk yang belum ada tanggal start dan end nya
		// (karena logikanya invoice initial dilakukan sebelum tanggal live diisi, sedangkan tanggal live = tanggal start)
		// 9 Juni 2021
		// pencarian skema tarif menggunakan cara ambil nomor urut terkecil,
		// karena skema tarif ini sudah disusun dari awal (di quotation sudah tertera)
		CustomerProdukTarifDetail detailTarifSkemaHarga = customerProdukTarifDetailService.getByCustProdukAndJenisTarifTanpaRange(tarif.header.customer.id, tarif.header.produk.id, "SKEMA");
		
		// prioritas kedua ambil untuk yang tanggal berada di range
		if (detailTarifSkemaHarga == null) {
			detailTarifSkemaHarga = customerProdukTarifDetailService.getByCustProdukAndJenisTarifDgnRange(tarif.header.customer.id, tarif.header.produk.id, "SKEMA", tanggal);
		}
		
//		List<HitungTarifDetailPerhitungan> detailPerhitungan = new ArrayList<HitungTarifDetailPerhitungan>();
//		List<HitungTarifDetailDiskon> detailDiskon = new ArrayList<HitungTarifDetailDiskon>();
		List<InvoiceSubDetailPerhitunganSkemaTarif> detailPerhitungan = new ArrayList<InvoiceSubDetailPerhitunganSkemaTarif>();
		List<InvoiceSubDetailPerhitunganDiskon> detailDiskon = new ArrayList<InvoiceSubDetailPerhitunganDiskon>();
		
		Integer nouskm = null;
		if (detailTarifSkemaHarga != null) {
			// Ada detail tarif skema harga di master customer tarif produk, jadi lanjutkan prosesnya
			
			nouskm = detailTarifSkemaHarga.nourut;
			String tipeSkemaHarga = detailTarifSkemaHarga.skemaHarga.tipe;
			
			// ambil data detail overhead master customer tarif produk, urutkan berdasarkan nilai Max
			List<SkemaHargaDetail> overheads = skemaHargaDetailService.getByIdAndKelTarifSortByMax(detailTarifSkemaHarga.skemaHarga.id, "OVERH");
			  
			// ambil data detail tarif utama master customer tarif produk, urutkan berdasarkan nilai Max
			List<SkemaHargaDetail> utamas = skemaHargaDetailService.getByIdAndKelTarifSortByMax(detailTarifSkemaHarga.skemaHarga.id, "UTAMA");

			// ambil tarif overhead				
            Double hargaOverhead = 0.0;
            Integer jumlah = 1;
            String ketOverhead = "";
            boolean overheadFound = false;
            for (SkemaHargaDetail overhead : overheads) {
            	if (jumkar >= overhead.min && jumkar <= overhead.max) {
            		jumlah = overhead.max - overhead.min + 1;
            		hargaOverhead = overhead.harga;
            		ketOverhead = overhead.min + " - " + overhead.max;
                    overheadFound = true;
            		break;
            	} else {
            		if (jumkar >= overhead.max) {
                		jumlah = overhead.max - overhead.min + 1;
            			hargaOverhead = overhead.harga;
                		ketOverhead = overhead.min + " - " + overhead.max;
            		}
            	}
            }

            int nourut = 1;
            
			if (tipeSkemaHarga.equals("PRG")) {
				// PROGRESIF
				
	            if (!overheads.isEmpty()) {
	                InvoiceSubDetailPerhitunganSkemaTarif perhitungan = new InvoiceSubDetailPerhitunganSkemaTarif();
	                perhitungan.nourut = nourut;
	                perhitungan.jnstrf = "OVERH";
	                perhitungan.keterangan = ketOverhead;
	                perhitungan.jumlah = jumlah;
	                perhitungan.harga = hargaOverhead;
	                perhitungan.bruto = hargaOverhead;
	                perhitungan.netto = hargaOverhead;
	                detailPerhitungan.add(perhitungan);
	                nourut = nourut + 1;
	    			
	                result.harga = hargaOverhead;            	
	            }

				// ambil tarif utama				
	            for (SkemaHargaDetail utama : utamas) {
	            	if (jumkar >= utama.min && jumkar >= utama.max) {
	            		
//	    	            perhitungan = new HitungTarifDetailPerhitungan();
	            		InvoiceSubDetailPerhitunganSkemaTarif perhitungan = new InvoiceSubDetailPerhitunganSkemaTarif();
	    	            perhitungan.nourut = nourut;
	    	            perhitungan.jnstrf = "UTAMA";
	    	            perhitungan.keterangan = utama.min + " - " + utama.max;
	    	            perhitungan.jumlah = (utama.max - utama.min + 1);
	    	            perhitungan.harga = utama.harga;
	    	            perhitungan.bruto = perhitungan.jumlah * utama.harga;
	    	            perhitungan.netto = perhitungan.jumlah * utama.harga;	    	            
	    	            detailPerhitungan.add(perhitungan);
	    	            nourut = nourut + 1;
	    	            
	    	            result.harga = result.harga + (perhitungan.jumlah * utama.harga);

	            	} else {
	            		if (jumkar >= utama.min && jumkar < utama.max) {

//		    	            perhitungan = new HitungTarifDetailPerhitungan();
	            			InvoiceSubDetailPerhitunganSkemaTarif perhitungan = new InvoiceSubDetailPerhitunganSkemaTarif();
		    	            perhitungan.nourut = nourut;
		    	            perhitungan.jnstrf = "UTAMA";
		    	            perhitungan.keterangan = utama.min + " - " + utama.max;
		    	            perhitungan.jumlah = (jumkar - utama.min + 1);
		    	            perhitungan.harga = utama.harga;
		    	            perhitungan.bruto = perhitungan.jumlah * utama.harga;
		    	            perhitungan.netto = perhitungan.jumlah * utama.harga;	    	            
		    	            detailPerhitungan.add(perhitungan);
		    	            nourut = nourut + 1;
		    	            
		    	            result.harga = result.harga + (perhitungan.jumlah * utama.harga);
	            		}
	            	}
	            }
			}
		  
			if (tipeSkemaHarga.equals("NONPRG")) {
				// NON PROGRESIF
				
	            if (!overheads.isEmpty() && overheadFound) {
	                InvoiceSubDetailPerhitunganSkemaTarif perhitungan = new InvoiceSubDetailPerhitunganSkemaTarif();
	                perhitungan.nourut = nourut;
	                perhitungan.jnstrf = "OVERH";
	                perhitungan.keterangan = ketOverhead;
	                perhitungan.jumlah = jumkar;
	                perhitungan.harga = hargaOverhead;
	                perhitungan.bruto = hargaOverhead;
	                perhitungan.netto = hargaOverhead;
	                detailPerhitungan.add(perhitungan);
	                nourut = nourut + 1;
	    			
	                result.harga = hargaOverhead;            	
	            }
	            
	            if (!overheadFound) {
					// ambil tarif utama				
		            for (SkemaHargaDetail utama : utamas) {
		            	if (jumkar >= utama.min && jumkar <= utama.max) {
		            		
		            		InvoiceSubDetailPerhitunganSkemaTarif perhitungan = new InvoiceSubDetailPerhitunganSkemaTarif();
		    	            perhitungan.nourut = nourut;
		    	            perhitungan.jnstrf = "UTAMA";
		    	            perhitungan.keterangan = utama.min + " - " + utama.max;
		    	            //perhitungan.jumlah = (jumkar - utama.min + 1);
		    	            perhitungan.jumlah = jumkar;
		    	            perhitungan.harga = utama.harga;
		    	            perhitungan.bruto = perhitungan.jumlah * utama.harga;
		    	            perhitungan.netto = perhitungan.jumlah * utama.harga;	    	            
		    	            detailPerhitungan.add(perhitungan);
		    	            nourut = nourut + 1;

		    	            result.harga = result.harga + (perhitungan.jumlah * utama.harga);
		    	            break;

		            	}
		            }	            	
	            }
			}
			
			overheads.addAll(utamas);
			
            result.detailSkema = detailPerhitungan;
			//result.detailSkemaHarga = overheads;
		} else {
			// tidak ada data tarif yang ditemukan
			nouskm = 0;
			result.harga = 0.0;
		}
		
		result.nouskm = nouskm;
		// hitung bruto untuk satu tahun -> ini tergantung tipe tarifnya to, kalo 1 tahun ya 12 bulan kalo 2 tahun ya 24
		// kalo 6 bulan ya 6
		int jumlahPengali = 0;
		if (tarif.header.satsiklus.equals("TAHUN")) {
			jumlahPengali = 12 * tarif.header.jumsiklus;
		}
		
		if (tarif.header.satsiklus.equals("BULAN")) {
			jumlahPengali = 1 * tarif.header.jumsiklus;
		}
		
		result.pengali = jumlahPengali;
		//result.bruto = jumlahPengali * result.harga;
		result.bruto = unitPengali * jumlahPengali * result.harga;
		
		result.jumsiklus = tarif.header.jumsiklus;
		result.satsiklus = tarif.header.satsiklus;
		
		int nourutDiskon = 1;
		Double nilai = result.bruto;
		Double totalDiskon = 0.0;
		
		// DISKON (%)
		// prioritas pertama ambil untuk yang belum ada tanggal start dan end nya
		// (karena logikanya invoice initial dilakukan sebelum tanggal live diisi, sedangkan tanggal live = tanggal start)
		CustomerProdukTarifDetail diskonProsen = customerProdukTarifDetailService.getByCustProdukAndJenisTarifTanpaRange(tarif.header.customer.id, tarif.header.produk.id, "PCTDIS");
		
		// prioritas kedua ambil untuk yang tanggal berada di range
		if (diskonProsen == null) {
			diskonProsen = customerProdukTarifDetailService.getByCustProdukAndJenisTarifDgnRange(tarif.header.customer.id, tarif.header.produk.id, "PCTDIS", tanggal);
		}

		if (diskonProsen != null) {
			if (diskonProsen.pctdisc > 0.0) {
				Double nildasar = nilai;
				Double diskon = Math.floor((diskonProsen.pctdisc * nilai) / 100.0);
				totalDiskon = totalDiskon + diskon;
				nilai = nilai - diskon;
				
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "PRODIS";
	            dataDiskon.nouds = diskonProsen.nourut;
	            dataDiskon.keterangan = "Discount (%)";
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.pctdisc = diskonProsen.pctdisc;
	            dataDiskon.nildisc = diskon;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);
	            
	            nourutDiskon = nourutDiskon + 1;
			}
		}
	  
		// DISKON (NILAI)
		// prioritas pertama ambil untuk yang belum ada tanggal start dan end nya
		// (karena logikanya invoice initial dilakukan sebelum tanggal live diisi, sedangkan tanggal live = tanggal start)
		CustomerProdukTarifDetail diskonNilai = customerProdukTarifDetailService.getByCustProdukAndJenisTarifTanpaRange(tarif.header.customer.id, tarif.header.produk.id, "NILDIS");
		
		// prioritas kedua ambil untuk yang tanggal berada di range
		if (diskonNilai == null) {
			diskonNilai = customerProdukTarifDetailService.getByCustProdukAndJenisTarifDgnRange(tarif.header.customer.id, tarif.header.produk.id, "NILDIS", tanggal);
		}

		if (diskonNilai != null) {
			if (diskonNilai.nildisc > 0.0) {
				Double nildasar = nilai;
				totalDiskon = totalDiskon + diskonNilai.nildisc;
				nilai = nilai - diskonNilai.nildisc;
				
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "NILDIS";
	            dataDiskon.nouds = diskonNilai.nourut;
	            dataDiskon.keterangan = "Discount (nilai)";
	            dataDiskon.pctdisc = 0.0;
	            dataDiskon.nildisc = diskonNilai.nildisc;
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);
	            
	            nourutDiskon = nourutDiskon + 1;
			}				
		}

		// GRUP DISKON
		// di master tarif, grup diskon hanya ada satu record dan tidak punya periode start stop
		// kenapa ? karena :
		// 1. durasi ada di master grup diskon sedangkan periode ada di master tarif, hal ini membuat rumit cara update
		//    tgl start stop di master tarif
		// 2. 1 customer pada dasarnya ya punya satu grup diskon, masak 1 customer dia menjadi grup dari 2 PT besar ?
		//CustomerProdukTarifDetail detailGrupDiscount = customerProdukTarifDetailService.getByCustProdukAndJenisTarifTanpaRange(tarif.header.customer.id, tarif.header.produk.id, "GRPDIS");
		CustomerProdukTarifDetail detailGrupDiscount = customerProdukTarifDetailService.getByCustProdukForDiskonGrup(tarif.header.customer.id, tarif.header.produk.id);
		
		// prioritas kedua ambil untuk yang tanggal berada di range
		//if (detailGrupDiscount == null) {
		//	detailGrupDiscount = customerProdukTarifDetailService.getByCustProdukAndJenisTarifDgnRange(tarif.header.customer.id, tarif.header.produk.id, "GRPDIS", tanggal);
		//}
	  
		if (detailGrupDiscount != null) {
			
			// ambil data detail overhead master customer tarif produk, urutkan berdasarkan nilai Max
			GrupDiskonDetail grupDiskon = grupDiskonDetailService.getFirstDetail(detailGrupDiscount.grupDiskon.id);
			
			if (grupDiskon.pctdisc > 0.0) {
				Double nildasar = nilai;
				Double diskon = Math.floor((grupDiskon.pctdisc * nilai) / 100.0);
				totalDiskon = totalDiskon + diskon;
				nilai = nilai - diskon;
				
//	            HitungTarifDetailDiskon dataDiskon = new HitungTarifDetailDiskon();
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "GRPPRODIS";
	            dataDiskon.nouds = grupDiskon.nourut;
	            dataDiskon.keterangan = "Discount Grup (%)";
	            dataDiskon.pctdisc = grupDiskon.pctdisc;
	            dataDiskon.nildisc = diskon;
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);
				
	            nourutDiskon = nourutDiskon + 1;
			}

			if (grupDiskon.nildisc > 0.0) {
				Double nildasar = nilai;
				totalDiskon = totalDiskon + grupDiskon.nildisc;
				nilai = nilai - grupDiskon.nildisc;
				
//	            HitungTarifDetailDiskon dataDiskon = new HitungTarifDetailDiskon();
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "GRPNILDIS";
	            dataDiskon.nouds = grupDiskon.nourut;
	            dataDiskon.keterangan = "Discount Grup (nilai)";
	            dataDiskon.pctdisc = 0.0;
	            dataDiskon.nildisc = grupDiskon.nildisc;
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);
				
	            nourutDiskon = nourutDiskon + 1;
			}
		}
		
//		
		// DISKON KHUSUS
		DiskonKhususHeader diskonKhusus = diskonKhususHeaderService.getFindByCustomerAndTanggal(tarif.header.customer.id, tanggal);
		
		if (diskonKhusus != null) {
			if (diskonKhusus.pctdisc > 0.0) {
				Double nildasar = nilai;
				Double diskon = Math.floor((diskonKhusus.pctdisc * nilai) / 100.0);
				totalDiskon = totalDiskon + diskon;
				nilai = nilai - diskon;
				
//	            HitungTarifDetailDiskon dataDiskon = new HitungTarifDetailDiskon();
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "SPCPRODIS";
	            dataDiskon.keterangan = "Discount Khusus (%)";
	            dataDiskon.nouds = 0;
	            dataDiskon.pctdisc = diskonKhusus.pctdisc;
	            dataDiskon.nildisc = diskon;
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);
				
	            nourutDiskon = nourutDiskon + 1;
			}
			
			if (diskonKhusus.nildisc > 0.0) {
				Double nildasar = nilai;
				totalDiskon = totalDiskon + diskonKhusus.nildisc;
				nilai = nilai - diskonKhusus.nildisc;
				
//	            HitungTarifDetailDiskon dataDiskon = new HitungTarifDetailDiskon();
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "SPCNILDIS";
	            dataDiskon.keterangan = "Discount Khusus (nilai)";
	            dataDiskon.nouds = 0;
	            dataDiskon.pctdisc = 0.0;
	            dataDiskon.nildisc = diskonKhusus.nildisc;
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);
				
	            nourutDiskon = nourutDiskon + 1;
			}			
		}
		
		//result.diskonKhusus = diskonKhusus;

		// update terkait diskon ke result
		result.detailDiskon = detailDiskon;
		result.diskon = totalDiskon;
		result.netto = nilai;
	  
		return result;
	}
  
	public HitungTarifModel hitungTarifAdjusmentPerCustomerProduk(String idMi010, String idMi001, String tahun, String bulan, Integer totJumkar, Integer jumkar) {
		
		int absolutTotalKary = Math.abs(jumkar);
		
		HitungTarifModel result = new HitungTarifModel();
		result.jumkar = jumkar;
		result.harga = 0.0;
	
		CustomerProdukTarifComplete tarif = customerProdukTarifCompleteService.findByBk(idMi010, idMi001);
	
		// Hitung adjustment dilakukan setelah customer + produk live, jadi pasti dicari ke master tarif dengan acuan tanggal

		// SKEMA HARGA
		CustomerProdukTarifDetail detailTarifSkemaHarga = customerProdukTarifDetailService.getByCustProdukAndJenisTarifDgnRange(tarif.header.customer.id, tarif.header.produk.id, "SKEMA", tahun + bulan + "01");
		
		List<InvoiceSubDetailPerhitunganSkemaTarif> detailPerhitungan = new ArrayList<InvoiceSubDetailPerhitunganSkemaTarif>();
		List<InvoiceSubDetailPerhitunganDiskon> detailDiskon = new ArrayList<InvoiceSubDetailPerhitunganDiskon>();
		
		Integer nouskm = null;
		if (detailTarifSkemaHarga != null) {
			// Ada detail tarif skema harga di master customer tarif produk, jadi lanjutkan prosesnya
			
			nouskm = detailTarifSkemaHarga.nourut;
			
			// ambil data detail overhead master customer tarif produk, urutkan berdasarkan nilai Max
			List<SkemaHargaDetail> overheads = skemaHargaDetailService.getByIdAndKelTarifSortByMax(detailTarifSkemaHarga.skemaHarga.id, "OVERH");

			// ambil data detail tarif utama master customer tarif produk, urutkan berdasarkan nilai Max
			List<SkemaHargaDetail> utamas = skemaHargaDetailService.getByIdAndKelTarifSortByMax(detailTarifSkemaHarga.skemaHarga.id, "UTAMA");

            // Perhitungan flat
			// bila jumlah kary tidak lebih dari tarif overhead, ambil tarif dari tarif overhead
			// ambil tarif overhead				
            Double hargaOverhead = 0.0;
            Integer jumlah = 1;
            String ketOverhead = "";
            boolean isOverhead = false;
            for (SkemaHargaDetail overhead : overheads) {
            	if (absolutTotalKary >= overhead.min && absolutTotalKary <= overhead.max) {
            		jumlah = overhead.max - overhead.min + 1;
            		hargaOverhead = overhead.harga;
            		ketOverhead = overhead.min + " - " + overhead.max;
            		isOverhead = true;
            		break;
            	}
            }			
			
            if (isOverhead) {
                int nourut = 1;
                InvoiceSubDetailPerhitunganSkemaTarif perhitungan = new InvoiceSubDetailPerhitunganSkemaTarif();
	            perhitungan.nourut = nourut;
	            perhitungan.jnstrf = "OVERH";
	            perhitungan.keterangan = ketOverhead;
	            perhitungan.jumlah = absolutTotalKary;
	            perhitungan.harga = hargaOverhead;
	            perhitungan.bruto = hargaOverhead;
	            perhitungan.netto = hargaOverhead;	    	            
	            detailPerhitungan.add(perhitungan);
        		
	            result.harga = hargaOverhead;
	            if (result.jumkar < 0) {
		    		result.bruto = result.harga * -1;	            	
	            } else {
		    		result.bruto = result.harga;
	            }
            } else {
    			// ambil tarif utama				
                int nourut = 1;
                for (SkemaHargaDetail utama : utamas) {
                	//if (totalKary >= utama.min && totalKary <= utama.max) {
                	if (absolutTotalKary >= utama.min && absolutTotalKary <= utama.max) {
                	
                		InvoiceSubDetailPerhitunganSkemaTarif perhitungan = new InvoiceSubDetailPerhitunganSkemaTarif();
        	            perhitungan.nourut = nourut;
        	            perhitungan.jnstrf = "UTAMA";
        	            perhitungan.keterangan = utama.min + " - " + utama.max;
        	            //perhitungan.jumlah = totalKary;
        	            //perhitungan.jumlah = absolutTotalKary;
        	            perhitungan.jumlah = result.jumkar;
        	            perhitungan.harga = utama.harga;
        	            perhitungan.bruto = utama.harga;
        	            perhitungan.netto = utama.harga;	    	            
        	            detailPerhitungan.add(perhitungan);
                		
        	            result.harga = utama.harga;
        	    		result.bruto = result.jumkar * result.harga;

                		break;

                	}
                }            	
            }            
			
			/*
            int nourut = 1;
            InvoiceSubDetailPerhitunganSkemaTarif perhitungan = new InvoiceSubDetailPerhitunganSkemaTarif();
            
			// ambil tarif utama				
            for (SkemaHargaDetail utama : utamas) {
            	if (totJumkar >= utama.min && totJumkar <= utama.max) {
            		
                    perhitungan = new InvoiceSubDetailPerhitunganSkemaTarif();
    	            perhitungan.nourut = nourut;
    	            perhitungan.jnstrf = "UTAMA";
    	            perhitungan.keterangan = utama.min + " - " + utama.max;
    	            perhitungan.jumlah = totJumkar;
    	            perhitungan.harga = utama.harga;
    	            //perhitungan.bruto = perhitungan.jumlah * utama.harga;
    	            perhitungan.bruto = utama.harga;
    	            //perhitungan.netto = perhitungan.jumlah * utama.harga;	    	            
    	            perhitungan.netto = utama.harga;	    	            
    	            detailPerhitungan.add(perhitungan);
    	            nourut = nourut + 1;

    	            result.harga = result.harga + utama.harga;
    	            break;

            	}
            }
            */
			
            result.detailSkema = detailPerhitungan;

		} else {
			// tidak ada data tarif yang ditemukan
			nouskm = 0;
			result.harga = 0.0;
		}
		
		result.nouskm = nouskm;
		//result.bruto = result.jumkar * result.harga;
		
		int nourutDiskon = 1;
		Double nilai = result.bruto;
		Double totalDiskon = 0.0;
		
		// DISKON
		List<EAdminDiskon> listDiskon = adminDiskonService.getByCustomerProdukDanTahunBulan(idMi010, idMi001, tahun, bulan);

		for (EAdminDiskon eAdminDiskon : listDiskon) {

			if (eAdminDiskon.getJnsdis().equals("PCTDIS")) {
				Double nildasar = nilai;
				Double diskon = Math.floor((eAdminDiskon.getPctdisc() * nilai) / 100.0);
				totalDiskon = totalDiskon + diskon;
				nilai = nilai - diskon;
				
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "PRODIS";
	            dataDiskon.nouds = eAdminDiskon.getNouds();
	            dataDiskon.keterangan = "Discount (%)";
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.pctdisc = eAdminDiskon.getPctdisc();
	            dataDiskon.nildisc = diskon;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);
				
	            nourutDiskon = nourutDiskon + 1;
			}
			
			if (eAdminDiskon.getJnsdis().equals("NILDIS")) {
				Double nildasar = nilai;
				totalDiskon = totalDiskon + eAdminDiskon.getNildisc();
				nilai = nilai - eAdminDiskon.getNildisc();
				
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "NILDIS";
	            dataDiskon.nouds = eAdminDiskon.getNouds();
	            dataDiskon.keterangan = "Discount (nilai)";
	            dataDiskon.pctdisc = 0.0;
	            dataDiskon.nildisc = eAdminDiskon.getNildisc();
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);

	            nourutDiskon = nourutDiskon + 1;	    				
			}

			if (eAdminDiskon.getJnsdis().equals("GRPDIS1")) {
				Double nildasar = nilai;
				Double diskon = Math.floor((eAdminDiskon.getPctdisc() * nilai) / 100.0);
				totalDiskon = totalDiskon + diskon;
				nilai = nilai - diskon;
				
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "GRPPRODIS";
	            dataDiskon.nouds = eAdminDiskon.getNouds();
	            dataDiskon.keterangan = "Discount Grup (%)";
	            dataDiskon.pctdisc = eAdminDiskon.getPctdisc();
	            dataDiskon.nildisc = diskon;
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);

	            nourutDiskon = nourutDiskon + 1;	    				
			}
			
			if (eAdminDiskon.getJnsdis().equals("GRPDIS2")) {
				Double nildasar = nilai;
				totalDiskon = totalDiskon + eAdminDiskon.getNildisc();
				nilai = nilai - eAdminDiskon.getNildisc();
				
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "GRPPRODIS";
	            dataDiskon.nouds = eAdminDiskon.getNouds();
	            dataDiskon.keterangan = "Discount Grup (nilai)";
	            dataDiskon.pctdisc = 0.0;
	            dataDiskon.nildisc = eAdminDiskon.getNildisc();
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);

	            nourutDiskon = nourutDiskon + 1;	    				
			}
			
			if (eAdminDiskon.getJnsdis().equals("SPCDIS")) {
    			if (eAdminDiskon.getPctdisc() > 0.0) {
    				Double nildasar = nilai;
    				Double diskon = Math.floor((eAdminDiskon.getPctdisc() * nilai) / 100.0);
    				totalDiskon = totalDiskon + diskon;
    				nilai = nilai - diskon;
    				
    				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
    				
    	            dataDiskon.nourut = nourutDiskon;
    	            dataDiskon.jenis = "SPCPRODIS";
    	            dataDiskon.keterangan = "Discount Khusus (%)";
    	            dataDiskon.nouds = 0;
    	            dataDiskon.pctdisc = eAdminDiskon.getPctdisc();
    	            dataDiskon.nildisc = diskon;
    	            dataDiskon.nildasar = nildasar;
    	            dataDiskon.netto = nilai;
    	            detailDiskon.add(dataDiskon);

    	            nourutDiskon = nourutDiskon + 1;
    			}
    			
    			if (eAdminDiskon.getNildisc() > 0.0) {
    				Double nildasar = nilai;
    				totalDiskon = totalDiskon + eAdminDiskon.getNildisc();
    				nilai = nilai - eAdminDiskon.getNildisc();
    				
    				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
    				
    	            dataDiskon.nourut = nourutDiskon;
    	            dataDiskon.jenis = "SPCNILDIS";
    	            dataDiskon.keterangan = "Discount Khusus (nilai)";
    	            dataDiskon.nouds = 0;
    	            dataDiskon.pctdisc = 0.0;
    	            dataDiskon.nildisc = eAdminDiskon.getNildisc();
    	            dataDiskon.nildasar = nildasar;
    	            dataDiskon.netto = nilai;
    	            detailDiskon.add(dataDiskon);

    	            nourutDiskon = nourutDiskon + 1;
    			}				    				
			}
		}
		
		// update terkait diskon ke result
		result.detailDiskon = detailDiskon;
		result.diskon = totalDiskon;
		result.netto = nilai;
	  
		return result;
	}
	
	
	public HitungTarifModel hitungTarifInvoiceOtomatis(String idMi010, String idMi001, Integer jumkar, String tanggal, Integer unitPengali) {
		
		HitungTarifModel result = new HitungTarifModel();
		result.jumkar = jumkar;
	
		CustomerProdukTarifComplete tarif = customerProdukTarifCompleteService.findByBk(idMi010, idMi001);
		
		// SKEMA HARGA
		CustomerProdukTarifDetail detailTarifSkemaHarga = customerProdukTarifDetailService.getByCustProdukAndJenisTarifDgnRange(tarif.header.customer.id, tarif.header.produk.id, "SKEMA", tanggal);
		
		List<InvoiceSubDetailPerhitunganSkemaTarif> detailPerhitungan = new ArrayList<InvoiceSubDetailPerhitunganSkemaTarif>();
		List<InvoiceSubDetailPerhitunganDiskon> detailDiskon = new ArrayList<InvoiceSubDetailPerhitunganDiskon>();
		
		Integer nouskm = null;
		if (detailTarifSkemaHarga != null) {
			// Ada detail tarif skema harga di master customer tarif produk, jadi lanjutkan prosesnya
			
			nouskm = detailTarifSkemaHarga.nourut;
			String tipeSkemaHarga = detailTarifSkemaHarga.skemaHarga.tipe;
			
			// ambil data detail overhead master customer tarif produk, urutkan berdasarkan nilai Max
			List<SkemaHargaDetail> overheads = skemaHargaDetailService.getByIdAndKelTarifSortByMax(detailTarifSkemaHarga.skemaHarga.id, "OVERH");
			  
			// ambil data detail tarif utama master customer tarif produk, urutkan berdasarkan nilai Max
			List<SkemaHargaDetail> utamas = skemaHargaDetailService.getByIdAndKelTarifSortByMax(detailTarifSkemaHarga.skemaHarga.id, "UTAMA");

			if (tipeSkemaHarga.equals("PRG")) {
				// PROGRESIF

				// ambil tarif overhead				
	            Double hargaOverhead = 0.0;
	            Integer jumlah = 1;
	            String ketOverhead = "";
	            for (SkemaHargaDetail overhead : overheads) {
	            	if (jumkar >= overhead.min && jumkar <= overhead.max) {
	            		jumlah = overhead.max - overhead.min + 1;
	            		hargaOverhead = overhead.harga;
	            		ketOverhead = overhead.min + " - " + overhead.max;
	            		break;
	            	} else {
	            		if (jumkar >= overhead.max) {
	                		jumlah = overhead.max - overhead.min + 1;
	            			hargaOverhead = overhead.harga;
	                		ketOverhead = overhead.min + " - " + overhead.max;
	            		}
	            	}
	            }

	            int nourut = 1;

	            InvoiceSubDetailPerhitunganSkemaTarif perhitungan = new InvoiceSubDetailPerhitunganSkemaTarif();
	            perhitungan.nourut = nourut;
	            perhitungan.jnstrf = "OVERH";
	            //perhitungan.keterangan = "Overhead";
	            perhitungan.keterangan = ketOverhead;
	            perhitungan.jumlah = jumlah;
	            perhitungan.harga = hargaOverhead;
	            perhitungan.bruto = hargaOverhead;
	            perhitungan.netto = hargaOverhead;
	            detailPerhitungan.add(perhitungan);
	            nourut = nourut + 1;
				
	            result.harga = hargaOverhead;
	            
				// ambil tarif utama				
	            for (SkemaHargaDetail utama : utamas) {
	            	if (jumkar >= utama.min && jumkar >= utama.max) {
	            		
	                    perhitungan = new InvoiceSubDetailPerhitunganSkemaTarif();
	    	            perhitungan.nourut = nourut;
	    	            perhitungan.jnstrf = "UTAMA";
	    	            perhitungan.keterangan = utama.min + " - " + utama.max;
	    	            perhitungan.jumlah = (utama.max - utama.min + 1);
	    	            perhitungan.harga = utama.harga;
	    	            perhitungan.bruto = perhitungan.jumlah * utama.harga;
	    	            perhitungan.netto = perhitungan.jumlah * utama.harga;	    	            
	    	            detailPerhitungan.add(perhitungan);
	    	            nourut = nourut + 1;
	    	            
	    	            result.harga = result.harga + (perhitungan.jumlah * utama.harga);

	            	} else {
	            		if (jumkar >= utama.min && jumkar < utama.max) {

		                    perhitungan = new InvoiceSubDetailPerhitunganSkemaTarif();
		    	            perhitungan.nourut = nourut;
		    	            perhitungan.jnstrf = "UTAMA";
		    	            perhitungan.keterangan = utama.min + " - " + utama.max;
		    	            perhitungan.jumlah = (jumkar - utama.min + 1);
		    	            perhitungan.harga = utama.harga;
		    	            perhitungan.bruto = perhitungan.jumlah * utama.harga;
		    	            perhitungan.netto = perhitungan.jumlah * utama.harga;	    	            
		    	            detailPerhitungan.add(perhitungan);
		    	            nourut = nourut + 1;
		    	            
		    	            result.harga = result.harga + (perhitungan.jumlah * utama.harga);
	            		}
	            	}
	            }
			}
		  
			if (tipeSkemaHarga.equals("NONPRG")) {
				// NON PROGRESIF
				
				// ambil tarif overhead				
	            Double hargaOverhead = 0.0;
	            Integer jumlah = 1;
	            String ketOverhead = "";
	            boolean overheadFound = false;
	            for (SkemaHargaDetail overhead : overheads) {
	            	if (jumkar >= overhead.min && jumkar <= overhead.max) {
	            		jumlah = overhead.max - overhead.min + 1;
	            		hargaOverhead = overhead.harga;
	            		ketOverhead = overhead.min + " - " + overhead.max;
	            		overheadFound = true;
	            		break;
	            	} else {
	            		if (jumkar >= overhead.max) {
	                		jumlah = overhead.max - overhead.min + 1;
	            			hargaOverhead = overhead.harga;
	                		ketOverhead = overhead.min + " - " + overhead.max;
	            		}
	            	}
	            }

	            int nourut = 1;

	            if (overheadFound) {
		            InvoiceSubDetailPerhitunganSkemaTarif perhitungan = new InvoiceSubDetailPerhitunganSkemaTarif();
		            perhitungan.nourut = nourut;
		            perhitungan.jnstrf = "OVERH";
		            perhitungan.keterangan = ketOverhead;
		            perhitungan.jumlah = jumlah;
		            perhitungan.harga = hargaOverhead;
		            perhitungan.bruto = hargaOverhead;
		            perhitungan.netto = hargaOverhead;
		            detailPerhitungan.add(perhitungan);
		            nourut = nourut + 1;
					
		            result.harga = hargaOverhead;	            	
	            }
	            
	            if (!overheadFound) {
					// ambil tarif utama				
		            for (SkemaHargaDetail utama : utamas) {
		            	if (jumkar >= utama.min && jumkar <= utama.max) {
		            		
		            		InvoiceSubDetailPerhitunganSkemaTarif perhitungan = new InvoiceSubDetailPerhitunganSkemaTarif();
		    	            perhitungan.nourut = nourut;
		    	            perhitungan.jnstrf = "UTAMA";
		    	            perhitungan.keterangan = utama.min + " - " + utama.max;
		    	            //perhitungan.jumlah = (jumkar - utama.min + 1);
		    	            perhitungan.jumlah = jumkar;
		    	            perhitungan.harga = utama.harga;
		    	            perhitungan.bruto = perhitungan.jumlah * utama.harga;
		    	            perhitungan.netto = perhitungan.jumlah * utama.harga;	    	            
		    	            detailPerhitungan.add(perhitungan);
		    	            nourut = nourut + 1;

		    	            result.harga = result.harga + (perhitungan.jumlah * utama.harga);
		    	            break;

		            	}
		            }	            	
	            }
			}
			
			overheads.addAll(utamas);
			
            result.detailSkema = detailPerhitungan;
			//result.detailSkemaHarga = overheads;
		} else {
			// tidak ada data tarif yang ditemukan
			nouskm = 0;
			result.harga = 0.0;
		}
		
		result.nouskm = nouskm;
		// hitung bruto untuk satu tahun -> ini tergantung tipe tarifnya to, kalo 1 tahun ya 12 bulan kalo 2 tahun ya 24
		// kalo 6 bulan ya 6
		int jumlahPengali = 0;
		if (tarif.header.satsiklus.equals("TAHUN")) {
			jumlahPengali = 12 * tarif.header.jumsiklus;
		}
		
		if (tarif.header.satsiklus.equals("BULAN")) {
			jumlahPengali = 1 * tarif.header.jumsiklus;
		}
		
		result.pengali = jumlahPengali;
		//result.bruto = jumlahPengali * result.harga;
		result.bruto = unitPengali * jumlahPengali * result.harga;
		
		result.jumsiklus = tarif.header.jumsiklus;
		result.satsiklus = tarif.header.satsiklus;
		
		int nourutDiskon = 1;
		Double nilai = result.bruto;
		Double totalDiskon = 0.0;

		// DISKON
		// 9 Agustus 2021, jangan ambil dari admin diskon, karena kalau ambil dari admin diskon, jadinya user ngga bisa ubah
		//                 mesti dibuatin inputan di layar invoice utk ubah, tapi ini effort nya gede banget sih
		
		// DISKON (%)
		CustomerProdukTarifDetail diskonProsen = customerProdukTarifDetailService.getByCustProdukAndJenisTarifDgnRange(tarif.header.customer.id, tarif.header.produk.id, "PCTDIS", tanggal);
		
		if (diskonProsen != null) {
			if (diskonProsen.pctdisc > 0.0) {
				Double nildasar = nilai;
				Double diskon = Math.floor((diskonProsen.pctdisc * nilai) / 100.0);
				totalDiskon = totalDiskon + diskon;
				nilai = nilai - diskon;
				
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "PRODIS";
	            dataDiskon.nouds = diskonProsen.nourut;
	            dataDiskon.keterangan = "Discount (%)";
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.pctdisc = diskonProsen.pctdisc;
	            dataDiskon.nildisc = diskon;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);
	            
	            nourutDiskon = nourutDiskon + 1;
			}
		}
	  
		// DISKON (NILAI)
		// prioritas pertama ambil untuk yang belum ada tanggal start dan end nya
		// (karena logikanya invoice initial dilakukan sebelum tanggal live diisi, sedangkan tanggal live = tanggal start)
		CustomerProdukTarifDetail diskonNilai = customerProdukTarifDetailService.getByCustProdukAndJenisTarifDgnRange(tarif.header.customer.id, tarif.header.produk.id, "NILDIS", tanggal);
		
		if (diskonNilai != null) {
			if (diskonNilai.nildisc > 0.0) {
				Double nildasar = nilai;
				totalDiskon = totalDiskon + diskonNilai.nildisc;
				nilai = nilai - diskonNilai.nildisc;
				
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "NILDIS";
	            dataDiskon.nouds = diskonNilai.nourut;
	            dataDiskon.keterangan = "Discount (nilai)";
	            dataDiskon.pctdisc = 0.0;
	            dataDiskon.nildisc = diskonNilai.nildisc;
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);
	            
	            nourutDiskon = nourutDiskon + 1;
			}				
		}

		// GRUP DISKON
		CustomerProdukTarifDetail detailGrupDiscount = customerProdukTarifDetailService.getByCustProdukForDiskonGrup(tarif.header.customer.id, tarif.header.produk.id);
		
		if (detailGrupDiscount != null) {
			
			// ambil data detail overhead master customer tarif produk, urutkan berdasarkan nilai Max
			GrupDiskonDetail grupDiskon = grupDiskonDetailService.getFirstDetail(detailGrupDiscount.grupDiskon.id);
			
			if (grupDiskon.pctdisc > 0.0) {
				Double nildasar = nilai;
				Double diskon = Math.floor((grupDiskon.pctdisc * nilai) / 100.0);
				totalDiskon = totalDiskon + diskon;
				nilai = nilai - diskon;
				
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "GRPPRODIS";
	            dataDiskon.nouds = grupDiskon.nourut;
	            dataDiskon.keterangan = "Discount Grup (%)";
	            dataDiskon.pctdisc = grupDiskon.pctdisc;
	            dataDiskon.nildisc = diskon;
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);
				
	            nourutDiskon = nourutDiskon + 1;
			}

			if (grupDiskon.nildisc > 0.0) {
				Double nildasar = nilai;
				totalDiskon = totalDiskon + grupDiskon.nildisc;
				nilai = nilai - grupDiskon.nildisc;
				
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "GRPNILDIS";
	            dataDiskon.nouds = grupDiskon.nourut;
	            dataDiskon.keterangan = "Discount Grup (nilai)";
	            dataDiskon.pctdisc = 0.0;
	            dataDiskon.nildisc = grupDiskon.nildisc;
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);
				
	            nourutDiskon = nourutDiskon + 1;
			}
		}
		
		// DISKON KHUSUS
		DiskonKhususHeader diskonKhusus = diskonKhususHeaderService.getFindByCustomerAndTanggal(tarif.header.customer.id, tanggal);
		
		if (diskonKhusus != null) {
			if (diskonKhusus.pctdisc > 0.0) {
				Double nildasar = nilai;
				Double diskon = Math.floor((diskonKhusus.pctdisc * nilai) / 100.0);
				totalDiskon = totalDiskon + diskon;
				nilai = nilai - diskon;
				
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "SPCPRODIS";
	            dataDiskon.keterangan = "Discount Khusus (%)";
	            dataDiskon.nouds = 0;
	            dataDiskon.pctdisc = diskonKhusus.pctdisc;
	            dataDiskon.nildisc = diskon;
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);
				
	            nourutDiskon = nourutDiskon + 1;
			}
			
			if (diskonKhusus.nildisc > 0.0) {
				Double nildasar = nilai;
				totalDiskon = totalDiskon + diskonKhusus.nildisc;
				nilai = nilai - diskonKhusus.nildisc;
				
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "SPCNILDIS";
	            dataDiskon.keterangan = "Discount Khusus (nilai)";
	            dataDiskon.nouds = 0;
	            dataDiskon.pctdisc = 0.0;
	            dataDiskon.nildisc = diskonKhusus.nildisc;
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);
				
	            nourutDiskon = nourutDiskon + 1;
			}			
		}

		/*
		List<EAdminDiskon> listDiskon = adminDiskonService.getByCustomerProdukDanTahunBulan(idMi010, idMi001, tanggal.substring(0,4), tanggal.substring(4,6));

		for (EAdminDiskon eAdminDiskon : listDiskon) {

			if (eAdminDiskon.getJnsdis().equals("PCTDIS")) {
				Double nildasar = nilai;
				Double diskon = (eAdminDiskon.getPctdisc() * nilai) / 100.0;
				totalDiskon = totalDiskon + diskon;
				nilai = nilai - diskon;
				
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "PRODIS";
	            dataDiskon.nouds = eAdminDiskon.getNouds();
	            dataDiskon.keterangan = "Discount (%)";
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.pctdisc = eAdminDiskon.getPctdisc();
	            dataDiskon.nildisc = diskon;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);
				
	            nourutDiskon = nourutDiskon + 1;
			}
			
			if (eAdminDiskon.getJnsdis().equals("NILDIS")) {
				Double nildasar = nilai;
				totalDiskon = totalDiskon + eAdminDiskon.getNildisc();
				nilai = nilai - eAdminDiskon.getNildisc();
				
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "NILDIS";
	            dataDiskon.nouds = eAdminDiskon.getNouds();
	            dataDiskon.keterangan = "Discount (nilai)";
	            dataDiskon.pctdisc = 0.0;
	            dataDiskon.nildisc = eAdminDiskon.getNildisc();
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);

	            nourutDiskon = nourutDiskon + 1;	    				
			}

			if (eAdminDiskon.getJnsdis().equals("GRPDIS1")) {
				Double nildasar = nilai;
				Double diskon = (eAdminDiskon.getPctdisc() * nilai) / 100.0;
				totalDiskon = totalDiskon + diskon;
				nilai = nilai - diskon;
				
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "GRPPRODIS";
	            dataDiskon.nouds = eAdminDiskon.getNouds();
	            dataDiskon.keterangan = "Discount Grup (%)";
	            dataDiskon.pctdisc = eAdminDiskon.getPctdisc();
	            dataDiskon.nildisc = diskon;
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);

	            nourutDiskon = nourutDiskon + 1;	    				
			}
			
			if (eAdminDiskon.getJnsdis().equals("GRPDIS2")) {
				Double nildasar = nilai;
				totalDiskon = totalDiskon + eAdminDiskon.getNildisc();
				nilai = nilai - eAdminDiskon.getNildisc();
				
				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
				
	            dataDiskon.nourut = nourutDiskon;
	            dataDiskon.jenis = "GRPPRODIS";
	            dataDiskon.nouds = eAdminDiskon.getNouds();
	            dataDiskon.keterangan = "Discount Grup (nilai)";
	            dataDiskon.pctdisc = 0.0;
	            dataDiskon.nildisc = eAdminDiskon.getNildisc();
	            dataDiskon.nildasar = nildasar;
	            dataDiskon.netto = nilai;
	            detailDiskon.add(dataDiskon);

	            nourutDiskon = nourutDiskon + 1;	    				
			}
			
			if (eAdminDiskon.getJnsdis().equals("SPCDIS")) {
    			if (eAdminDiskon.getPctdisc() > 0.0) {
    				Double nildasar = nilai;
    				Double diskon = (eAdminDiskon.getPctdisc() * nilai) / 100.0;
    				totalDiskon = totalDiskon + diskon;
    				nilai = nilai - diskon;
    				
    				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
    				
    	            dataDiskon.nourut = nourutDiskon;
    	            dataDiskon.jenis = "SPCPRODIS";
    	            dataDiskon.keterangan = "Discount Khusus (%)";
    	            dataDiskon.nouds = 0;
    	            dataDiskon.pctdisc = eAdminDiskon.getPctdisc();
    	            dataDiskon.nildisc = diskon;
    	            dataDiskon.nildasar = nildasar;
    	            dataDiskon.netto = nilai;
    	            detailDiskon.add(dataDiskon);

    	            nourutDiskon = nourutDiskon + 1;
    			}
    			
    			if (eAdminDiskon.getNildisc() > 0.0) {
    				Double nildasar = nilai;
    				totalDiskon = totalDiskon + eAdminDiskon.getNildisc();
    				nilai = nilai - eAdminDiskon.getNildisc();
    				
    				InvoiceSubDetailPerhitunganDiskon dataDiskon = new InvoiceSubDetailPerhitunganDiskon();
    				
    	            dataDiskon.nourut = nourutDiskon;
    	            dataDiskon.jenis = "SPCNILDIS";
    	            dataDiskon.keterangan = "Discount Khusus (nilai)";
    	            dataDiskon.nouds = 0;
    	            dataDiskon.pctdisc = 0.0;
    	            dataDiskon.nildisc = eAdminDiskon.getNildisc();
    	            dataDiskon.nildasar = nildasar;
    	            dataDiskon.netto = nilai;
    	            detailDiskon.add(dataDiskon);

    	            nourutDiskon = nourutDiskon + 1;
    			}				    				
			}
		}
		*/
		
		// update terkait diskon ke result
		result.detailDiskon = detailDiskon;
		result.diskon = totalDiskon;
		result.netto = nilai;
	  
		return result;
	}
  
}
