package co.id.sofcograha.base.utils;

import java.awt.image.BufferedImage;

import org.imgscalr.Scalr;

public class ImageUtil {

	public static BufferedImage rescale(BufferedImage originalImage, int width) {

		BufferedImage resizedImage = originalImage;

		int imgWidth = originalImage.getWidth();
		int imgHeight = originalImage.getHeight();

		if (imgHeight < originalImage.getHeight() && imgWidth < originalImage.getWidth()) return resizedImage;

		if (resizedImage.getColorModel().hasAlpha()) resizedImage = dropAlphaChannel(resizedImage);

		resizedImage = Scalr.resize(resizedImage, width);

		return resizedImage;
	}

	// credit to https://github.com/rkalla/imgscalr/issues/82
	private static BufferedImage dropAlphaChannel(BufferedImage src) {
		BufferedImage convertedImg = new BufferedImage(src.getWidth(), src.getHeight(), BufferedImage.TYPE_INT_RGB);
		convertedImg.getGraphics().drawImage(src, 0, 0, null);

		return convertedImg;
	}
	
	public static String getBase64FormatImage(String extension, String image) {
		return "data:" + extension + ";base64," + image;
	}
	
	public static String getBase64RawData(String image) {
		if(image != null) {
			if (image.indexOf(";base64,") != -1) {
				String[] arr = image.split(";base64,");
				if (arr.length > 1) {
					return arr[1];
				}
				return image;
			}
		}
		return image;
	}
}

