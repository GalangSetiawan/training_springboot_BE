package co.id.sofcograha.domain.invoicing.kelola.invoice.services;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Base64;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import co.id.sofcograha.base.constants.BaseConstants;
import co.id.sofcograha.base.extendables.BaseService;
import co.id.sofcograha.base.utils.Base64StringEncodedPojo;
import co.id.sofcograha.base.utils.download.FileGenerator;
import co.id.sofcograha.base.utils.pojos.UploadDownloadTemplate;
import co.id.sofcograha.base.utils.searchData.SearchParameter;
import co.id.sofcograha.base.utils.searchData.SearchResult;
import co.id.sofcograha.domain.invoicing.transaksi.invoice.data.entities.EInvoiceHeader;
import co.id.sofcograha.domain.invoicing.transaksi.invoice.data.pojos.InvoiceHeader;
import co.id.sofcograha.domain.invoicing.transaksi.invoice.data.repositories.EInvoiceHeaderRepository;
import co.id.sofcograha.domain.invoicing.transaksi.invoice.data.services.InvoiceHeaderService;

@Service("kelolaInvoiceCompleteService")
public class KelolaInvoiceCompleteService extends BaseService {
	
	@Autowired private InvoiceHeaderService invoiceHeaderService;
	@Autowired private EInvoiceHeaderRepository eInvoiceHeaderRepository;
	@Autowired private KelolaInvoiceExportPdfService kelolaInvoiceExportPdfService;
	
	public SearchResult<EInvoiceHeader> search(SearchParameter searchParameter) {
		return eInvoiceHeaderRepository.search(searchParameter);
	}
	
	@Transactional
	public EInvoiceHeader setBayar(InvoiceHeader pojo) {
		
		EInvoiceHeader entityHeader = pojo.toEntity();
		
		valDataAda(entityHeader);
		valInvoiceBelumKirim(entityHeader);
		throwBatchError();
		
		EInvoiceHeader newEInvoiceHeader = invoiceHeaderService.get(entityHeader.getId());

		if (entityHeader.getStatus().equals(BaseConstants.STATUS_INV_BAYAR)) {
			entityHeader.setStatus(BaseConstants.STATUS_INV_KIRIM);			
		} else {
			entityHeader.setStatus(BaseConstants.STATUS_INV_BAYAR);			
		}
		
		newEInvoiceHeader = invoiceHeaderService.edit(entityHeader);
		throwBatchError();
		
		return newEInvoiceHeader;
	}
	
	private void valDataAda(EInvoiceHeader entity) {
		if (entity == null) {
			batchError("invoice.general.no.data");
		}
	}
	
	private void valInvoiceBelumKirim(EInvoiceHeader entity) {
		if (entity.getStatus().equals(BaseConstants.STATUS_INV_BELUM_KIRIM)) {
			batchError("invoice.general.belum.kirim");
		}
	}
	
	public UploadDownloadTemplate downloaSeveralPdfs() {

		Base64StringEncodedPojo b64 = kelolaInvoiceExportPdfService.pdfReport("INV/GJ/00039/II/2021");

		try {
			File file = FileGenerator.createPdfTempFile("file1.pdf");
			FileOutputStream fos = new FileOutputStream(file);

			byte[] decoder = Base64.getDecoder().decode(b64.base64String);

			fos.write(decoder);
			fos.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		String[] files = {"pic1.png",
				  "pic2.png",
				  "pic3.png",
				  "pic4.png"};
		
	    String fileName = "coba.zip";
	    
	    UploadDownloadTemplate entity = new UploadDownloadTemplate();
//	    entity.fileExtension = "application/zip";
//	    entity.fileName = fileName;
//	    entity.file = FileGenerator.zipSeveralPdfFiles(files);

	    return entity;
	}	
}
