package co.id.sofcograha.base.master.userwidget.entities;

import java.util.Date;
import java.util.UUID;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.PrePersist;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import co.id.sofcograha.base.authentication.CurrentUser;
import co.id.sofcograha.base.exceptions.DevException;
import co.id.sofcograha.base.master.user.entities.EUser;
import co.id.sofcograha.base.master.widget.entities.EWidget;

//import id.co.sofcograha.gajiidapi.base.extendables.BaseEntity;
//import id.co.sofcograha.gajiidapi.base.mst.user.entities.User;
//import id.co.sofcograha.gajiidapi.base.mst.widget.entities.Widget;

@Entity
@Access(AccessType.FIELD)
@Table(schema="public", name="std_user_widget", uniqueConstraints = @UniqueConstraint(columnNames = { "std_widget_id", "std_user_id" }))
@JsonIgnoreProperties(ignoreUnknown=true)
public class EUserWidget implements Cloneable {

	@Id
	@Column(name = "id")
	private String id;
	
	@Version
	@Column(name = "version")
	private Long version;

	@OneToOne
	@JoinColumn(name = "std_widget_id")
	private EWidget widget;

	@OneToOne
	@JoinColumn(name = "std_user_id")
	private EUser user;

	@Column(name = "order_number")
	private Integer orderNumber;

	@Column(name = "cols")
	private Integer cols;

	@Column(name = "rows")
	private Integer rows;

	@Column(name = "x")
	private Integer x;

	@Column(name = "y")
	private Integer y;
	
	@Column(name = "user_create")
	private String userCreate;

	@Column(name = "creation_time")
	private Date creationTime;

	@Column(name = "user_modify")
	private String userModify;

	@Column(name = "modification_time")
	private Date modificationTime;

	@Transient
	private boolean isDeleted;
	
	public EWidget getWidget() {
		return widget;
	}

	public void setWidget(EWidget widget) {
		this.widget = widget;
	}

	public EUser getUser() {
		return user;
	}

	public void setUser(EUser user) {
		this.user = user;
	}

	public Integer getOrderNumber() {
		return orderNumber;
	}

	public void setOrderNumber(Integer orderNumber) {
		this.orderNumber = orderNumber;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public Long getVersion() {
		return version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	public String getUserCreate() {
		return userCreate;
	}

	public void setUserCreate(String userCreate) {
		this.userCreate = userCreate;
	}

	public Date getCreationTime() {
		return creationTime;
	}

	public void setCreationTime(Date creationTime) {
		this.creationTime = creationTime;
	}

	public String getUserModify() {
		return userModify;
	}

	public void setUserModify(String userModify) {
		this.userModify = userModify;
	}

	public Date getModificationTime() {
		return modificationTime;
	}

	public void setModificationTime(Date modificationTime) {
		this.modificationTime = modificationTime;
	}

	public Integer getCols() {
		return cols;
	}

	public void setCols(Integer cols) {
		this.cols = cols;
	}

	public Integer getRows() {
		return rows;
	}

	public void setRows(Integer rows) {
		this.rows = rows;
	}

	public Integer getX() {
		return x;
	}

	public void setX(Integer x) {
		this.x = x;
	}

	public Integer getY() {
		return y;
	}

	public void setY(Integer y) {
		this.y = y;
	}

	public boolean isDeleted() {
		return isDeleted;
	}

	public void setDeleted(boolean isDeleted) {
		this.isDeleted = isDeleted;
	}

	public Object clone() {
		try {
			return super.clone();
		} catch (CloneNotSupportedException e) {
			throw new DevException("Clone not supported", e);
		}
	}
	
	@PrePersist
	private void prePersist() {
		Date currentDateTime = new Date();
		
		this.id = UUID.randomUUID().toString();
		this.userCreate = CurrentUser.getUsername();
		this.creationTime = currentDateTime;
		this.userModify = CurrentUser.getUsername();
		this.modificationTime = currentDateTime;
	}
}