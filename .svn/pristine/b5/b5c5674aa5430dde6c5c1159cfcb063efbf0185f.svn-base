package co.id.sofcograha.domain.invoicing.masters.implementasi.controllers;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonProcessingException;

import co.id.sofcograha.base.authorization.annotation.NoAuth;
import co.id.sofcograha.base.master.user.services.UserService;
import co.id.sofcograha.base.utils.ApiResponse;
import co.id.sofcograha.base.utils.searchData.SearchParameter;
import co.id.sofcograha.base.utils.searchData.SearchResult;
import co.id.sofcograha.domain.invoicing.masters.implementasi.entities.EImplementasi;
import co.id.sofcograha.domain.invoicing.masters.implementasi.pojos.Implementasi;
import co.id.sofcograha.domain.invoicing.masters.implementasi.services.ImplementasiService;

@RestController
@RequestMapping("/api/implementasi")
public class ImplementasiController {

	public static final Logger logger = LoggerFactory.getLogger(ImplementasiController.class);

	@Autowired
	UserService userService; //Service which will do all data retrieval/manipulation work
	
	@Autowired
	private ImplementasiService implementasiService;
	

	// -------------------Retrieve Some ---------------------------------------------
	@NoAuth
	@GetMapping(value = "/search")
	public ApiResponse search(@RequestParam Map<String, String> searchParameter) {
		
		SearchResult<EImplementasi> searchResult = implementasiService.search(SearchParameter.generate(searchParameter, Implementasi.getFieldMappings()));
	    
		return ApiResponse.dataWithPaging("items", Implementasi.fromEntities(searchResult.getResult()),
				searchResult.getPaging());
	}

	// -------------------Retrieve Single Data ------------------------------------------
	@NoAuth
	@GetMapping
	public ApiResponse get(@RequestParam String nama) throws JsonProcessingException {

		EImplementasi entity = implementasiService.findByBk(nama);
		
		return ApiResponse.data("item", Implementasi.fromEntity(entity));
		
	}

	@NoAuth
    @PostMapping
    public ApiResponse add(@RequestBody Implementasi pojo) {
		
		EImplementasi result = implementasiService.add(pojo.toEntity());
		return ApiResponse.data("item", Implementasi.fromEntity(result));
    }
    
	@NoAuth
	@PutMapping
	public ApiResponse edit(@RequestBody Implementasi pojo) {
		
		EImplementasi result = implementasiService.edit(pojo.toEntity());
		return ApiResponse.data("item", Implementasi.fromEntity(result));
		
	}

	@NoAuth
	@DeleteMapping
	public ApiResponse delete(@RequestParam String id, @RequestParam(required = false) Long version) {
		implementasiService.delete(id, version);
		return ApiResponse.ok();
	}

}