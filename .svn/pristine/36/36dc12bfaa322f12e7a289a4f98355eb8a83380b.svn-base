package co.id.sofcograha.domain.invoicing.transaksi.invoice.data.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import co.id.sofcograha.base.exceptions.BusinessException;
import co.id.sofcograha.base.extendables.BaseService;
import co.id.sofcograha.base.utils.VersionUtil;
import co.id.sofcograha.base.utils.searchData.SearchParameter;
import co.id.sofcograha.base.utils.searchData.SearchResult;
import co.id.sofcograha.domain.invoicing.transaksi.invoice.data.entities.EInvoiceSubSubDetailAdjDiskon;
import co.id.sofcograha.domain.invoicing.transaksi.invoice.data.pojos.InvoiceSubSubDetailAdjDiskon;
import co.id.sofcograha.domain.invoicing.transaksi.invoice.data.repositories.EInvoiceSubSubDetailAdjDiskonRepository;

@Service("invoiceSubSubDetailAdjDiskonService")
public class InvoiceSubSubDetailAdjDiskonService extends BaseService {
	
	@Autowired private EInvoiceSubSubDetailAdjDiskonRepository repo;
	
	// sementara belum dipakai
	//@Autowired private ActionAuthorizationService actionAuthorizationService; 
	
	public InvoiceSubSubDetailAdjDiskon findByBk(String idTi007, Integer nourut) {
		return InvoiceSubSubDetailAdjDiskon.fromEntity(repo.findByBK(idTi007, nourut));
	}

	public SearchResult<EInvoiceSubSubDetailAdjDiskon> search(SearchParameter searchParameter) {
		return repo.search(searchParameter);
	}
	
	@Transactional
	public EInvoiceSubSubDetailAdjDiskon addFromProses(EInvoiceSubSubDetailAdjDiskon entity) {
		
		entity.setId(null);
		
		defineDefaultValuesOnAdd(entity);
		
		valRequiredValues(entity);
		throwBatchError();
		
		manageMinMaxValues(entity);
		throwBatchError();
		
		manageReferences(entity);
		throwBatchError();

		valUniquenessOnAdd(entity);
		throwBatchError();
		
		preAdd(entity);
		EInvoiceSubSubDetailAdjDiskon addedEntity = repo.add(entity);
		throwBatchError();

		postAdd(addedEntity);
		
		return addedEntity;	
			

	}
	
	@Transactional
	public EInvoiceSubSubDetailAdjDiskon add(EInvoiceSubSubDetailAdjDiskon entity) {
		
		entity.setId(null);
		
		defineDefaultValuesOnAdd(entity);
		
		valRequiredValues(entity);
		// tidak memanggil throwBatchError(), karena simpan transaksi jurnal menganut simpan keseluruhan dan menampilkan error
		// di grid tidak error yang muncul satu per satu.
		//throwBatchError();
		
		manageMinMaxValues(entity);
		//throwBatchError();
		
		manageReferences(entity);
		//throwBatchError();

		valUniquenessOnAdd(entity);
		//throwBatchError();
		
		if (!isAnyBatchErrors()) {
			preAdd(entity);
			EInvoiceSubSubDetailAdjDiskon addedEntity = repo.add(entity);
			postAdd(addedEntity);
			
			return addedEntity;	
		}
			
		//throwBatchError();
		return entity;	

	}
	
	@Transactional
	public EInvoiceSubSubDetailAdjDiskon edit(EInvoiceSubSubDetailAdjDiskon entity) {
		
		valIdVersionRequired(entity.getId(), entity.getVersion());
		valVersion(entity.getId(), entity.getVersion(), entity.getClass().getSimpleName());
		throwBatchError();
		
		valRequiredValues(entity);
		throwBatchError();
		
		manageMinMaxValues(entity);
		throwBatchError();
		
		manageReferences(entity);
		throwBatchError();
		
		valUniquenessOnEdit(entity);
		throwBatchError();
				
		EInvoiceSubSubDetailAdjDiskon toBeSaved = repo.getOne(entity.getId());
		EInvoiceSubSubDetailAdjDiskon oldEntity = (EInvoiceSubSubDetailAdjDiskon) toBeSaved.clone();
		
		defineEditableValues(entity, toBeSaved);
    
		preEdit(toBeSaved, oldEntity);
		toBeSaved = repo.edit(toBeSaved);
		postEdit(toBeSaved, oldEntity);

		throwBatchError();
		return toBeSaved;	
		
	}

	@Transactional
	public void delete (String id, Long version) {
		
		valIdVersionRequired(id, version);
		valVersion(id, version, EInvoiceSubSubDetailAdjDiskon.class.getSimpleName());
		// tidak memanggil throwBatchError(), karena simpan transaksi jurnal menganut simpan keseluruhan dan menampilkan error
		// di grid tidak error yang muncul satu per satu.
		//throwBatchError();
		
		EInvoiceSubSubDetailAdjDiskon toBeDeleted = repo.getOne(id);
		
		valDelete(toBeDeleted);
		//throwBatchError();
		
		preDelete(toBeDeleted);
		repo.delete(toBeDeleted.getId());
		postDelete(toBeDeleted);
		
		//throwBatchError();
		
	}
	
	// terkait manipulasi data
	private void valVersion(String id, Long version, String entityClassName) {
		valEntityExists(id, entityClassName);
		EInvoiceSubSubDetailAdjDiskon dbEntity = repo.getOne(id);
		VersionUtil.check(version, dbEntity.getVersion());
	}
	
	private void valEntityExists(String id, String entityClassName) {
		if (repo.getOne(id) == null) {
			throw new BusinessException("data.not.found", entityClassName, id);
		}
	}
	
	protected void defineDefaultValuesOnAdd(EInvoiceSubSubDetailAdjDiskon entity) {
		if (entity.getVersion() == null) entity.setVersion((long) 1);
	}
	
	protected void defineEditableValues(EInvoiceSubSubDetailAdjDiskon newValues, EInvoiceSubSubDetailAdjDiskon toBeSaved) {

		if (toBeSaved != null) {
			toBeSaved.setNourut(newValues.getNourut());
			toBeSaved.setKeterangan(newValues.getKeterangan());
			toBeSaved.setJenis(newValues.getJenis());
			toBeSaved.setNildasar(newValues.getNildasar());
			toBeSaved.setPctdisc(newValues.getPctdisc());
			toBeSaved.setNildisc(newValues.getNildisc());
			toBeSaved.setNetto(newValues.getNetto());
			toBeSaved.setNouds(newValues.getNouds());
		}
		else if (toBeSaved == null) {
			defineDefaultValuesOnAdd(newValues);
		}
		
	}
	
	protected void valRequiredValues(EInvoiceSubSubDetailAdjDiskon entity) {
		valRequiredInteger(entity.getNourut(), "invoice.otomatis.adj.sub.sub.detail.diskon.nourut.required");
		valRequiredString(entity.getKeterangan(), "invoice.otomatis.adj.sub.sub.detail.diskon.keterangan.required");		
		valRequiredString(entity.getJenis(), "invoice.otomatis.adj.sub.sub.detail.diskon.jenis.required");		
		valRequiredDouble(entity.getNildasar(), "invoice.otomatis.adj.sub.sub.detail.diskon.nildasar.required");
		valRequiredDouble(entity.getPctdisc(), "invoice.otomatis.adj.sub.sub.detail.diskon.pctdisc.required");
		valRequiredDouble(entity.getNildisc(), "invoice.otomatis.adj.sub.sub.detail.diskon.nildisc.required");
		valRequiredDouble(entity.getNetto(), "invoice.otomatis.adj.sub.sub.detail.diskon.netto.required");
	}
	
	protected void manageMinMaxValues(EInvoiceSubSubDetailAdjDiskon entity) {
		valMinInteger(entity.getNourut(), 0, "invoice.otomatis.adj.sub.sub.detail.diskon.nourut.min.length");
		valMaxInteger(entity.getNourut(), 999, "invoice.otomatis.adj.sub.sub.detail.diskon.nourut.max.length");
		valMaxString(entity.getKeterangan(), 200, "invoice.otomatis.adj.sub.sub.detail.diskon.keterangan.max.length");
		valMaxString(entity.getJenis(), 20, "invoice.otomatis.adj.sub.sub.detail.diskon.jenis.max.length");
		valMinDouble(entity.getNildasar(), -999999999D, "invoice.otomatis.adj.sub.sub.detail.diskon.nildasar.min.length");
		valMaxDouble(entity.getNildasar(), 999999999D, "invoice.otomatis.adj.sub.sub.detail.diskon.nildasar.max.length");
		valMinDouble(entity.getPctdisc(), 0D, "invoice.otomatis.adj.sub.sub.detail.diskon.pctdisc.min.length");
		valMaxDouble(entity.getPctdisc(), 9999D, "invoice.otomatis.adj.sub.sub.detail.diskon.pctdisc.max.length");
		valMinDouble(entity.getNildisc(), -999999999D, "invoice.otomatis.adj.sub.sub.detail.diskon.nildisc.min.length");
		valMaxDouble(entity.getNildisc(), 999999999D, "invoice.otomatis.adj.sub.sub.detail.diskon.nildisc.max.length");
		valMinDouble(entity.getNetto(), -999999999D, "invoice.otomatis.adj.sub.sub.detail.diskon.netto.min.length");
		valMaxDouble(entity.getNetto(), 999999999D, "invoice.otomatis.adj.sub.sub.detail.diskon.netto.max.length");
	}

	protected void manageReferences(EInvoiceSubSubDetailAdjDiskon entity) {
	}

	protected void valDelete(EInvoiceSubSubDetailAdjDiskon toBeDeleted) {	}
	
	protected void valUniquenessOnAdd(EInvoiceSubSubDetailAdjDiskon addedEntity) {
		EInvoiceSubSubDetailAdjDiskon entityFromDb = repo.findByBK(addedEntity.getSubDetailPerincian().getId(), addedEntity.getNourut());
		if (entityFromDb != null) {
			throw new BusinessException("invoice.otomatis.adj.sub.sub.detail.diskon.detail.bk", addedEntity.getNourut());
		}
	}

	protected void valUniquenessOnEdit(EInvoiceSubSubDetailAdjDiskon editedEntity) {
		EInvoiceSubSubDetailAdjDiskon entityFromDb = repo.findByBK(editedEntity.getSubDetailPerincian().getId(), editedEntity.getNourut());
		if (entityFromDb != null) {
			if (!editedEntity.getId().equals(entityFromDb.getId())) {
				throw new BusinessException("invoice.otomatis.adj.sub.sub.detail.diskon.bk", editedEntity.getNourut());
			}
		}
	}

	protected void preAdd(EInvoiceSubSubDetailAdjDiskon entity) {
		// salah satu contoh penggunaannya (di gaji.id) :
		// - set nomor urut item berdasar total data + 1 (TrxInputKaryawanAttachFileService,
		//   TrxInputKaryawanDetailPelatihanService)
		// - menambahkan thumbnail bagi foto di TrxInputKaryawanPhotoService, EmployeePhotoService
		// NB: terus terang bingung membedakan method ini dengan method defineDefaultValuesOnAdd
	}
	
	protected void postAdd(EInvoiceSubSubDetailAdjDiskon entity) {
		// salah satu contoh penggunaannya (di gaji.id) :
		// - menandai transaksi ini sebagai transaksi yang terkonfirmasi
		// - mengeksekusi notifikasi (pada SysNotificationService)
		// - edit file admin untuk menandai slip gaji di release
		// - manambah saldo surat ketidakhadiran yang belum konfirmasi
		// - update absensi, edit jadwal kerja, jalankan sp utk proses verfikasi absensi (TrxOverrideJadwalKerjaDetailService)
		// boleh dibilang ini bisa digunakan untuk update saldo-saldo/sejarah/admin/konfirmasi
	}
	
	protected void preEdit(EInvoiceSubSubDetailAdjDiskon toBeSaved, EInvoiceSubSubDetailAdjDiskon oldEntity) {
		// penjelasan untuk penggunaan mirip dengan preAdd
	}
	
	protected void postEdit(EInvoiceSubSubDetailAdjDiskon toBeSaved, EInvoiceSubSubDetailAdjDiskon oldEntity) {
		// penjelasan untuk penggunaan mirip dengan postAdd
	}
	
	protected void preDelete(EInvoiceSubSubDetailAdjDiskon entity) {
		// penjelasan untuk penggunaan mirip dengan preEdit
	}
	
	protected void postDelete(EInvoiceSubSubDetailAdjDiskon entity) {
		// penjelasan untuk penggunaan mirip dengan postAdd
	}
	// ----
	
	/* mungkin berguna nanti waktu sudah diputuskan bagaimana mekanisme teknis otorisasinya	
	private void valAuthAdd() {
		if(!actionAuthorizationService.valHakAdd()) {
			error("NoRightToAdd");
		}
	}
   
	private void valAuthEdit() {
		if(!actionAuthorizationService.valHakEdit()) {
			error("NoRightToChange");
		}
	}
   
	private void valAuthDelete() {
		if(!actionAuthorizationService.valHakDelete()) {
			error("NoRightToDelete");
		}
	}
	*/
}
