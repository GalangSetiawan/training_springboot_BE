package co.id.sofcograha.domain.invoicing.transaksi.berhenti.pojos;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.util.StringUtils;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import co.id.sofcograha.base.constants.BaseConstants;
import co.id.sofcograha.base.master.jenisTransaksi.entities.EJenisTransaksi;
import co.id.sofcograha.base.master.jenisTransaksi.pojos.JenisTransaksi;
import co.id.sofcograha.base.utils.TimeUtil;
import co.id.sofcograha.base.utils.searchData.SearchFieldMapping;
import co.id.sofcograha.domain.invoicing.masters.customer.entities.ECustomerGajiId;
import co.id.sofcograha.domain.invoicing.masters.customer.pojos.CustomerGajiId;
import co.id.sofcograha.domain.invoicing.masters.produk.entities.EProduk;
import co.id.sofcograha.domain.invoicing.masters.produk.pojos.Produk;
import co.id.sofcograha.domain.invoicing.transaksi.berhenti.entities.ETrxBerhenti;

@JsonInclude(Include.ALWAYS)
public class TrxBerhenti {
	
	public String id;
    public String nomor;
    public Date tgtrn;
    public Date tgstop;
    public Date tglive;
    public String keterangan;
    
	public Long version;  
    public String usrcrt;
    public Date tglcrt;
    public String jamcrt;
    public String usrupd;
    public Date tglupd;
    public String jamupd;
	
	public JenisTransaksi jenisTransaksi;
	public CustomerGajiId customer;
	public Produk produk;

	public ETrxBerhenti toEntity() {
		
		ETrxBerhenti entity = new ETrxBerhenti();

		entity.setId(id);
		entity.setNomor(nomor);

		if (tgtrn != null) {
			entity.setTgtrn(TimeUtil.convertDateToYyyyMmDd(tgtrn)); 
		}

		if (tgstop != null) {
			entity.setTgstop(TimeUtil.convertDateToYyyyMmDd(tgstop)); 
		}

		if (tglive != null) {
			entity.setTglive(TimeUtil.convertDateToYyyyMmDd(tglive)); 
		}

		entity.setKeterangan(keterangan);
		entity.setVersion(version);
        entity.setUsrcrt(usrcrt);
        
		if (tglcrt != null) {
			entity.setTglcrt(TimeUtil.convertDateToYyyyMmDd(tglcrt)); 
		}
        
        entity.setJamcrt(jamcrt);
        entity.setUsrupd(usrupd);
        
		if (tglupd != null) {
			entity.setTglupd(TimeUtil.convertDateToYyyyMmDd(tglupd)); 
		}
        
        entity.setJamupd(jamupd);
		
		if (customer != null && !StringUtils.isEmpty(customer.id)) {
			ECustomerGajiId entityRef = new ECustomerGajiId();
		
			entityRef.setId(customer.id);
			entityRef.setVersion(customer.version);
		
			entity.setCustomer(entityRef);
		
		} else {
			entity.setCustomer(null);
		}
        
		if (produk != null && !StringUtils.isEmpty(produk.id)) {
			EProduk entityRef = new EProduk();
		
			entityRef.setId(produk.id);
			entityRef.setVersion(produk.version);
		
			entity.setProduk(entityRef);
		
		} else {
			entity.setProduk(null);
		}
		
		if (jenisTransaksi != null && !StringUtils.isEmpty(jenisTransaksi.id)) {
			EJenisTransaksi eJenisTransaksi = new EJenisTransaksi();
			
			eJenisTransaksi.setId(jenisTransaksi.id);
			
			entity.setJenisTransaksi(eJenisTransaksi);
			
		} else {
			entity.setJenisTransaksi(null);
		}        

		return entity;
	}
	
	public static List<ETrxBerhenti> toEntities(List<TrxBerhenti> pojos) {
		if (pojos == null) return null;

		List<ETrxBerhenti> entities = new ArrayList<ETrxBerhenti>();
		for (TrxBerhenti pojo : pojos) {
			entities.add(pojo.toEntity());
		}

		return entities;
	}
	
	public static TrxBerhenti fromEntity (ETrxBerhenti entity) {
		return fromEntity(entity, BaseConstants.DEFAULT_QUERY_DEPTH, BaseConstants.DEFAULT_DETAIL_QUERY_DEPTH);
	}
	
	public static TrxBerhenti fromEntity (ETrxBerhenti entity, int depthLevel) {
		return fromEntity(entity, depthLevel, BaseConstants.DEFAULT_DETAIL_QUERY_DEPTH);
	}
	
	public static TrxBerhenti fromEntity(ETrxBerhenti entity, int depthLevel, int detailDepthLevel) {
		
		if (entity == null) return null;
		if (depthLevel < 0) depthLevel = BaseConstants.DEFAULT_QUERY_DEPTH;	
	    if (detailDepthLevel < 0) detailDepthLevel = BaseConstants.DEFAULT_DETAIL_QUERY_DEPTH;
		
		TrxBerhenti pojo = new TrxBerhenti();
		
		pojo.id = entity.getId();
		if (depthLevel > 0) {
			depthLevel--;

			pojo.nomor = entity.getNomor();

			if (entity.getTgtrn() != null && !entity.getTgtrn().trim().equals("")) {
				pojo.tgtrn = TimeUtil.getDate(entity.getTgtrn());				
			} else {
				pojo.tgtrn = null;
			}
			
			if (entity.getTgstop() != null && !entity.getTgstop().trim().equals("")) {
				pojo.tgstop = TimeUtil.getDate(entity.getTgstop());				
			} else {
				pojo.tgstop = null;
			}
			
			if (entity.getTglive() != null && !entity.getTglive().trim().equals("")) {
				pojo.tglive = TimeUtil.getDate(entity.getTglive());				
			} else {
				pojo.tglive = null;
			}
			
			pojo.keterangan = entity.getKeterangan();
			pojo.version = entity.getVersion();
	        pojo.usrcrt = entity.getUsrcrt();
	        
			if (entity.getTglcrt() != null && !entity.getTglcrt().trim().equals("")) {
				pojo.tglcrt = TimeUtil.getDate(entity.getTglcrt());				
			} else {
				pojo.tglcrt = null;
			}
	        
	        pojo.jamcrt = entity.getJamcrt();
	        pojo.usrupd = entity.getUsrupd();
	        
			if (entity.getTglupd() != null && !entity.getTglupd().trim().equals("")) {
				pojo.tglupd = TimeUtil.getDate(entity.getTglupd());				
			} else {
				pojo.tglupd = null;
			}
	        
	        pojo.jamupd = entity.getJamupd();
	      
			pojo.jenisTransaksi = JenisTransaksi.fromEntity(entity.getJenisTransaksi());
			pojo.customer = CustomerGajiId.fromEntity(entity.getCustomer());
			pojo.produk = Produk.fromEntity(entity.getProduk());
			
			if (detailDepthLevel > 0) {
				detailDepthLevel--;
				
			}
		}

		return pojo;
	}
	
	public static List<TrxBerhenti> fromEntities(List<ETrxBerhenti> entities){
		return fromEntities(entities, BaseConstants.DEFAULT_QUERY_DEPTH, BaseConstants.DEFAULT_DETAIL_QUERY_DEPTH);
	}
	
	public static List<TrxBerhenti> fromEntities(List<ETrxBerhenti> entities, int depthLevel, int detailDepthLevel){
		
		if (entities == null) return new ArrayList<>();
		if (depthLevel < 0) depthLevel = BaseConstants.DEFAULT_QUERY_DEPTH;
		if (detailDepthLevel < 0) detailDepthLevel = BaseConstants.DEFAULT_DETAIL_QUERY_DEPTH;
		
		List<TrxBerhenti> pojos = new ArrayList<>();
		
		for (ETrxBerhenti entity : entities) {
			pojos.add(TrxBerhenti.fromEntity(entity, depthLevel, detailDepthLevel));
		}
		return pojos;
	}

	public static List<SearchFieldMapping> getFieldMappings() {
		List<SearchFieldMapping> mappings = new ArrayList<>();
		
		// ini adalah daftar yang dipassing dari FE ke BE
		// BUKAN berarti sama dengan deklarasi variabel di pojo ini
		//    misal, fldata, dari FE sudah berupa string 'Y' atau 'T' bukan boolean
		//           demikian pula dengan tglive
		mappings.add(new SearchFieldMapping("nomor", "nomor"));
		mappings.add(new SearchFieldMapping("fldata", "fldata"));
		mappings.add(new SearchFieldMapping("tglive", "tglive"));
		mappings.add(new SearchFieldMapping("customer", "customer"));
		mappings.add(new SearchFieldMapping("produk", "produk.nama"));
		mappings.add(new SearchFieldMapping("invoice", "invoiceInitial.nomor"));
//		mappings.add(new SearchFieldMapping("dpp", "dpp", Double.class).sortOnly());
//		mappings.add(new SearchFieldMapping("ppn", "ppn", Double.class).sortOnly());
//		mappings.add(new SearchFieldMapping("widgetId", "widget.id").searchOnly());
//		mappings.add(new SearchFieldMapping("userId", "user.id"));
//		mappings.add(new SearchFieldMapping("orderNumber", "orderNumber", Integer.class).sortOnly());
		
		return mappings;
	}
}	
