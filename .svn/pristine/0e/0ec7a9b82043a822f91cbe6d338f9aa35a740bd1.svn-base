package co.id.sofcograha.domain.invoicing.commonMasters.automaticnumbering.repositories;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.Query;

import org.springframework.data.jpa.repository.support.SimpleJpaRepository;
import org.springframework.stereotype.Repository;

import co.id.sofcograha.domain.invoicing.admin.renewal.entities.EAdminRenewal;
import co.id.sofcograha.domain.invoicing.commonMasters.automaticnumbering.entities.EAutomaticNumberingLog;

@Repository
public class EAutomaticNumberingLogRepository extends SimpleJpaRepository<EAutomaticNumberingLog, String> {
	
	protected final EntityManager em;

	public EAutomaticNumberingLogRepository(EntityManager em) {
		super(EAutomaticNumberingLog.class, em);
		this.em = em;
	}
	
	public EAutomaticNumberingLog findByDocumentId(String documentId, String usedFlag) {
		
		String query = "SELECT a " +
				       "FROM EAutomaticNumberingLog a " +
				       "WHERE a.jenisTransaksi.id = :documentId And " +
				             "a.usedFlag = :usedFlag ";
	
		try {
			return em.createQuery(query, EAutomaticNumberingLog.class)
					.setParameter("documentId", documentId)
					.setParameter("usedFlag", usedFlag)
					.getSingleResult();
		} catch (NoResultException e) {
			return null;
		}
		
	}
	
	public EAutomaticNumberingLog findByDocumentBk(String transactionId, String trxNumber) {

		String query = "SELECT a " +
			           "FROM EAutomaticNumberingLog a " +
			           "WHERE a.jenisTransaksi.id = :transactionId And " +
			                 "a.trxNumber = :trxNumber ";

		try {
			return em.createQuery(query, EAutomaticNumberingLog.class)
					.setParameter("transactionId", transactionId)
					.setParameter("trxNumber", trxNumber)
					.getSingleResult();
		} catch (NoResultException e) {
			return null;
		}
		
	}
	
    @SuppressWarnings("unchecked")
	public EAutomaticNumberingLog getNomorTerkecilTidakTerpakaiBdskKey(String idAm90, String key) {
    	
        Query query;
      
        StringBuilder queryStringBuilder = new StringBuilder();
        queryStringBuilder.append("select a.* " + 
        		                  "from am59log a " + 
        		                  "where a.id_am90 = :idAm90 and " + 
        		                  "      a.trx_number = (select min(x.trx_number) " + 
        		                  "                      from am59log x " + 
        		                  "                      where x.id_am90 = :idAm90 and " + 
        		                  "                            x.key = :key And " +
        		                  "                            x.used_flag = 'T') "); 
        
        query = em.createNativeQuery(queryStringBuilder.toString(), EAutomaticNumberingLog.class);
        
        query.setParameter("idAm90", idAm90);
        query.setParameter("key", key);
        
        List<Object> list = query.getResultList();

        if (!list.isEmpty()) {
        	return (EAutomaticNumberingLog) list.get(0);
        } else {
        	return null;
        }
    }	

    @SuppressWarnings("unchecked")
	public EAutomaticNumberingLog getNomorTerkecilTidakTerpakaiNonKey(String idAm90) {
    	
        Query query;
      
        StringBuilder queryStringBuilder = new StringBuilder();
        queryStringBuilder.append("select a.* " + 
        		                  "from am59log a " + 
        		                  "where a.id_am90 = :idAm90 and " + 
        		                  "      a.trx_number = (select min(x.trx_number) " + 
        		                  "                      from am59log x " + 
        		                  "                      where x.id_am90 = :idAm90 and " + 
        		                  "                            x.key is null And " +
        		                  "                            x.used_flag = 'T') "); 
        
        query = em.createNativeQuery(queryStringBuilder.toString(), EAutomaticNumberingLog.class);
        
        query.setParameter("idAm90", idAm90);
        
        List<Object> list = query.getResultList();

        if (!list.isEmpty()) {
        	return (EAutomaticNumberingLog) list.get(0);
        } else {
        	return null;
        }
    }	

    public EAutomaticNumberingLog edit(EAutomaticNumberingLog entity) {
    	return saveAndFlush(entity);
    };
    
    public EAutomaticNumberingLog add(EAutomaticNumberingLog entity) {
    	return saveAndFlush(entity);
    };
}
