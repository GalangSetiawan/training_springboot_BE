package co.id.sofcograha.domain.invoicing.transaksi.invoice.invoiceHasilProses.controllers;

import java.text.ParseException;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonProcessingException;

import co.id.sofcograha.base.authorization.annotation.NoAuth;
import co.id.sofcograha.base.utils.ApiResponse;
import co.id.sofcograha.base.utils.Base64StringEncodedPojo;
import co.id.sofcograha.base.utils.searchData.SearchParameter;
import co.id.sofcograha.base.utils.searchData.SearchResult;
import co.id.sofcograha.domain.invoicing.transaksi.invoice.data.entities.EInvoiceHeader;
import co.id.sofcograha.domain.invoicing.transaksi.invoice.data.pojos.InvoiceHeader;
import co.id.sofcograha.domain.invoicing.transaksi.invoice.data.services.InvoiceHeaderService;
import co.id.sofcograha.domain.invoicing.transaksi.invoice.invoiceHasilProses.pojos.InvoiceHasilProsesComplete;
import co.id.sofcograha.domain.invoicing.transaksi.invoice.invoiceHasilProses.services.InvoiceHasilProsesCompleteService;
import co.id.sofcograha.domain.invoicing.transaksi.invoice.invoiceHasilProses.services.InvoiceHasilProsesExportPdfService;

@RestController
@RequestMapping("/api/invoice-hasil-proses")
public class InvoiceHasilProsesController {
	
	public static final Logger logger = LoggerFactory.getLogger(InvoiceHasilProsesController.class);
	
	@Autowired private InvoiceHeaderService invoiceHeaderService;
	//@Autowired private SkemaHargaDetailService skemaHargaDetailService;
	@Autowired private InvoiceHasilProsesCompleteService invoiceHasilProsesCompleteService;
	@Autowired private InvoiceHasilProsesExportPdfService invoiceHasilProsesExportPdfService;
	
	@NoAuth
	@GetMapping(value = "/search")
	public ApiResponse search(@RequestParam Map<String, String> searchParameter) {
		
		SearchResult<EInvoiceHeader> searchResult = invoiceHeaderService.search(SearchParameter.generate(searchParameter, 
				InvoiceHeader.getFieldMappings()));
		
		return ApiResponse.dataWithPaging("items", 
				InvoiceHeader.fromEntities(searchResult.getResult()), 
				searchResult.getPaging());
	}
	
	@NoAuth
	@GetMapping
	public ApiResponse get(@RequestParam String nomor) throws JsonProcessingException, ParseException {
		InvoiceHasilProsesComplete data = invoiceHasilProsesCompleteService.findByBk(nomor);
	    
	    return ApiResponse.data("item", data);
	}
	
	//@AuthEdit("TRX_PP")
	@NoAuth
	@PutMapping
	public ApiResponse edit(@RequestBody InvoiceHasilProsesComplete pojo) {
		
		EInvoiceHeader header = invoiceHasilProsesCompleteService.edit(pojo);
		
		return ApiResponse.data("item", InvoiceHasilProsesComplete.setFromEntity(header));
	}

	//@AuthDelete("TRX_PP")
	@NoAuth
	@DeleteMapping
	public ApiResponse delete(@RequestParam String id, @RequestParam(required = false) Long version) {
		
		invoiceHasilProsesCompleteService.delete(id, version);
		
		return ApiResponse.ok();
	}
	
	@NoAuth
    @GetMapping("/pdf")
    public ApiResponse createAndSendPdf(@RequestParam String nomor) throws ParseException {
		
	    Base64StringEncodedPojo result = invoiceHasilProsesExportPdfService.pdfReport(nomor);
	    
	    return ApiResponse.data("item", result);		
    }
}