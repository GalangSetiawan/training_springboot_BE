package co.id.sofcograha.domain.invoicing.admin.upload.entities;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

import co.id.sofcograha.base.authentication.CurrentUser;
import co.id.sofcograha.base.exceptions.DevException;
import co.id.sofcograha.domain.invoicing.masters.mappingCustomerProduk.entities.EMappingCustomerProduk;

@Entity
@Access(AccessType.FIELD)
@Table(name = "ai001", uniqueConstraints = @UniqueConstraint(columnNames = { "id_mi013", "tahun", "bulan" }))
public class EAdminUploadHeader implements Cloneable {

	@Id
	@Column(name = "id_ai001")
	private String id;

	@Column(name = "tahun")
	private String tahun;

	@Column(name = "bulan")
	private String bulan;

	@Column(name = "flver1")
	private String flver1;

	@Column(name = "tgver1")
	private String tgver1;

	@Column(name = "flver2")
	private String flver2;

	@Column(name = "tgver2")
	private String tgver2;

	@Column(name = "flown")
	private String flown;

	@Column(name = "flproi")
	private String flproi;

	@Version
	@Column(name = "version")
	private Long version;

	@Column(name = "usrcrt")
	private String usrcrt;

	@Column(name = "tglcrt")
	private String tglcrt;

	@Column(name = "jamcrt")
	private String jamcrt;

	@Column(name = "usrupd")
	private String usrupd;

	@Column(name = "tglupd")
	private String tglupd;

	@Column(name = "jamupd")
	private String jamupd;

	@OneToOne
	@JoinColumn(name = "id_mi013")
	private EMappingCustomerProduk mappingCustomerProduk;

	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "header")
	private List<EAdminUploadDetail> detail;

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getTahun() {
		return tahun;
	}

	public void setTahun(String tahun) {
		this.tahun = tahun;
	}

	public String getBulan() {
		return bulan;
	}

	public void setBulan(String bulan) {
		this.bulan = bulan;
	}

	public String getFlver1() {
		return flver1;
	}

	public void setFlver1(String flver1) {
		this.flver1 = flver1;
	}

	public String getTgver1() {
		return tgver1;
	}

	public void setTgver1(String tgver1) {
		this.tgver1 = tgver1;
	}

	public String getFlver2() {
		return flver2;
	}

	public void setFlver2(String flver2) {
		this.flver2 = flver2;
	}

	public String getTgver2() {
		return tgver2;
	}

	public void setTgver2(String tgver2) {
		this.tgver2 = tgver2;
	}

	public String getFlown() {
		return flown;
	}

	public void setFlown(String flown) {
		this.flown = flown;
	}

	public String getFlproi() {
		return flproi;
	}

	public void setFlproi(String flproi) {
		this.flproi = flproi;
	}

	public Long getVersion() {
		return version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	public String getUsrcrt() {
		return usrcrt;
	}

	public void setUsrcrt(String usrcrt) {
		this.usrcrt = usrcrt;
	}

	public String getTglcrt() {
		return tglcrt;
	}

	public void setTglcrt(String tglcrt) {
		this.tglcrt = tglcrt;
	}

	public String getJamcrt() {
		return jamcrt;
	}

	public void setJamcrt(String jamcrt) {
		this.jamcrt = jamcrt;
	}

	public String getUsrupd() {
		return usrupd;
	}

	public void setUsrupd(String usrupd) {
		this.usrupd = usrupd;
	}

	public String getTglupd() {
		return tglupd;
	}

	public void setTglupd(String tglupd) {
		this.tglupd = tglupd;
	}

	public String getJamupd() {
		return jamupd;
	}

	public void setJamupd(String jamupd) {
		this.jamupd = jamupd;
	}

	public List<EAdminUploadDetail> getDetail() {
		return detail;
	}

	public void setDetail(List<EAdminUploadDetail> detail) {
		this.detail = detail;
	}

	public EMappingCustomerProduk getMappingCustomerProduk() {
		return mappingCustomerProduk;
	}

	public void setMappingCustomerProduk(EMappingCustomerProduk mappingCustomerProduk) {
		this.mappingCustomerProduk = mappingCustomerProduk;
	}

	public Object clone() {
		try {
			return super.clone();
		} catch (CloneNotSupportedException e) {
			throw new DevException("Clone not supported", e);
		}
	}

	@PrePersist
	private void prePersist() {

		Date currentDate = new Date();

		this.id = UUID.randomUUID().toString();

		this.usrcrt = CurrentUser.getUsername();
		this.tglcrt = new SimpleDateFormat("yyyyMMdd").format(currentDate);
		this.jamcrt = new SimpleDateFormat("HHmmss").format(currentDate);

	}

	@PreUpdate
	private void preUpdate() {
		Date currentDate = new Date();

		this.usrupd = CurrentUser.getUsername();
		this.tglupd = new SimpleDateFormat("yyyyMMdd").format(currentDate);
		this.jamupd = new SimpleDateFormat("HHmmss").format(currentDate);
	}
}