package co.id.sofcograha.domain.invoicing.masters.customerProdukTarif.services;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import co.id.sofcograha.base.exceptions.BusinessException;
import co.id.sofcograha.base.extendables.BaseService;
import co.id.sofcograha.base.utils.Message;
import co.id.sofcograha.base.utils.TimeUtil;
import co.id.sofcograha.base.utils.VersionUtil;
import co.id.sofcograha.base.utils.searchData.SearchParameter;
import co.id.sofcograha.base.utils.searchData.SearchResult;
import co.id.sofcograha.base.utils.threadlocals.LocalErrors;
import co.id.sofcograha.domain.invoicing.masters.customerProdukTarif.entities.ECustomerProdukTarifDetail;
import co.id.sofcograha.domain.invoicing.masters.customerProdukTarif.entities.ECustomerProdukTarifHeader;
import co.id.sofcograha.domain.invoicing.masters.customerProdukTarif.pojos.CustomerProdukTarifComplete;
import co.id.sofcograha.domain.invoicing.masters.customerProdukTarif.pojos.CustomerProdukTarifDetail;
import co.id.sofcograha.domain.invoicing.masters.customerProdukTarif.pojos.CustomerProdukTarifHeader;
import co.id.sofcograha.domain.invoicing.masters.customerProdukTarif.repositories.ECustomerProdukTarifHeaderRepository;
import co.id.sofcograha.domain.invoicing.masters.mappingCustomerProduk.entities.EMappingCustomerProduk;
import co.id.sofcograha.domain.invoicing.masters.mappingCustomerProduk.pojos.MappingCustomerProduk;
import co.id.sofcograha.domain.invoicing.masters.mappingCustomerProduk.services.MappingCustomerProdukService;

@Service("customerProdukTarifCompleteService")
public class CustomerProdukTarifCompleteService extends BaseService {
	
	@Autowired private CustomerProdukTarifHeaderService customerProdukTarifHeaderService;
	@Autowired private CustomerProdukTarifDetailService customerProdukTarifDetailService;
	@Autowired private MappingCustomerProdukService mappingCustomerProdukService;

	@Autowired private ECustomerProdukTarifHeaderRepository eCustomerProdukTarifHeaderRepository;
	
	private boolean isErrorDetail = false;
	private boolean isErrorSubDetail = false;
	
	public CustomerProdukTarifComplete findByBk(String idMi010, String idMi001) {
		return CustomerProdukTarifComplete.setFromEntity(eCustomerProdukTarifHeaderRepository.findByBK(idMi010, idMi001));
	}

	public SearchResult<ECustomerProdukTarifHeader> search(SearchParameter searchParameter) {
		return eCustomerProdukTarifHeaderRepository.search(searchParameter);
	}
	
	public Date getTglJatuhTempo(String idMi010, String idMi001, Date tanggal) {
		Date result = null;
		
		CustomerProdukTarifHeader pojo = CustomerProdukTarifHeader.fromEntity(eCustomerProdukTarifHeaderRepository.findByBK(idMi010, idMi001));
		
		if (pojo != null) {			
			result = TimeUtil.addDays(tanggal, pojo.jthtemp);
		}

		return result;
	}

	@Transactional
	public ECustomerProdukTarifHeader add(CustomerProdukTarifComplete pojo) {
		
		ECustomerProdukTarifHeader entityHeader = pojo.getEntityHeader();
		
		valAdaData(entityHeader);
		valDetailNotEmpty(pojo.details, pojo.detailMappings);
		throwBatchError();
		
		ECustomerProdukTarifHeader eSkemaHargaHeader = customerProdukTarifHeaderService.add(entityHeader);
		throwBatchError();
		
		isErrorDetail = false;
		isErrorSubDetail = false;
		
		addDetails(eSkemaHargaHeader, pojo);
		addDetailMappings(eSkemaHargaHeader, pojo);

		if (isErrorDetail) {
			batchErrorWithData("customerProdukTarif.komplit.error.in.detail", pojo);
		}
		if (isErrorSubDetail) {
			batchErrorWithData("customerProdukTarif.komplit.error.in.subdetail", pojo);
		}
		throwBatchError();
		
		return eSkemaHargaHeader;

	}
	
	private void valAdaData(ECustomerProdukTarifHeader entity) {
		if (entity == null) {
			batchError("customerProdukTarif.komplit.no.data");
		}
	}
	
	private void valDetailNotEmpty(List<CustomerProdukTarifDetail> detailList, List<MappingCustomerProduk> detailMappings) {
		if (detailList == null || detailList.isEmpty() &&
			detailMappings == null || detailMappings.isEmpty()) {
			batchError("customerProdukTarif.komplit.no.detail");
		}
	}
	
	private void addDetails(ECustomerProdukTarifHeader eSkemaHargaHeader, CustomerProdukTarifComplete pojo) {
		
		List<CustomerProdukTarifDetail> details = pojo.details;
		
		//boolean isErrorDetail = false;
		//boolean isErrorSubDetail = false;
		
		for (CustomerProdukTarifDetail detail: details) {
			
			if (!detail.isSelect) {
				// hanya simpan untuk yang tidak dicentang hapus
				
				ECustomerProdukTarifDetail eSkemaHargaDetail = detail.toEntity();
				
				eSkemaHargaDetail.setHeader(eSkemaHargaHeader);
				
				// method .add di detail ini tanpa ada throwBatchError(), supaya batchError nya terkumpul dan tidak serta merta di
				// throw exception
				eSkemaHargaDetail = customerProdukTarifDetailService.add(eSkemaHargaDetail);
				
				if (isAnyBatchErrors()) {
					isErrorDetail = true;
					
					// ambil error-error yang sudah terkumpul di batchError, lalu masukkan ke errorMsg di pojo ini 
					
					for (BusinessException businessException : LocalErrors.getErrors().getBusinessExceptions()) {
						
						// khusus untuk error yang muncul di grid
						Message message = new Message();
						ArrayList<Object> newParameters = new ArrayList<Object>();
						
						for (Object object : businessException.getMessageParameters()) {
							newParameters.add(object);
						}
			
						message.setCode(businessException.getMessageCode());
						message.setArgs(newParameters);
						
						if (detail.errorMsg == null) {
							detail.errorMsg = new ArrayList<Message>();
						}
			
						detail.errorMsg.clear();
						detail.errorMsg.add(message);					
					}
					
					// bersihkan error yang ada di LocalError
					removeBatchErrors();
					
					continue;
					// ini artinya kalau ada error di detail sub detail tidak dijalankan (ngga apa apa sih)
					// tapi bagaimana bila sub detail yang ada error, apakah detail nya juga ditandai error agar tampilan di layar
					// nanti di 'depan' (display browse detail) ada tanda merah (sebab kan ngga lucu juga kalo user harus klik 
					// satu satu sampai anak ter dalam
				}
										
			}			
		}
		
		// untuk error di grid
		//if (isErrorDetail) {
		//	batchErrorWithData("customerProdukTarif.komplit.error.in.detail", pojo);
		//}
		//if (isErrorSubDetail) {
		//	batchErrorWithData("customerProdukTarif.komplit.error.in.subdetail", pojo);
		//}
	}	
	
	private void addDetailMappings(ECustomerProdukTarifHeader eSkemaHargaHeader, CustomerProdukTarifComplete pojo) {
		
		List<MappingCustomerProduk> details = pojo.detailMappings;
		
		//boolean isErrorDetail = false;
		//boolean isErrorSubDetail = false;
		
		for (MappingCustomerProduk detail: details) {
			
			if (!detail.isSelect) {
				// hanya simpan untuk yang tidak dicentang hapus
				
				EMappingCustomerProduk eMappingCustomerProduk = detail.toEntity();
				
				eMappingCustomerProduk.setHeader(eSkemaHargaHeader);
				
				// method .add di detail ini tanpa ada throwBatchError(), supaya batchError nya terkumpul dan tidak serta merta di
				// throw exception
				eMappingCustomerProduk = mappingCustomerProdukService.add(eMappingCustomerProduk);
				
				if (isAnyBatchErrors()) {
					isErrorDetail = true;
					
					// ambil error-error yang sudah terkumpul di batchError, lalu masukkan ke errorMsg di pojo ini 
					
					for (BusinessException businessException : LocalErrors.getErrors().getBusinessExceptions()) {
						
						// khusus untuk error yang muncul di grid
						Message message = new Message();
						ArrayList<Object> newParameters = new ArrayList<Object>();
						
						for (Object object : businessException.getMessageParameters()) {
							newParameters.add(object);
						}
			
						message.setCode(businessException.getMessageCode());
						message.setArgs(newParameters);
						
						if (detail.errorMsg == null) {
							detail.errorMsg = new ArrayList<Message>();
						}
			
						detail.errorMsg.clear();
						detail.errorMsg.add(message);					
					}
					
					// bersihkan error yang ada di LocalError
					removeBatchErrors();
					
					continue;
					// ini artinya kalau ada error di detail sub detail tidak dijalankan (ngga apa apa sih)
					// tapi bagaimana bila sub detail yang ada error, apakah detail nya juga ditandai error agar tampilan di layar
					// nanti di 'depan' (display browse detail) ada tanda merah (sebab kan ngga lucu juga kalo user harus klik 
					// satu satu sampai anak ter dalam
				}
										
			}			
		}
		
		// untuk error di grid
		//if (isErrorDetail) {
		//	batchErrorWithData("customerProdukTarif.komplit.error.in.detail", pojo);
		//}
		//if (isErrorSubDetail) {
		//	batchErrorWithData("customerProdukTarif.komplit.error.in.subdetail", pojo);
		//}
	}	
	
	@Transactional
	public ECustomerProdukTarifHeader edit(CustomerProdukTarifComplete pojo) {
		
		ECustomerProdukTarifHeader entityHeader = pojo.getEntityHeader();
		
		valAdaData(entityHeader);
		valDetailNotEmpty(pojo.details, pojo.detailMappings);
		throwBatchError();
		
		ECustomerProdukTarifHeader newETransaksiJurnalHeader = customerProdukTarifHeaderService.get(entityHeader.getId());
		
		isErrorDetail = false;
		isErrorSubDetail = false;
		
		editDetails(newETransaksiJurnalHeader, pojo);
		editDetailMappings(newETransaksiJurnalHeader, pojo);

		if (isErrorDetail) {
			batchErrorWithData("customerProdukTarif.komplit.error.in.detail", pojo);
		}
		if (isErrorSubDetail) {
			batchErrorWithData("customerProdukTarif.komplit.error.in.subdetail", pojo);
		}
		throwBatchError();

		newETransaksiJurnalHeader = customerProdukTarifHeaderService.edit(entityHeader);
		throwBatchError();
		
		return newETransaksiJurnalHeader;
	}
	
	private void editDetails(ECustomerProdukTarifHeader eTransaksiJurnalHeader, CustomerProdukTarifComplete pojo) {
		
		//boolean isErrorDetail = false;
		
		List<CustomerProdukTarifDetail> detailJurnals = pojo.details;
		for (CustomerProdukTarifDetail detailJurnal: detailJurnals) {
			
			if (detailJurnal.id != null && !detailJurnal.id.equals("")) {
				customerProdukTarifDetailService.delete(detailJurnal.id, detailJurnal.version);
			}
			
			if (isAnyBatchErrors()) {
				isErrorDetail = true;
				
				// ambil error-error yang sudah terkumpul di batchError, lalu masukkan ke errorMsg di pojo ini 
				for (BusinessException businessException : LocalErrors.getErrors().getBusinessExceptions()) {
					
					// khusus untuk error yang muncul di grid
					Message message = new Message();
					ArrayList<Object> newParameters = new ArrayList<Object>();
					
					for (Object object : businessException.getMessageParameters()) {
						newParameters.add(object);
					}
		
					message.setCode(businessException.getMessageCode());
					message.setArgs(newParameters);
					
					if (detailJurnal.errorMsg == null) {
						detailJurnal.errorMsg = new ArrayList<Message>();
					}
		
					detailJurnal.errorMsg.add(message);					
				}
				
				// bersihkan error yang ada di LocalError
				removeBatchErrors();
			}
		}
		
		// untuk error di grid
		//if (isErrorDetail) {
		//	batchErrorWithData("customerProdukTarif.komplit.error.in.detail", pojo);
		//}
		//throwBatchError();		
		
		if (!isErrorDetail) {
			addDetails(eTransaksiJurnalHeader, pojo);
		}
	}
	
	private void editDetailMappings(ECustomerProdukTarifHeader eTransaksiJurnalHeader, CustomerProdukTarifComplete pojo) {
		
		//boolean isErrorDetail = false;
		
		List<MappingCustomerProduk> detailJurnals = pojo.detailMappings;
		for (MappingCustomerProduk detailJurnal: detailJurnals) {
			
			if (detailJurnal.id != null && !detailJurnal.id.equals("")) {
				mappingCustomerProdukService.delete(detailJurnal.id, detailJurnal.version);
			}
			
			if (isAnyBatchErrors()) {
				isErrorDetail = true;
				
				// ambil error-error yang sudah terkumpul di batchError, lalu masukkan ke errorMsg di pojo ini 
				for (BusinessException businessException : LocalErrors.getErrors().getBusinessExceptions()) {
					
					// khusus untuk error yang muncul di grid
					Message message = new Message();
					ArrayList<Object> newParameters = new ArrayList<Object>();
					
					for (Object object : businessException.getMessageParameters()) {
						newParameters.add(object);
					}
		
					message.setCode(businessException.getMessageCode());
					message.setArgs(newParameters);
					
					if (detailJurnal.errorMsg == null) {
						detailJurnal.errorMsg = new ArrayList<Message>();
					}
		
					detailJurnal.errorMsg.add(message);					
				}
				
				// bersihkan error yang ada di LocalError
				removeBatchErrors();
			}
		}
		
		// untuk error di grid
		//if (isErrorDetail) {
		//	batchErrorWithData("customerProdukTarif.komplit.error.in.detail", pojo);
		//}
		//throwBatchError();		
		
		if (!isErrorDetail) {
			addDetailMappings(eTransaksiJurnalHeader, pojo);
		}
	}
	
	@Transactional
	public void delete (String id, Long version) {
		
		valIdVersionRequired(id, version);
		valRootVersion(id, version);
		throwBatchError();
		
		ECustomerProdukTarifHeader eTransaksiJurnalHeader = customerProdukTarifHeaderService.get(id);
				
		CustomerProdukTarifComplete pojo = CustomerProdukTarifComplete.setFromEntity(eTransaksiJurnalHeader);
		
		//boolean isErrorDetail = false;
		isErrorDetail = false;
		
		// delete detail
		for (CustomerProdukTarifDetail detailJurnal: pojo.details) {
			customerProdukTarifDetailService.delete(detailJurnal.id, detailJurnal.version);
			
			if (isAnyBatchErrors()) {
				isErrorDetail = true;
				
				// ambil error-error yang sudah terkumpul di batchError, lalu masukkan ke errorMsg di pojo ini 
				for (BusinessException businessException : LocalErrors.getErrors().getBusinessExceptions()) {
					
					// khusus untuk error yang muncul di grid
					Message message = new Message();
					ArrayList<Object> newParameters = new ArrayList<Object>();
					
					for (Object object : businessException.getMessageParameters()) {
						newParameters.add(object);
					}
		
					message.setCode(businessException.getMessageCode());
					message.setArgs(newParameters);
					
					if (detailJurnal.errorMsg == null) {
						detailJurnal.errorMsg = new ArrayList<Message>();
					}
		
					detailJurnal.errorMsg.add(message);					
				}
				
				// bersihkan error yang ada di LocalError
				removeBatchErrors();
			}
		}

		// detail mapping
		for (MappingCustomerProduk detailJurnal: pojo.detailMappings) {
			
			mappingCustomerProdukService.delete(detailJurnal.id, detailJurnal.version);
			
			if (isAnyBatchErrors()) {
				isErrorDetail = true;
				
				// ambil error-error yang sudah terkumpul di batchError, lalu masukkan ke errorMsg di pojo ini 
				for (BusinessException businessException : LocalErrors.getErrors().getBusinessExceptions()) {
					
					// khusus untuk error yang muncul di grid
					Message message = new Message();
					ArrayList<Object> newParameters = new ArrayList<Object>();
					
					for (Object object : businessException.getMessageParameters()) {
						newParameters.add(object);
					}
		
					message.setCode(businessException.getMessageCode());
					message.setArgs(newParameters);
					
					if (detailJurnal.errorMsg == null) {
						detailJurnal.errorMsg = new ArrayList<Message>();
					}
		
					detailJurnal.errorMsg.add(message);					
				}
				
				// bersihkan error yang ada di LocalError
				removeBatchErrors();
			}
		}
		
		// untuk error di grid
		if (isErrorDetail) {
			batchErrorWithData("customerProdukTarif.komplit.error.in.detail", pojo);
		}
		throwBatchError();		
		
		// delete trx header
		customerProdukTarifHeaderService.delete(id, version);
	}
	
	protected void valRootVersion(String id, Long version) {
		valEntityExists(id);
		ECustomerProdukTarifHeader dbEntity = customerProdukTarifHeaderService.get(id);
		VersionUtil.check(version, dbEntity.getVersion());
	}
	
	private void valEntityExists(String id) {
		if (customerProdukTarifHeaderService.get(id) == null) {
			throw new BusinessException("data.not.found", id);
		}
	}
	
}
