package co.id.sofcograha.domain.invoicing.saldo.deposit.data.pojos;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.util.StringUtils;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import co.id.sofcograha.base.constants.BaseConstants;
import co.id.sofcograha.base.utils.TimeUtil;
import co.id.sofcograha.base.utils.searchData.SearchFieldMapping;
import co.id.sofcograha.domain.invoicing.masters.customer.entities.ECustomerGajiId;
import co.id.sofcograha.domain.invoicing.masters.customer.pojos.CustomerGajiId;
import co.id.sofcograha.domain.invoicing.saldo.deposit.data.entities.ESaldoDepositHeader;

@JsonInclude(Include.ALWAYS)
public class SaldoDepositHeader {
	
	public String id;
	public Double nildep;
	public Double nildepused;
    
	public Long version;  
    public String usrcrt;
    public Date tglcrt;
    public String jamcrt;
    public String usrupd;
    public Date tglupd;
    public String jamupd;
	
	public CustomerGajiId customer;
	public List<SaldoDepositDetailTambah> detailTambah;
	public List<SaldoDepositDetailKurang> detailKurang;

	public ESaldoDepositHeader toEntity() {
		
		ESaldoDepositHeader entity = new ESaldoDepositHeader();

		entity.setId(id);
		entity.setNildep(nildep);
		entity.setNildepused(nildepused);

		entity.setVersion(version);
        entity.setUsrcrt(usrcrt);
        
		if (tglcrt != null) {
			entity.setTglcrt(TimeUtil.convertDateToYyyyMmDd(tglcrt)); 
		}
        
        entity.setJamcrt(jamcrt);
        entity.setUsrupd(usrupd);
        
		if (tglupd != null) {
			entity.setTglupd(TimeUtil.convertDateToYyyyMmDd(tglupd)); 
		}
        
        entity.setJamupd(jamupd);
		
		if (customer != null && !StringUtils.isEmpty(customer.id)) {
			ECustomerGajiId entityRef = new ECustomerGajiId();
		
			entityRef.setId(customer.id);
			entityRef.setVersion(customer.version);
		
			entity.setCustomer(entityRef);
		
		} else {
			entity.setCustomer(null);
		}
        
		return entity;
	}
	
	public static List<ESaldoDepositHeader> toEntities(List<SaldoDepositHeader> pojos) {
		if (pojos == null) return null;

		List<ESaldoDepositHeader> entities = new ArrayList<ESaldoDepositHeader>();
		for (SaldoDepositHeader pojo : pojos) {
			entities.add(pojo.toEntity());
		}

		return entities;
	}
	
	public static SaldoDepositHeader fromEntity (ESaldoDepositHeader entity) {
		return fromEntity(entity, BaseConstants.DEFAULT_QUERY_DEPTH, BaseConstants.DEFAULT_DETAIL_QUERY_DEPTH);
	}
	
	public static SaldoDepositHeader fromEntity (ESaldoDepositHeader entity, int depthLevel) {
		return fromEntity(entity, depthLevel, BaseConstants.DEFAULT_DETAIL_QUERY_DEPTH);
	}
	
	public static SaldoDepositHeader fromEntity(ESaldoDepositHeader entity, int depthLevel, int detailDepthLevel) {
		
		if (entity == null) return null;
		if (depthLevel < 0) depthLevel = BaseConstants.DEFAULT_QUERY_DEPTH;	
	    if (detailDepthLevel < 0) detailDepthLevel = BaseConstants.DEFAULT_DETAIL_QUERY_DEPTH;
		
		SaldoDepositHeader pojo = new SaldoDepositHeader();
		
		pojo.id = entity.getId();
		if (depthLevel > 0) {
			depthLevel--;

			pojo.nildep = entity.getNildep();
			pojo.nildepused = entity.getNildepused();

			pojo.version = entity.getVersion();
	        pojo.usrcrt = entity.getUsrcrt();
	        
			if (entity.getTglcrt() != null && !entity.getTglcrt().trim().equals("")) {
				pojo.tglcrt = TimeUtil.getDate(entity.getTglcrt());				
			} else {
				pojo.tglcrt = null;
			}
	        
	        pojo.jamcrt = entity.getJamcrt();
	        pojo.usrupd = entity.getUsrupd();
	        
			if (entity.getTglupd() != null && !entity.getTglupd().trim().equals("")) {
				pojo.tglupd = TimeUtil.getDate(entity.getTglupd());				
			} else {
				pojo.tglupd = null;
			}
	        
	        pojo.jamupd = entity.getJamupd();
	      
			pojo.customer = CustomerGajiId.fromEntity(entity.getCustomer());
			
			if (detailDepthLevel > 0) {
				detailDepthLevel--;
				
				pojo.detailTambah = SaldoDepositDetailTambah.fromEntities(entity.getDetailTambah(), depthLevel + 1, detailDepthLevel);
				pojo.detailKurang = SaldoDepositDetailKurang.fromEntities(entity.getDetailKurang(), depthLevel + 1, detailDepthLevel);
			}
		}

		return pojo;
	}
	
	public static List<SaldoDepositHeader> fromEntities(List<ESaldoDepositHeader> entities){
		return fromEntities(entities, BaseConstants.DEFAULT_QUERY_DEPTH, BaseConstants.DEFAULT_DETAIL_QUERY_DEPTH);
	}
	
	public static List<SaldoDepositHeader> fromEntities(List<ESaldoDepositHeader> entities, int depthLevel, int detailDepthLevel){
		
		if (entities == null) return new ArrayList<>();
		if (depthLevel < 0) depthLevel = BaseConstants.DEFAULT_QUERY_DEPTH;
		if (detailDepthLevel < 0) detailDepthLevel = BaseConstants.DEFAULT_DETAIL_QUERY_DEPTH;
		
		List<SaldoDepositHeader> pojos = new ArrayList<>();
		
		for (ESaldoDepositHeader entity : entities) {
			pojos.add(SaldoDepositHeader.fromEntity(entity, depthLevel, detailDepthLevel));
		}
		return pojos;
	}

	public static List<SearchFieldMapping> getFieldMappings() {
		List<SearchFieldMapping> mappings = new ArrayList<>();
		
		mappings.add(new SearchFieldMapping("customer", "customer.nama"));
		mappings.add(new SearchFieldMapping("nildep", "nildep", Double.class).sortOnly());
		mappings.add(new SearchFieldMapping("nildepused", "nildepused", Double.class).sortOnly());
//		mappings.add(new SearchFieldMapping("widgetId", "widget.id").searchOnly());
//		mappings.add(new SearchFieldMapping("userId", "user.id"));
//		mappings.add(new SearchFieldMapping("orderNumber", "orderNumber", Integer.class).sortOnly());
		
		return mappings;
	}
}	
